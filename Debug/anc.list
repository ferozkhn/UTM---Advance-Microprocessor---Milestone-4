
anc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c364  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a54  0800c538  0800c538  0001c538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf8c  0800cf8c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf8c  0800cf8c  0001cf8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf94  0800cf94  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf94  0800cf94  0001cf94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf98  0800cf98  0001cf98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800cf9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b7c  20000200  0800d198  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005d7c  0800d198  00025d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018630  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c6  00000000  00000000  0003885c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  0003be28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  0003cd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250f2  00000000  00000000  0003daf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d27  00000000  00000000  00062be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf6a4  00000000  00000000  00079909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00148fad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff4  00000000  00000000  00149000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c51c 	.word	0x0800c51c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800c51c 	.word	0x0800c51c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b9a4 	b.w	8000fac <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468c      	mov	ip, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8083 	bne.w	8000dfe <__udivmoddi4+0x116>
 8000cf8:	428a      	cmp	r2, r1
 8000cfa:	4617      	mov	r7, r2
 8000cfc:	d947      	bls.n	8000d8e <__udivmoddi4+0xa6>
 8000cfe:	fab2 f282 	clz	r2, r2
 8000d02:	b142      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d04:	f1c2 0020 	rsb	r0, r2, #32
 8000d08:	fa24 f000 	lsr.w	r0, r4, r0
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	4097      	lsls	r7, r2
 8000d10:	ea40 0c01 	orr.w	ip, r0, r1
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d20:	fa1f fe87 	uxth.w	lr, r7
 8000d24:	fb08 c116 	mls	r1, r8, r6, ip
 8000d28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3a:	f080 8119 	bcs.w	8000f70 <__udivmoddi4+0x288>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8116 	bls.w	8000f70 <__udivmoddi4+0x288>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	443b      	add	r3, r7
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d50:	fb08 3310 	mls	r3, r8, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	193c      	adds	r4, r7, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8105 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f240 8102 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d70:	3802      	subs	r0, #2
 8000d72:	443c      	add	r4, r7
 8000d74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	b11d      	cbz	r5, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c5 4300 	strd	r4, r3, [r5]
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	b902      	cbnz	r2, 8000d92 <__udivmoddi4+0xaa>
 8000d90:	deff      	udf	#255	; 0xff
 8000d92:	fab2 f282 	clz	r2, r2
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	d150      	bne.n	8000e3c <__udivmoddi4+0x154>
 8000d9a:	1bcb      	subs	r3, r1, r7
 8000d9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da0:	fa1f f887 	uxth.w	r8, r7
 8000da4:	2601      	movs	r6, #1
 8000da6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000daa:	0c21      	lsrs	r1, r4, #16
 8000dac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb08 f30c 	mul.w	r3, r8, ip
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0xe2>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	f200 80e9 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1ac9      	subs	r1, r1, r3
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x10c>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x10a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80d9 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e7bf      	b.n	8000d7e <__udivmoddi4+0x96>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0x12e>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80b1 	beq.w	8000f6a <__udivmoddi4+0x282>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x1cc>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0x140>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80b8 	bhi.w	8000f98 <__udivmoddi4+0x2b0>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	468c      	mov	ip, r1
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0a8      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000e36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e3a:	e7a5      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f603 	lsr.w	r6, r0, r3
 8000e44:	4097      	lsls	r7, r2
 8000e46:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4e:	40d9      	lsrs	r1, r3
 8000e50:	4330      	orrs	r0, r6
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e58:	fa1f f887 	uxth.w	r8, r7
 8000e5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e64:	fb06 f108 	mul.w	r1, r6, r8
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e6e:	d909      	bls.n	8000e84 <__udivmoddi4+0x19c>
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e76:	f080 808d 	bcs.w	8000f94 <__udivmoddi4+0x2ac>
 8000e7a:	4299      	cmp	r1, r3
 8000e7c:	f240 808a 	bls.w	8000f94 <__udivmoddi4+0x2ac>
 8000e80:	3e02      	subs	r6, #2
 8000e82:	443b      	add	r3, r7
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b281      	uxth	r1, r0
 8000e88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e94:	fb00 f308 	mul.w	r3, r0, r8
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	d907      	bls.n	8000eac <__udivmoddi4+0x1c4>
 8000e9c:	1879      	adds	r1, r7, r1
 8000e9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ea2:	d273      	bcs.n	8000f8c <__udivmoddi4+0x2a4>
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d971      	bls.n	8000f8c <__udivmoddi4+0x2a4>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	4439      	add	r1, r7
 8000eac:	1acb      	subs	r3, r1, r3
 8000eae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eb2:	e778      	b.n	8000da6 <__udivmoddi4+0xbe>
 8000eb4:	f1c6 0c20 	rsb	ip, r6, #32
 8000eb8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ebc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ec0:	431c      	orrs	r4, r3
 8000ec2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ece:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ed2:	431f      	orrs	r7, r3
 8000ed4:	0c3b      	lsrs	r3, r7, #16
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fa1f f884 	uxth.w	r8, r4
 8000ede:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ee2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ee6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eea:	458a      	cmp	sl, r1
 8000eec:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x220>
 8000ef6:	1861      	adds	r1, r4, r1
 8000ef8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000efc:	d248      	bcs.n	8000f90 <__udivmoddi4+0x2a8>
 8000efe:	458a      	cmp	sl, r1
 8000f00:	d946      	bls.n	8000f90 <__udivmoddi4+0x2a8>
 8000f02:	f1a9 0902 	sub.w	r9, r9, #2
 8000f06:	4421      	add	r1, r4
 8000f08:	eba1 010a 	sub.w	r1, r1, sl
 8000f0c:	b2bf      	uxth	r7, r7
 8000f0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f1a:	fb00 f808 	mul.w	r8, r0, r8
 8000f1e:	45b8      	cmp	r8, r7
 8000f20:	d907      	bls.n	8000f32 <__udivmoddi4+0x24a>
 8000f22:	19e7      	adds	r7, r4, r7
 8000f24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f28:	d22e      	bcs.n	8000f88 <__udivmoddi4+0x2a0>
 8000f2a:	45b8      	cmp	r8, r7
 8000f2c:	d92c      	bls.n	8000f88 <__udivmoddi4+0x2a0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	4427      	add	r7, r4
 8000f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f36:	eba7 0708 	sub.w	r7, r7, r8
 8000f3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3e:	454f      	cmp	r7, r9
 8000f40:	46c6      	mov	lr, r8
 8000f42:	4649      	mov	r1, r9
 8000f44:	d31a      	bcc.n	8000f7c <__udivmoddi4+0x294>
 8000f46:	d017      	beq.n	8000f78 <__udivmoddi4+0x290>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x27a>
 8000f4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f56:	40f2      	lsrs	r2, r6
 8000f58:	ea4c 0202 	orr.w	r2, ip, r2
 8000f5c:	40f7      	lsrs	r7, r6
 8000f5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f62:	2600      	movs	r6, #0
 8000f64:	4631      	mov	r1, r6
 8000f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e70b      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6fd      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f78:	4543      	cmp	r3, r8
 8000f7a:	d2e5      	bcs.n	8000f48 <__udivmoddi4+0x260>
 8000f7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f80:	eb69 0104 	sbc.w	r1, r9, r4
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7df      	b.n	8000f48 <__udivmoddi4+0x260>
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e7d2      	b.n	8000f32 <__udivmoddi4+0x24a>
 8000f8c:	4660      	mov	r0, ip
 8000f8e:	e78d      	b.n	8000eac <__udivmoddi4+0x1c4>
 8000f90:	4681      	mov	r9, r0
 8000f92:	e7b9      	b.n	8000f08 <__udivmoddi4+0x220>
 8000f94:	4666      	mov	r6, ip
 8000f96:	e775      	b.n	8000e84 <__udivmoddi4+0x19c>
 8000f98:	4630      	mov	r0, r6
 8000f9a:	e74a      	b.n	8000e32 <__udivmoddi4+0x14a>
 8000f9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa0:	4439      	add	r1, r7
 8000fa2:	e713      	b.n	8000dcc <__udivmoddi4+0xe4>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	443c      	add	r4, r7
 8000fa8:	e724      	b.n	8000df4 <__udivmoddi4+0x10c>
 8000faa:	bf00      	nop

08000fac <__aeabi_idiv0>:
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <arm_fir_f32>:
void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b08f      	sub	sp, #60	; 0x3c
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	603b      	str	r3, [r7, #0]
        float32_t *pState = S->pState;                 /* State pointer */
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	617b      	str	r3, [r7, #20]
        float32_t *pStateCurnt;                        /* Points to the current sample of the state */
        float32_t *px;                                 /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	613b      	str	r3, [r7, #16]
        float32_t c0;                                           /* Temporary variable to hold coefficient value */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  blkCnt = blockSize % 0x8U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8000fe6:	e034      	b.n	8001052 <arm_fir_f32+0xa2>
  {
    /* Copy one sample at a time into state buffer */
    *pStateCurnt++ = *pSrc++;
 8000fe8:	68ba      	ldr	r2, [r7, #8]
 8000fea:	1d13      	adds	r3, r2, #4
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff0:	1d19      	adds	r1, r3, #4
 8000ff2:	6339      	str	r1, [r7, #48]	; 0x30
 8000ff4:	6812      	ldr	r2, [r2, #0]
 8000ff6:	601a      	str	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0.0f;
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Initialize state pointer */
    px = pState;
 8000ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Initialize Coefficient pointer */
    pb = pCoeffs;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28

    i = numTaps;
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	623b      	str	r3, [r7, #32]

    /* Perform the multiply-accumulates */
    while (i > 0U)
 800100a:	e014      	b.n	8001036 <arm_fir_f32+0x86>
    {
      /* acc =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0] */
      acc0 += *px++ * *pb++;
 800100c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800100e:	1d1a      	adds	r2, r3, #4
 8001010:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001012:	ed93 7a00 	vldr	s14, [r3]
 8001016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001018:	1d1a      	adds	r2, r3, #4
 800101a:	62ba      	str	r2, [r7, #40]	; 0x28
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001024:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

      i--;
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	3b01      	subs	r3, #1
 8001034:	623b      	str	r3, [r7, #32]
    while (i > 0U)
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e7      	bne.n	800100c <arm_fir_f32+0x5c>
    }

    /* Store result in destination buffer. */
    *pDst++ = acc0;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	1d1a      	adds	r2, r3, #4
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001044:	601a      	str	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 8001046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001048:	3304      	adds	r3, #4
 800104a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Decrement loop counter */
    blkCnt--;
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	3b01      	subs	r3, #1
 8001050:	61bb      	str	r3, [r7, #24]
  while (blkCnt > 0U)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1c7      	bne.n	8000fe8 <arm_fir_f32+0x38>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	3b01      	subs	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 8001064:	e00a      	b.n	800107c <arm_fir_f32+0xcc>
  {
    *pStateCurnt++ = *pState++;
 8001066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001068:	1d13      	adds	r3, r2, #4
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
 800106c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106e:	1d19      	adds	r1, r3, #4
 8001070:	6339      	str	r1, [r7, #48]	; 0x30
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	601a      	str	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b01      	subs	r3, #1
 800107a:	61fb      	str	r3, [r7, #28]
  while (tapCnt > 0U)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f1      	bne.n	8001066 <arm_fir_f32+0xb6>
  }

}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	373c      	adds	r7, #60	; 0x3c
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <arm_fir_init_f32>:
        arm_fir_instance_f32 * S,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	460b      	mov	r3, r1
 800109e:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	897a      	ldrh	r2, [r7, #10]
 80010a4:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	609a      	str	r2, [r3, #8]

  /* Clear state buffer. The size is always (blockSize + numTaps - 1) */
#if defined(ARM_MATH_MVEF) && !defined(ARM_MATH_AUTOVECTORIZE)
  memset(pState, 0, (numTaps + (blockSize - 1U) + blockSize) * sizeof(float32_t));
#else
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 80010ac:	897a      	ldrh	r2, [r7, #10]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	4413      	add	r3, r2
 80010b2:	3b01      	subs	r3, #1
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	461a      	mov	r2, r3
 80010b8:	2100      	movs	r1, #0
 80010ba:	6838      	ldr	r0, [r7, #0]
 80010bc:	f008 f9d2 	bl	8009464 <memset>
#endif
  /* Assign state pointer */
  S->pState = pState;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	605a      	str	r2, [r3, #4]
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010da:	4804      	ldr	r0, [pc, #16]	; (80010ec <SELECT+0x1c>)
 80010dc:	f001 fa7c 	bl	80025d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f000 ff1d 	bl	8001f20 <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000

080010f0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010fa:	4804      	ldr	r0, [pc, #16]	; (800110c <DESELECT+0x1c>)
 80010fc:	f001 fa6c 	bl	80025d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001100:	2001      	movs	r0, #1
 8001102:	f000 ff0d 	bl	8001f20 <HAL_Delay>
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000

08001110 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800111a:	bf00      	nop
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <SPI_TxByte+0x30>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b02      	cmp	r3, #2
 8001128:	d1f8      	bne.n	800111c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800112a:	1df9      	adds	r1, r7, #7
 800112c:	2364      	movs	r3, #100	; 0x64
 800112e:	2201      	movs	r2, #1
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <SPI_TxByte+0x30>)
 8001132:	f002 f8ae 	bl	8003292 <HAL_SPI_Transmit>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20001bb8 	.word	0x20001bb8

08001144 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001150:	bf00      	nop
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <SPI_TxBuffer+0x30>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b02      	cmp	r3, #2
 800115e:	d1f8      	bne.n	8001152 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001160:	887a      	ldrh	r2, [r7, #2]
 8001162:	2364      	movs	r3, #100	; 0x64
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4803      	ldr	r0, [pc, #12]	; (8001174 <SPI_TxBuffer+0x30>)
 8001168:	f002 f893 	bl	8003292 <HAL_SPI_Transmit>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20001bb8 	.word	0x20001bb8

08001178 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800117e:	23ff      	movs	r3, #255	; 0xff
 8001180:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001182:	bf00      	nop
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <SPI_RxByte+0x34>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b02      	cmp	r3, #2
 8001190:	d1f8      	bne.n	8001184 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001192:	1dba      	adds	r2, r7, #6
 8001194:	1df9      	adds	r1, r7, #7
 8001196:	2364      	movs	r3, #100	; 0x64
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <SPI_RxByte+0x34>)
 800119e:	f002 f9b4 	bl	800350a <HAL_SPI_TransmitReceive>

	return data;
 80011a2:	79bb      	ldrb	r3, [r7, #6]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20001bb8 	.word	0x20001bb8

080011b0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <SD_ReadyWait+0x30>)
 80011b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011bc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80011be:	f7ff ffdb 	bl	8001178 <SPI_RxByte>
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2bff      	cmp	r3, #255	; 0xff
 80011ca:	d004      	beq.n	80011d6 <SD_ReadyWait+0x26>
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SD_ReadyWait+0x30>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f3      	bne.n	80011be <SD_ReadyWait+0xe>

	return res;
 80011d6:	79fb      	ldrb	r3, [r7, #7]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20003cc8 	.word	0x20003cc8

080011e4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80011ea:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80011ee:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80011f0:	f7ff ff7e 	bl	80010f0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	e005      	b.n	8001206 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80011fa:	20ff      	movs	r0, #255	; 0xff
 80011fc:	f7ff ff88 	bl	8001110 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	3301      	adds	r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b09      	cmp	r3, #9
 800120a:	ddf6      	ble.n	80011fa <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800120c:	f7ff ff60 	bl	80010d0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001210:	2340      	movs	r3, #64	; 0x40
 8001212:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001224:	2395      	movs	r3, #149	; 0x95
 8001226:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001228:	463b      	mov	r3, r7
 800122a:	2106      	movs	r1, #6
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff89 	bl	8001144 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001232:	e002      	b.n	800123a <SD_PowerOn+0x56>
	{
		cnt--;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3b01      	subs	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800123a:	f7ff ff9d 	bl	8001178 <SPI_RxByte>
 800123e:	4603      	mov	r3, r0
 8001240:	2b01      	cmp	r3, #1
 8001242:	d002      	beq.n	800124a <SD_PowerOn+0x66>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f4      	bne.n	8001234 <SD_PowerOn+0x50>
	}

	DESELECT();
 800124a:	f7ff ff51 	bl	80010f0 <DESELECT>
	SPI_TxByte(0XFF);
 800124e:	20ff      	movs	r0, #255	; 0xff
 8001250:	f7ff ff5e 	bl	8001110 <SPI_TxByte>

	PowerFlag = 1;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <SD_PowerOn+0x80>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000021d 	.word	0x2000021d

08001268 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <SD_PowerOff+0x14>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	2000021d 	.word	0x2000021d

08001280 <SD_SendCmd>:
}
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800128c:	f7ff ff90 	bl	80011b0 <SD_ReadyWait>
 8001290:	4603      	mov	r3, r0
 8001292:	2bff      	cmp	r3, #255	; 0xff
 8001294:	d001      	beq.n	800129a <SD_SendCmd+0x1a>
 8001296:	23ff      	movs	r3, #255	; 0xff
 8001298:	e042      	b.n	8001320 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff37 	bl	8001110 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	0e1b      	lsrs	r3, r3, #24
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff31 	bl	8001110 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	0c1b      	lsrs	r3, r3, #16
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff2b 	bl	8001110 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff25 	bl	8001110 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff20 	bl	8001110 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b40      	cmp	r3, #64	; 0x40
 80012d4:	d102      	bne.n	80012dc <SD_SendCmd+0x5c>
 80012d6:	2395      	movs	r3, #149	; 0x95
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e007      	b.n	80012ec <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b48      	cmp	r3, #72	; 0x48
 80012e0:	d102      	bne.n	80012e8 <SD_SendCmd+0x68>
 80012e2:	2387      	movs	r3, #135	; 0x87
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e001      	b.n	80012ec <SD_SendCmd+0x6c>
	else crc = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff0e 	bl	8001110 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b4c      	cmp	r3, #76	; 0x4c
 80012f8:	d101      	bne.n	80012fe <SD_SendCmd+0x7e>
 80012fa:	f7ff ff3d 	bl	8001178 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80012fe:	230a      	movs	r3, #10
 8001300:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001302:	f7ff ff39 	bl	8001178 <SPI_RxByte>
 8001306:	4603      	mov	r3, r0
 8001308:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800130a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800130e:	2b00      	cmp	r3, #0
 8001310:	da05      	bge.n	800131e <SD_SendCmd+0x9e>
 8001312:	7bbb      	ldrb	r3, [r7, #14]
 8001314:	3b01      	subs	r3, #1
 8001316:	73bb      	strb	r3, [r7, #14]
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f1      	bne.n	8001302 <SD_SendCmd+0x82>

	return res;
 800131e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SD_disk_initialize+0x14>
 8001338:	2301      	movs	r3, #1
 800133a:	e0d6      	b.n	80014ea <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800133c:	4b6d      	ldr	r3, [pc, #436]	; (80014f4 <SD_disk_initialize+0x1cc>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <SD_disk_initialize+0x2a>
 800134a:	4b6a      	ldr	r3, [pc, #424]	; (80014f4 <SD_disk_initialize+0x1cc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	e0cb      	b.n	80014ea <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8001352:	f7ff ff47 	bl	80011e4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001356:	f7ff febb 	bl	80010d0 <SELECT>

	/* check disk type */
	type = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800135e:	2100      	movs	r1, #0
 8001360:	2040      	movs	r0, #64	; 0x40
 8001362:	f7ff ff8d 	bl	8001280 <SD_SendCmd>
 8001366:	4603      	mov	r3, r0
 8001368:	2b01      	cmp	r3, #1
 800136a:	f040 80a6 	bne.w	80014ba <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800136e:	4b62      	ldr	r3, [pc, #392]	; (80014f8 <SD_disk_initialize+0x1d0>)
 8001370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001374:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001376:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800137a:	2048      	movs	r0, #72	; 0x48
 800137c:	f7ff ff80 	bl	8001280 <SD_SendCmd>
 8001380:	4603      	mov	r3, r0
 8001382:	2b01      	cmp	r3, #1
 8001384:	d158      	bne.n	8001438 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e00c      	b.n	80013a6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800138c:	7bfc      	ldrb	r4, [r7, #15]
 800138e:	f7ff fef3 	bl	8001178 <SPI_RxByte>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4423      	add	r3, r4
 800139c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	3301      	adds	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d9ef      	bls.n	800138c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80013ac:	7abb      	ldrb	r3, [r7, #10]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	f040 8083 	bne.w	80014ba <SD_disk_initialize+0x192>
 80013b4:	7afb      	ldrb	r3, [r7, #11]
 80013b6:	2baa      	cmp	r3, #170	; 0xaa
 80013b8:	d17f      	bne.n	80014ba <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80013ba:	2100      	movs	r1, #0
 80013bc:	2077      	movs	r0, #119	; 0x77
 80013be:	f7ff ff5f 	bl	8001280 <SD_SendCmd>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d807      	bhi.n	80013d8 <SD_disk_initialize+0xb0>
 80013c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80013cc:	2069      	movs	r0, #105	; 0x69
 80013ce:	f7ff ff57 	bl	8001280 <SD_SendCmd>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80013d8:	4b47      	ldr	r3, [pc, #284]	; (80014f8 <SD_disk_initialize+0x1d0>)
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1eb      	bne.n	80013ba <SD_disk_initialize+0x92>
 80013e2:	e000      	b.n	80013e6 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80013e4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80013e6:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <SD_disk_initialize+0x1d0>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d064      	beq.n	80014ba <SD_disk_initialize+0x192>
 80013f0:	2100      	movs	r1, #0
 80013f2:	207a      	movs	r0, #122	; 0x7a
 80013f4:	f7ff ff44 	bl	8001280 <SD_SendCmd>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d15d      	bne.n	80014ba <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e00c      	b.n	800141e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001404:	7bfc      	ldrb	r4, [r7, #15]
 8001406:	f7ff feb7 	bl	8001178 <SPI_RxByte>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4423      	add	r3, r4
 8001414:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	3301      	adds	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d9ef      	bls.n	8001404 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001424:	7a3b      	ldrb	r3, [r7, #8]
 8001426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SD_disk_initialize+0x10a>
 800142e:	230c      	movs	r3, #12
 8001430:	e000      	b.n	8001434 <SD_disk_initialize+0x10c>
 8001432:	2304      	movs	r3, #4
 8001434:	73bb      	strb	r3, [r7, #14]
 8001436:	e040      	b.n	80014ba <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001438:	2100      	movs	r1, #0
 800143a:	2077      	movs	r0, #119	; 0x77
 800143c:	f7ff ff20 	bl	8001280 <SD_SendCmd>
 8001440:	4603      	mov	r3, r0
 8001442:	2b01      	cmp	r3, #1
 8001444:	d808      	bhi.n	8001458 <SD_disk_initialize+0x130>
 8001446:	2100      	movs	r1, #0
 8001448:	2069      	movs	r0, #105	; 0x69
 800144a:	f7ff ff19 	bl	8001280 <SD_SendCmd>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d801      	bhi.n	8001458 <SD_disk_initialize+0x130>
 8001454:	2302      	movs	r3, #2
 8001456:	e000      	b.n	800145a <SD_disk_initialize+0x132>
 8001458:	2301      	movs	r3, #1
 800145a:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d10e      	bne.n	8001480 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001462:	2100      	movs	r1, #0
 8001464:	2077      	movs	r0, #119	; 0x77
 8001466:	f7ff ff0b 	bl	8001280 <SD_SendCmd>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d80e      	bhi.n	800148e <SD_disk_initialize+0x166>
 8001470:	2100      	movs	r1, #0
 8001472:	2069      	movs	r0, #105	; 0x69
 8001474:	f7ff ff04 	bl	8001280 <SD_SendCmd>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d107      	bne.n	800148e <SD_disk_initialize+0x166>
 800147e:	e00d      	b.n	800149c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001480:	2100      	movs	r1, #0
 8001482:	2041      	movs	r0, #65	; 0x41
 8001484:	f7ff fefc 	bl	8001280 <SD_SendCmd>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <SD_disk_initialize+0x1d0>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e1      	bne.n	800145c <SD_disk_initialize+0x134>
 8001498:	e000      	b.n	800149c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800149a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <SD_disk_initialize+0x1d0>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d007      	beq.n	80014b6 <SD_disk_initialize+0x18e>
 80014a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014aa:	2050      	movs	r0, #80	; 0x50
 80014ac:	f7ff fee8 	bl	8001280 <SD_SendCmd>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SD_disk_initialize+0x192>
 80014b6:	2300      	movs	r3, #0
 80014b8:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80014ba:	4a10      	ldr	r2, [pc, #64]	; (80014fc <SD_disk_initialize+0x1d4>)
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80014c0:	f7ff fe16 	bl	80010f0 <DESELECT>
	SPI_RxByte();
 80014c4:	f7ff fe58 	bl	8001178 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <SD_disk_initialize+0x1cc>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <SD_disk_initialize+0x1cc>)
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e001      	b.n	80014e4 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80014e0:	f7ff fec2 	bl	8001268 <SD_PowerOff>
	}

	return Stat;
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <SD_disk_initialize+0x1cc>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20003cc9 	.word	0x20003cc9
 80014fc:	2000021c 	.word	0x2000021c

08001500 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SD_disk_status+0x14>
 8001510:	2301      	movs	r3, #1
 8001512:	e002      	b.n	800151a <SD_disk_status+0x1a>
	return Stat;
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <SD_disk_status+0x28>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000000 	.word	0x20000000

0800152c <send_uart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_uart(char *string)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7fe fe6b 	bl	8000210 <strlen>
 800153a:	4603      	mov	r3, r0
 800153c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, len, 2000);
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	b29a      	uxth	r2, r3
 8001542:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <send_uart+0x2c>)
 800154a:	f002 fa98 	bl	8003a7e <HAL_UART_Transmit>
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000714 	.word	0x20000714

0800155c <bufclear>:
	while (*buf++ != '\0') i++;
	return i;
}

void bufclear (void)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
	for (int i=0; i<1024; i++)
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	e007      	b.n	8001578 <bufclear+0x1c>
	{
		buffer[i] = '\0';
 8001568:	4a09      	ldr	r2, [pc, #36]	; (8001590 <bufclear+0x34>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<1024; i++)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3301      	adds	r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157e:	dbf3      	blt.n	8001568 <bufclear+0xc>
	}
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	200017a4 	.word	0x200017a4

08001594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b098      	sub	sp, #96	; 0x60
 8001598:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800159a:	f000 fc4f 	bl	8001e3c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159e:	f000 f91d 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a2:	f000 f9ed 	bl	8001980 <MX_GPIO_Init>
  MX_FATFS_Init();
 80015a6:	f003 f985 	bl	80048b4 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 80015aa:	f000 f9bf 	bl	800192c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80015ae:	f000 f987 	bl	80018c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* Mount SD Card */

  fresult = f_mount(&fs,"",1);
 80015b2:	2201      	movs	r2, #1
 80015b4:	496e      	ldr	r1, [pc, #440]	; (8001770 <main+0x1dc>)
 80015b6:	486f      	ldr	r0, [pc, #444]	; (8001774 <main+0x1e0>)
 80015b8:	f006 fd94 	bl	80080e4 <f_mount>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	4b6d      	ldr	r3, [pc, #436]	; (8001778 <main+0x1e4>)
 80015c2:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_NOT_READY)send_uart("Rosak Bro\n");
 80015c4:	4b6c      	ldr	r3, [pc, #432]	; (8001778 <main+0x1e4>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d103      	bne.n	80015d4 <main+0x40>
 80015cc:	486b      	ldr	r0, [pc, #428]	; (800177c <main+0x1e8>)
 80015ce:	f7ff ffad 	bl	800152c <send_uart>
 80015d2:	e00a      	b.n	80015ea <main+0x56>
  else if(fresult != FR_OK) send_uart("ERROR in mounting SD card\r\n");
 80015d4:	4b68      	ldr	r3, [pc, #416]	; (8001778 <main+0x1e4>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <main+0x50>
 80015dc:	4868      	ldr	r0, [pc, #416]	; (8001780 <main+0x1ec>)
 80015de:	f7ff ffa5 	bl	800152c <send_uart>
 80015e2:	e002      	b.n	80015ea <main+0x56>
  else send_uart("SD CARD mounted successfully\r\n");
 80015e4:	4867      	ldr	r0, [pc, #412]	; (8001784 <main+0x1f0>)
 80015e6:	f7ff ffa1 	bl	800152c <send_uart>
    /* USER CODE END WHILE */
	  arm_fir_instance_f32 S;
	  	  	  	float32_t *inputF32;
	  	  	  	float32_t  *outputF32;

	  	  	  	inputF32 = &testInput;
 80015ea:	4b67      	ldr	r3, [pc, #412]	; (8001788 <main+0x1f4>)
 80015ec:	657b      	str	r3, [r7, #84]	; 0x54
	  	  	  	outputF32 = &testOutput;
 80015ee:	4b67      	ldr	r3, [pc, #412]	; (800178c <main+0x1f8>)
 80015f0:	653b      	str	r3, [r7, #80]	; 0x50
	  	  	  	arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], blockSize);
 80015f2:	4b67      	ldr	r3, [pc, #412]	; (8001790 <main+0x1fc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	4b65      	ldr	r3, [pc, #404]	; (8001794 <main+0x200>)
 80015fe:	4a66      	ldr	r2, [pc, #408]	; (8001798 <main+0x204>)
 8001600:	2111      	movs	r1, #17
 8001602:	f7ff fd45 	bl	8001090 <arm_fir_init_f32>

	  	  	  	fresult = f_open(&fil, "one.txt", FA_READ);
 8001606:	2201      	movs	r2, #1
 8001608:	4964      	ldr	r1, [pc, #400]	; (800179c <main+0x208>)
 800160a:	4865      	ldr	r0, [pc, #404]	; (80017a0 <main+0x20c>)
 800160c:	f006 fdb0 	bl	8008170 <f_open>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	4b58      	ldr	r3, [pc, #352]	; (8001778 <main+0x1e4>)
 8001616:	701a      	strb	r2, [r3, #0]
	  	  	  	if(fresult != FR_OK) send_uart("ERROR in f_open txt file\r\n");
 8001618:	4b57      	ldr	r3, [pc, #348]	; (8001778 <main+0x1e4>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <main+0x94>
 8001620:	4860      	ldr	r0, [pc, #384]	; (80017a4 <main+0x210>)
 8001622:	f7ff ff83 	bl	800152c <send_uart>
 8001626:	e002      	b.n	800162e <main+0x9a>
	  	  	  	else send_uart("f_open for read successful txt\r\n");
 8001628:	485f      	ldr	r0, [pc, #380]	; (80017a8 <main+0x214>)
 800162a:	f7ff ff7f 	bl	800152c <send_uart>

	  	  	  	fresult = f_open(&fil2, "one_out_try.txt", FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
 800162e:	2213      	movs	r2, #19
 8001630:	495e      	ldr	r1, [pc, #376]	; (80017ac <main+0x218>)
 8001632:	485f      	ldr	r0, [pc, #380]	; (80017b0 <main+0x21c>)
 8001634:	f006 fd9c 	bl	8008170 <f_open>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <main+0x1e4>)
 800163e:	701a      	strb	r2, [r3, #0]
	  	  	  	if(fresult != FR_OK) send_uart("ERROR in f_open txt file\r\n");
 8001640:	4b4d      	ldr	r3, [pc, #308]	; (8001778 <main+0x1e4>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <main+0xbc>
 8001648:	4856      	ldr	r0, [pc, #344]	; (80017a4 <main+0x210>)
 800164a:	f7ff ff6f 	bl	800152c <send_uart>
 800164e:	e07a      	b.n	8001746 <main+0x1b2>
	  	  	  	else send_uart("f_open for write successful\r\n");
 8001650:	4858      	ldr	r0, [pc, #352]	; (80017b4 <main+0x220>)
 8001652:	f7ff ff6b 	bl	800152c <send_uart>

	  	  	  	//BYTE tmp [30];
	  	  	  	//char *data;
	  	  	  	char buf[30];
	  	  	  	while(f_gets((TCHAR*)buf, 30, &fil)) {
 8001656:	e076      	b.n	8001746 <main+0x1b2>
	  	  	  	//for (i=0; i<TEST_LENGTH_SAMPLES; i++) {
	  	  	  	  //HAL_UART_Transmit(&huart2, tmp, 8, 2000);
	  	  	  	  //f_read (&fil, buf, 8, &br);
	  	  	  	  //f_gets((TCHAR*)buf, 30, &fil);
	  	  	  	  if(fresult != FR_OK) 	{sprintf (buffer, "read = %s\n", buf); send_uart(buffer); bufclear();}
 8001658:	4b47      	ldr	r3, [pc, #284]	; (8001778 <main+0x1e4>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00c      	beq.n	800167a <main+0xe6>
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	461a      	mov	r2, r3
 8001666:	4954      	ldr	r1, [pc, #336]	; (80017b8 <main+0x224>)
 8001668:	4854      	ldr	r0, [pc, #336]	; (80017bc <main+0x228>)
 800166a:	f007 ff1b 	bl	80094a4 <siprintf>
 800166e:	4853      	ldr	r0, [pc, #332]	; (80017bc <main+0x228>)
 8001670:	f7ff ff5c 	bl	800152c <send_uart>
 8001674:	f7ff ff72 	bl	800155c <bufclear>
 8001678:	e00b      	b.n	8001692 <main+0xfe>
	  	  	  	  else 	{sprintf (buffer, "ERROR in read = %s\n", buf); send_uart(buffer); bufclear();}
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	461a      	mov	r2, r3
 8001680:	494f      	ldr	r1, [pc, #316]	; (80017c0 <main+0x22c>)
 8001682:	484e      	ldr	r0, [pc, #312]	; (80017bc <main+0x228>)
 8001684:	f007 ff0e 	bl	80094a4 <siprintf>
 8001688:	484c      	ldr	r0, [pc, #304]	; (80017bc <main+0x228>)
 800168a:	f7ff ff4f 	bl	800152c <send_uart>
 800168e:	f7ff ff65 	bl	800155c <bufclear>
	  	  	  	  testInput = atof(buf);
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4618      	mov	r0, r3
 8001698:	f007 feb6 	bl	8009408 <atof>
 800169c:	ec53 2b10 	vmov	r2, r3, d0
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff fa82 	bl	8000bac <__aeabi_d2f>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a37      	ldr	r2, [pc, #220]	; (8001788 <main+0x1f4>)
 80016ac:	6013      	str	r3, [r2, #0]

	  	  	  	  arm_fir_f32(&S, inputF32 + (i * blockSize), outputF32 + (i * blockSize), blockSize);
 80016ae:	4b45      	ldr	r3, [pc, #276]	; (80017c4 <main+0x230>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a37      	ldr	r2, [pc, #220]	; (8001790 <main+0x1fc>)
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	fb02 f303 	mul.w	r3, r2, r3
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016be:	18d1      	adds	r1, r2, r3
 80016c0:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <main+0x230>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a32      	ldr	r2, [pc, #200]	; (8001790 <main+0x1fc>)
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80016d0:	441a      	add	r2, r3
 80016d2:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <main+0x1fc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80016da:	f7ff fc69 	bl	8000fb0 <arm_fir_f32>

	  	  	  	  char data[30];
	  	  	  	  //data = (char *) &testOutput;
	  	  	  	  printf(data, "%f\n", testOutput);
 80016de:	4b2b      	ldr	r3, [pc, #172]	; (800178c <main+0x1f8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff50 	bl	8000588 <__aeabi_f2d>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	1d38      	adds	r0, r7, #4
 80016ee:	4936      	ldr	r1, [pc, #216]	; (80017c8 <main+0x234>)
 80016f0:	f007 fec0 	bl	8009474 <iprintf>
	  	  	  	  fresult = f_puts(data, &fil2);
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	492e      	ldr	r1, [pc, #184]	; (80017b0 <main+0x21c>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f007 fd3e 	bl	800917a <f_puts>
 80016fe:	4603      	mov	r3, r0
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <main+0x1e4>)
 8001704:	701a      	strb	r2, [r3, #0]
	  	  	  	  if(fresult != FR_OK) 	{sprintf (buffer, "write = %s\n", data); send_uart(buffer); bufclear();}
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <main+0x1e4>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <main+0x192>
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	461a      	mov	r2, r3
 8001712:	492e      	ldr	r1, [pc, #184]	; (80017cc <main+0x238>)
 8001714:	4829      	ldr	r0, [pc, #164]	; (80017bc <main+0x228>)
 8001716:	f007 fec5 	bl	80094a4 <siprintf>
 800171a:	4828      	ldr	r0, [pc, #160]	; (80017bc <main+0x228>)
 800171c:	f7ff ff06 	bl	800152c <send_uart>
 8001720:	f7ff ff1c 	bl	800155c <bufclear>
 8001724:	e00a      	b.n	800173c <main+0x1a8>
	  	  	  	  else 	{sprintf (buffer, "ERROR in write = %s\n", data); send_uart(buffer); bufclear();}
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	461a      	mov	r2, r3
 800172a:	4929      	ldr	r1, [pc, #164]	; (80017d0 <main+0x23c>)
 800172c:	4823      	ldr	r0, [pc, #140]	; (80017bc <main+0x228>)
 800172e:	f007 feb9 	bl	80094a4 <siprintf>
 8001732:	4822      	ldr	r0, [pc, #136]	; (80017bc <main+0x228>)
 8001734:	f7ff fefa 	bl	800152c <send_uart>
 8001738:	f7ff ff10 	bl	800155c <bufclear>
	  	  	  	  //i++;
	  	  	  	  count++;
 800173c:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <main+0x240>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	4a24      	ldr	r2, [pc, #144]	; (80017d4 <main+0x240>)
 8001744:	6013      	str	r3, [r2, #0]
	  	  	  	while(f_gets((TCHAR*)buf, 30, &fil)) {
 8001746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174a:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <main+0x20c>)
 800174c:	211e      	movs	r1, #30
 800174e:	4618      	mov	r0, r3
 8001750:	f007 fc5f 	bl	8009012 <f_gets>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	f47f af7e 	bne.w	8001658 <main+0xc4>
	  	  	  	}

	  	  	  	f_close(&fil);
 800175c:	4810      	ldr	r0, [pc, #64]	; (80017a0 <main+0x20c>)
 800175e:	f007 fc2e 	bl	8008fbe <f_close>
	  	  	  	f_close(&fil2);
 8001762:	4813      	ldr	r0, [pc, #76]	; (80017b0 <main+0x21c>)
 8001764:	f007 fc2b 	bl	8008fbe <f_close>
	  	  	  	send_uart("File is closed\r\n");
 8001768:	481b      	ldr	r0, [pc, #108]	; (80017d8 <main+0x244>)
 800176a:	f7ff fedf 	bl	800152c <send_uart>

	  	  	  	while (1);
 800176e:	e7fe      	b.n	800176e <main+0x1da>
 8001770:	0800c538 	.word	0x0800c538
 8001774:	20000758 	.word	0x20000758
 8001778:	20001bb4 	.word	0x20001bb4
 800177c:	0800c53c 	.word	0x0800c53c
 8001780:	0800c548 	.word	0x0800c548
 8001784:	0800c564 	.word	0x0800c564
 8001788:	20001798 	.word	0x20001798
 800178c:	200017a0 	.word	0x200017a0
 8001790:	20000004 	.word	0x20000004
 8001794:	20000220 	.word	0x20000220
 8001798:	0800c6bc 	.word	0x0800c6bc
 800179c:	0800c584 	.word	0x0800c584
 80017a0:	20001c18 	.word	0x20001c18
 80017a4:	0800c58c 	.word	0x0800c58c
 80017a8:	0800c5a8 	.word	0x0800c5a8
 80017ac:	0800c5cc 	.word	0x0800c5cc
 80017b0:	20002c70 	.word	0x20002c70
 80017b4:	0800c5dc 	.word	0x0800c5dc
 80017b8:	0800c5fc 	.word	0x0800c5fc
 80017bc:	200017a4 	.word	0x200017a4
 80017c0:	0800c608 	.word	0x0800c608
 80017c4:	20000264 	.word	0x20000264
 80017c8:	0800c61c 	.word	0x0800c61c
 80017cc:	0800c620 	.word	0x0800c620
 80017d0:	0800c62c 	.word	0x0800c62c
 80017d4:	20000268 	.word	0x20000268
 80017d8:	0800c644 	.word	0x0800c644

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b094      	sub	sp, #80	; 0x50
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	2234      	movs	r2, #52	; 0x34
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f007 fe3a 	bl	8009464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <SystemClock_Config+0xdc>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	4a2b      	ldr	r2, [pc, #172]	; (80018b8 <SystemClock_Config+0xdc>)
 800180a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180e:	6413      	str	r3, [r2, #64]	; 0x40
 8001810:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <SystemClock_Config+0xdc>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800181c:	2300      	movs	r3, #0
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	4b26      	ldr	r3, [pc, #152]	; (80018bc <SystemClock_Config+0xe0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a25      	ldr	r2, [pc, #148]	; (80018bc <SystemClock_Config+0xe0>)
 8001826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b23      	ldr	r3, [pc, #140]	; (80018bc <SystemClock_Config+0xe0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001838:	2301      	movs	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800183c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001840:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001842:	2302      	movs	r3, #2
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001846:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800184c:	2304      	movs	r3, #4
 800184e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001850:	23b4      	movs	r3, #180	; 0xb4
 8001852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001854:	2302      	movs	r3, #2
 8001856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001858:	2307      	movs	r3, #7
 800185a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800185c:	2302      	movs	r3, #2
 800185e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4618      	mov	r0, r3
 8001866:	f001 f9ed 	bl	8002c44 <HAL_RCC_OscConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001870:	f000 f8e6 	bl	8001a40 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001874:	f000 feca 	bl	800260c <HAL_PWREx_EnableOverDrive>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800187e:	f000 f8df 	bl	8001a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001882:	230f      	movs	r3, #15
 8001884:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001886:	2302      	movs	r3, #2
 8001888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800188e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001898:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800189a:	f107 0308 	add.w	r3, r7, #8
 800189e:	2105      	movs	r1, #5
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 ff03 	bl	80026ac <HAL_RCC_ClockConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80018ac:	f000 f8c8 	bl	8001a40 <Error_Handler>
  }
}
 80018b0:	bf00      	nop
 80018b2:	3750      	adds	r7, #80	; 0x50
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40007000 	.word	0x40007000

080018c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <MX_SPI1_Init+0x64>)
 80018c6:	4a18      	ldr	r2, [pc, #96]	; (8001928 <MX_SPI1_Init+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <MX_SPI1_Init+0x64>)
 80018cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_SPI1_Init+0x64>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <MX_SPI1_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_SPI1_Init+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_SPI1_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_SPI1_Init+0x64>)
 80018ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018f2:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <MX_SPI1_Init+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <MX_SPI1_Init+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MX_SPI1_Init+0x64>)
 8001900:	2200      	movs	r2, #0
 8001902:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <MX_SPI1_Init+0x64>)
 8001906:	2200      	movs	r2, #0
 8001908:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <MX_SPI1_Init+0x64>)
 800190c:	220a      	movs	r2, #10
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <MX_SPI1_Init+0x64>)
 8001912:	f001 fc35 	bl	8003180 <HAL_SPI_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800191c:	f000 f890 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20001bb8 	.word	0x20001bb8
 8001928:	40013000 	.word	0x40013000

0800192c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_USART3_UART_Init+0x4c>)
 8001932:	4a12      	ldr	r2, [pc, #72]	; (800197c <MX_USART3_UART_Init+0x50>)
 8001934:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <MX_USART3_UART_Init+0x4c>)
 8001938:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800193c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_USART3_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_USART3_UART_Init+0x4c>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <MX_USART3_UART_Init+0x4c>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_USART3_UART_Init+0x4c>)
 8001952:	220c      	movs	r2, #12
 8001954:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <MX_USART3_UART_Init+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_USART3_UART_Init+0x4c>)
 800195e:	2200      	movs	r2, #0
 8001960:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001962:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_USART3_UART_Init+0x4c>)
 8001964:	f002 f83e 	bl	80039e4 <HAL_UART_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800196e:	f000 f867 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000714 	.word	0x20000714
 800197c:	40004800 	.word	0x40004800

08001980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <MX_GPIO_Init+0xb8>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <MX_GPIO_Init+0xb8>)
 80019a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <MX_GPIO_Init+0xb8>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <MX_GPIO_Init+0xb8>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a1f      	ldr	r2, [pc, #124]	; (8001a38 <MX_GPIO_Init+0xb8>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <MX_GPIO_Init+0xb8>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <MX_GPIO_Init+0xb8>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <MX_GPIO_Init+0xb8>)
 80019d8:	f043 0310 	orr.w	r3, r3, #16
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_GPIO_Init+0xb8>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <MX_GPIO_Init+0xb8>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <MX_GPIO_Init+0xb8>)
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MX_GPIO_Init+0xb8>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a0c:	480b      	ldr	r0, [pc, #44]	; (8001a3c <MX_GPIO_Init+0xbc>)
 8001a0e:	f000 fde3 	bl	80025d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4804      	ldr	r0, [pc, #16]	; (8001a3c <MX_GPIO_Init+0xbc>)
 8001a2c:	f000 fc40 	bl	80022b0 <HAL_GPIO_Init>

}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	; 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40021000 	.word	0x40021000

08001a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   while(1)
   {
	   send_uart("NOT OK BOSS!!\n");
 8001a44:	4801      	ldr	r0, [pc, #4]	; (8001a4c <Error_Handler+0xc>)
 8001a46:	f7ff fd71 	bl	800152c <send_uart>
 8001a4a:	e7fb      	b.n	8001a44 <Error_Handler+0x4>
 8001a4c:	0800c658 	.word	0x0800c658

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a08      	ldr	r2, [pc, #32]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_MspInit+0x4c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <HAL_SPI_MspInit+0x84>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d12b      	bne.n	8001b1a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_SPI_MspInit+0x88>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_SPI_MspInit+0x88>)
 8001acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_SPI_MspInit+0x88>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <HAL_SPI_MspInit+0x88>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a10      	ldr	r2, [pc, #64]	; (8001b28 <HAL_SPI_MspInit+0x88>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <HAL_SPI_MspInit+0x88>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001afa:	23e0      	movs	r3, #224	; 0xe0
 8001afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	2302      	movs	r3, #2
 8001b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b06:	2303      	movs	r3, #3
 8001b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <HAL_SPI_MspInit+0x8c>)
 8001b16:	f000 fbcb 	bl	80022b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	; 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40013000 	.word	0x40013000
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000

08001b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <HAL_UART_MspInit+0x94>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d134      	bne.n	8001bbc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4809      	ldr	r0, [pc, #36]	; (8001bcc <HAL_UART_MspInit+0x9c>)
 8001ba8:	f000 fb82 	bl	80022b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2027      	movs	r0, #39	; 0x27
 8001bb2:	f000 fab4 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bb6:	2027      	movs	r0, #39	; 0x27
 8001bb8:	f000 facd 	bl	8002156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bbc:	bf00      	nop
 8001bbe:	3728      	adds	r7, #40	; 0x28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40004800 	.word	0x40004800
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020c00 	.word	0x40020c00

08001bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <NMI_Handler+0x4>

08001bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <HardFault_Handler+0x4>

08001bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <MemManage_Handler+0x4>

08001be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <BusFault_Handler+0x4>

08001be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <UsageFault_Handler+0x4>

08001bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1c:	f000 f960 	bl	8001ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <USART3_IRQHandler+0x10>)
 8001c2a:	f001 ffbb 	bl	8003ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000714 	.word	0x20000714

08001c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
	return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_kill>:

int _kill(int pid, int sig)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c52:	f007 fbdd 	bl	8009410 <__errno>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2216      	movs	r2, #22
 8001c5a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_exit>:

void _exit (int status)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ffe7 	bl	8001c48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c7a:	e7fe      	b.n	8001c7a <_exit+0x12>

08001c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e00a      	b.n	8001ca4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c8e:	f3af 8000 	nop.w
 8001c92:	4601      	mov	r1, r0
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	b2ca      	uxtb	r2, r1
 8001c9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dbf0      	blt.n	8001c8e <_read+0x12>
	}

return len;
 8001cac:	687b      	ldr	r3, [r7, #4]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e009      	b.n	8001cdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	60ba      	str	r2, [r7, #8]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dbf1      	blt.n	8001cc8 <_write+0x12>
	}
	return len;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_close>:

int _close(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
	return -1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d16:	605a      	str	r2, [r3, #4]
	return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_isatty>:

int _isatty(int file)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
	return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <_sbrk+0x5c>)
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <_sbrk+0x60>)
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <_sbrk+0x64>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <_sbrk+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d88:	f007 fb42 	bl	8009410 <__errno>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	220c      	movs	r2, #12
 8001d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	e009      	b.n	8001dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <_sbrk+0x64>)
 8001da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20020000 	.word	0x20020000
 8001db8:	00000400 	.word	0x00000400
 8001dbc:	2000026c 	.word	0x2000026c
 8001dc0:	20005d80 	.word	0x20005d80

08001dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <SystemInit+0x20>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <SystemInit+0x20>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dec:	480d      	ldr	r0, [pc, #52]	; (8001e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dee:	490e      	ldr	r1, [pc, #56]	; (8001e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df4:	e002      	b.n	8001dfc <LoopCopyDataInit>

08001df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfa:	3304      	adds	r3, #4

08001dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e00:	d3f9      	bcc.n	8001df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e02:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e04:	4c0b      	ldr	r4, [pc, #44]	; (8001e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e08:	e001      	b.n	8001e0e <LoopFillZerobss>

08001e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e0c:	3204      	adds	r2, #4

08001e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e10:	d3fb      	bcc.n	8001e0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e12:	f7ff ffd7 	bl	8001dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e16:	f007 fb01 	bl	800941c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e1a:	f7ff fbbb 	bl	8001594 <main>
  bx  lr    
 8001e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001e2c:	0800cf9c 	.word	0x0800cf9c
  ldr r2, =_sbss
 8001e30:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001e34:	20005d7c 	.word	0x20005d7c

08001e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <HAL_Init+0x40>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <HAL_Init+0x40>)
 8001e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_Init+0x40>)
 8001e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_Init+0x40>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 f94f 	bl	8002108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f000 f808 	bl	8001e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e70:	f7ff fdee 	bl	8001a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023c00 	.word	0x40023c00

08001e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_InitTick+0x54>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_InitTick+0x58>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f967 	bl	8002172 <HAL_SYSTICK_Config>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00e      	b.n	8001ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b0f      	cmp	r3, #15
 8001eb2:	d80a      	bhi.n	8001eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	f000 f92f 	bl	800211e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec0:	4a06      	ldr	r2, [pc, #24]	; (8001edc <HAL_InitTick+0x5c>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e000      	b.n	8001ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	20000010 	.word	0x20000010
 8001edc:	2000000c 	.word	0x2000000c

08001ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x20>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x24>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_IncTick+0x24>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000010 	.word	0x20000010
 8001f04:	20003ccc 	.word	0x20003ccc

08001f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_GetTick+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20003ccc 	.word	0x20003ccc

08001f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f28:	f7ff ffee 	bl	8001f08 <HAL_GetTick>
 8001f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f38:	d005      	beq.n	8001f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_Delay+0x44>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f46:	bf00      	nop
 8001f48:	f7ff ffde 	bl	8001f08 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d8f7      	bhi.n	8001f48 <HAL_Delay+0x28>
  {
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000010 	.word	0x20000010

08001f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9a:	4a04      	ldr	r2, [pc, #16]	; (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	60d3      	str	r3, [r2, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 0307 	and.w	r3, r3, #7
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db0b      	blt.n	8001ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4907      	ldr	r1, [pc, #28]	; (8002004 <__NVIC_EnableIRQ+0x38>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	2001      	movs	r0, #1
 8001fee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e100 	.word	0xe000e100

08002008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	2b00      	cmp	r3, #0
 800201a:	db0a      	blt.n	8002032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	490c      	ldr	r1, [pc, #48]	; (8002054 <__NVIC_SetPriority+0x4c>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	0112      	lsls	r2, r2, #4
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	440b      	add	r3, r1
 800202c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002030:	e00a      	b.n	8002048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4908      	ldr	r1, [pc, #32]	; (8002058 <__NVIC_SetPriority+0x50>)
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	3b04      	subs	r3, #4
 8002040:	0112      	lsls	r2, r2, #4
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	440b      	add	r3, r1
 8002046:	761a      	strb	r2, [r3, #24]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000e100 	.word	0xe000e100
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f1c3 0307 	rsb	r3, r3, #7
 8002076:	2b04      	cmp	r3, #4
 8002078:	bf28      	it	cs
 800207a:	2304      	movcs	r3, #4
 800207c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3304      	adds	r3, #4
 8002082:	2b06      	cmp	r3, #6
 8002084:	d902      	bls.n	800208c <NVIC_EncodePriority+0x30>
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3b03      	subs	r3, #3
 800208a:	e000      	b.n	800208e <NVIC_EncodePriority+0x32>
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	f04f 32ff 	mov.w	r2, #4294967295
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	401a      	ands	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43d9      	mvns	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	4313      	orrs	r3, r2
         );
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3724      	adds	r7, #36	; 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d4:	d301      	bcc.n	80020da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00f      	b.n	80020fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <SysTick_Config+0x40>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e2:	210f      	movs	r1, #15
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f7ff ff8e 	bl	8002008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <SysTick_Config+0x40>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f2:	4b04      	ldr	r3, [pc, #16]	; (8002104 <SysTick_Config+0x40>)
 80020f4:	2207      	movs	r2, #7
 80020f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	e000e010 	.word	0xe000e010

08002108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff29 	bl	8001f68 <__NVIC_SetPriorityGrouping>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002130:	f7ff ff3e 	bl	8001fb0 <__NVIC_GetPriorityGrouping>
 8002134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	6978      	ldr	r0, [r7, #20]
 800213c:	f7ff ff8e 	bl	800205c <NVIC_EncodePriority>
 8002140:	4602      	mov	r2, r0
 8002142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff5d 	bl	8002008 <__NVIC_SetPriority>
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff31 	bl	8001fcc <__NVIC_EnableIRQ>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ffa2 	bl	80020c4 <SysTick_Config>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff feb6 	bl	8001f08 <HAL_GetTick>
 800219c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d008      	beq.n	80021bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e052      	b.n	8002262 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0216 	bic.w	r2, r2, #22
 80021ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d103      	bne.n	80021ec <HAL_DMA_Abort+0x62>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0208 	bic.w	r2, r2, #8
 80021fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0201 	bic.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800220c:	e013      	b.n	8002236 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800220e:	f7ff fe7b 	bl	8001f08 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b05      	cmp	r3, #5
 800221a:	d90c      	bls.n	8002236 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2203      	movs	r2, #3
 8002226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e015      	b.n	8002262 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1e4      	bne.n	800220e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002248:	223f      	movs	r2, #63	; 0x3f
 800224a:	409a      	lsls	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d004      	beq.n	8002288 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2280      	movs	r2, #128	; 0x80
 8002282:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e00c      	b.n	80022a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2205      	movs	r2, #5
 800228c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	; 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e165      	b.n	8002598 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022cc:	2201      	movs	r2, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	f040 8154 	bne.w	8002592 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d005      	beq.n	8002302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d130      	bne.n	8002364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	2203      	movs	r2, #3
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002338:	2201      	movs	r2, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 0201 	and.w	r2, r3, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b03      	cmp	r3, #3
 800236e:	d017      	beq.n	80023a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d123      	bne.n	80023f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	08da      	lsrs	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3208      	adds	r2, #8
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	220f      	movs	r2, #15
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	08da      	lsrs	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3208      	adds	r2, #8
 80023ee:	69b9      	ldr	r1, [r7, #24]
 80023f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2203      	movs	r2, #3
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0203 	and.w	r2, r3, #3
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80ae 	beq.w	8002592 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <HAL_GPIO_Init+0x300>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	4a5c      	ldr	r2, [pc, #368]	; (80025b0 <HAL_GPIO_Init+0x300>)
 8002440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002444:	6453      	str	r3, [r2, #68]	; 0x44
 8002446:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <HAL_GPIO_Init+0x300>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002452:	4a58      	ldr	r2, [pc, #352]	; (80025b4 <HAL_GPIO_Init+0x304>)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	3302      	adds	r3, #2
 800245a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	220f      	movs	r2, #15
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4f      	ldr	r2, [pc, #316]	; (80025b8 <HAL_GPIO_Init+0x308>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d025      	beq.n	80024ca <HAL_GPIO_Init+0x21a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4e      	ldr	r2, [pc, #312]	; (80025bc <HAL_GPIO_Init+0x30c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d01f      	beq.n	80024c6 <HAL_GPIO_Init+0x216>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4d      	ldr	r2, [pc, #308]	; (80025c0 <HAL_GPIO_Init+0x310>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d019      	beq.n	80024c2 <HAL_GPIO_Init+0x212>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4c      	ldr	r2, [pc, #304]	; (80025c4 <HAL_GPIO_Init+0x314>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_GPIO_Init+0x20e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4b      	ldr	r2, [pc, #300]	; (80025c8 <HAL_GPIO_Init+0x318>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00d      	beq.n	80024ba <HAL_GPIO_Init+0x20a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4a      	ldr	r2, [pc, #296]	; (80025cc <HAL_GPIO_Init+0x31c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <HAL_GPIO_Init+0x206>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a49      	ldr	r2, [pc, #292]	; (80025d0 <HAL_GPIO_Init+0x320>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_GPIO_Init+0x202>
 80024ae:	2306      	movs	r3, #6
 80024b0:	e00c      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024b2:	2307      	movs	r3, #7
 80024b4:	e00a      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024b6:	2305      	movs	r3, #5
 80024b8:	e008      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024ba:	2304      	movs	r3, #4
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024be:	2303      	movs	r3, #3
 80024c0:	e004      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e002      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024ca:	2300      	movs	r3, #0
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	f002 0203 	and.w	r2, r2, #3
 80024d2:	0092      	lsls	r2, r2, #2
 80024d4:	4093      	lsls	r3, r2
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024dc:	4935      	ldr	r1, [pc, #212]	; (80025b4 <HAL_GPIO_Init+0x304>)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	3302      	adds	r3, #2
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ea:	4b3a      	ldr	r3, [pc, #232]	; (80025d4 <HAL_GPIO_Init+0x324>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800250e:	4a31      	ldr	r2, [pc, #196]	; (80025d4 <HAL_GPIO_Init+0x324>)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002514:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <HAL_GPIO_Init+0x324>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002538:	4a26      	ldr	r2, [pc, #152]	; (80025d4 <HAL_GPIO_Init+0x324>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253e:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_GPIO_Init+0x324>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002562:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <HAL_GPIO_Init+0x324>)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002568:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <HAL_GPIO_Init+0x324>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800258c:	4a11      	ldr	r2, [pc, #68]	; (80025d4 <HAL_GPIO_Init+0x324>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3301      	adds	r3, #1
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b0f      	cmp	r3, #15
 800259c:	f67f ae96 	bls.w	80022cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3724      	adds	r7, #36	; 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40013800 	.word	0x40013800
 80025b8:	40020000 	.word	0x40020000
 80025bc:	40020400 	.word	0x40020400
 80025c0:	40020800 	.word	0x40020800
 80025c4:	40020c00 	.word	0x40020c00
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40021400 	.word	0x40021400
 80025d0:	40021800 	.word	0x40021800
 80025d4:	40013c00 	.word	0x40013c00

080025d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
 80025e4:	4613      	mov	r3, r2
 80025e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e8:	787b      	ldrb	r3, [r7, #1]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025f4:	e003      	b.n	80025fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025f6:	887b      	ldrh	r3, [r7, #2]
 80025f8:	041a      	lsls	r2, r3, #16
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	619a      	str	r2, [r3, #24]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <HAL_PWREx_EnableOverDrive+0x90>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a1f      	ldr	r2, [pc, #124]	; (800269c <HAL_PWREx_EnableOverDrive+0x90>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <HAL_PWREx_EnableOverDrive+0x90>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002638:	f7ff fc66 	bl	8001f08 <HAL_GetTick>
 800263c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800263e:	e009      	b.n	8002654 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002640:	f7ff fc62 	bl	8001f08 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800264e:	d901      	bls.n	8002654 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e01f      	b.n	8002694 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002660:	d1ee      	bne.n	8002640 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002662:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002668:	f7ff fc4e 	bl	8001f08 <HAL_GetTick>
 800266c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800266e:	e009      	b.n	8002684 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002670:	f7ff fc4a 	bl	8001f08 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800267e:	d901      	bls.n	8002684 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e007      	b.n	8002694 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002684:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002690:	d1ee      	bne.n	8002670 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	420e0040 	.word	0x420e0040
 80026a4:	40007000 	.word	0x40007000
 80026a8:	420e0044 	.word	0x420e0044

080026ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0cc      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c0:	4b68      	ldr	r3, [pc, #416]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d90c      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b65      	ldr	r3, [pc, #404]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b63      	ldr	r3, [pc, #396]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0b8      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002700:	4b59      	ldr	r3, [pc, #356]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a58      	ldr	r2, [pc, #352]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800270a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002718:	4b53      	ldr	r3, [pc, #332]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4a52      	ldr	r2, [pc, #328]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002724:	4b50      	ldr	r3, [pc, #320]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	494d      	ldr	r1, [pc, #308]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d044      	beq.n	80027cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	4b47      	ldr	r3, [pc, #284]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d119      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e07f      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d003      	beq.n	800276a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002766:	2b03      	cmp	r3, #3
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	4b3f      	ldr	r3, [pc, #252]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06f      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277a:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e067      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278a:	4b37      	ldr	r3, [pc, #220]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f023 0203 	bic.w	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4934      	ldr	r1, [pc, #208]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	4313      	orrs	r3, r2
 800279a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800279c:	f7ff fbb4 	bl	8001f08 <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a4:	f7ff fbb0 	bl	8001f08 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e04f      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 020c 	and.w	r2, r3, #12
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1eb      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d20c      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b22      	ldr	r3, [pc, #136]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e032      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4916      	ldr	r1, [pc, #88]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	490e      	ldr	r1, [pc, #56]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002832:	f000 f855 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 8002836:	4602      	mov	r2, r0
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	490a      	ldr	r1, [pc, #40]	; (800286c <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	5ccb      	ldrb	r3, [r1, r3]
 8002846:	fa22 f303 	lsr.w	r3, r2, r3
 800284a:	4a09      	ldr	r2, [pc, #36]	; (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fb14 	bl	8001e80 <HAL_InitTick>

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023c00 	.word	0x40023c00
 8002868:	40023800 	.word	0x40023800
 800286c:	0800c700 	.word	0x0800c700
 8002870:	20000008 	.word	0x20000008
 8002874:	2000000c 	.word	0x2000000c

08002878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_RCC_GetHCLKFreq+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000008 	.word	0x20000008

08002890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002894:	f7ff fff0 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	0a9b      	lsrs	r3, r3, #10
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	4903      	ldr	r1, [pc, #12]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a6:	5ccb      	ldrb	r3, [r1, r3]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40023800 	.word	0x40023800
 80028b4:	0800c710 	.word	0x0800c710

080028b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028bc:	f7ff ffdc 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	0b5b      	lsrs	r3, r3, #13
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	4903      	ldr	r1, [pc, #12]	; (80028dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ce:	5ccb      	ldrb	r3, [r1, r3]
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40023800 	.word	0x40023800
 80028dc:	0800c710 	.word	0x0800c710

080028e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e4:	b088      	sub	sp, #32
 80028e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028fc:	4bce      	ldr	r3, [pc, #824]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x358>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 030c 	and.w	r3, r3, #12
 8002904:	2b0c      	cmp	r3, #12
 8002906:	f200 818d 	bhi.w	8002c24 <HAL_RCC_GetSysClockFreq+0x344>
 800290a:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <HAL_RCC_GetSysClockFreq+0x30>)
 800290c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002910:	08002945 	.word	0x08002945
 8002914:	08002c25 	.word	0x08002c25
 8002918:	08002c25 	.word	0x08002c25
 800291c:	08002c25 	.word	0x08002c25
 8002920:	0800294b 	.word	0x0800294b
 8002924:	08002c25 	.word	0x08002c25
 8002928:	08002c25 	.word	0x08002c25
 800292c:	08002c25 	.word	0x08002c25
 8002930:	08002951 	.word	0x08002951
 8002934:	08002c25 	.word	0x08002c25
 8002938:	08002c25 	.word	0x08002c25
 800293c:	08002c25 	.word	0x08002c25
 8002940:	08002ac5 	.word	0x08002ac5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002944:	4bbd      	ldr	r3, [pc, #756]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002946:	61bb      	str	r3, [r7, #24]
       break;
 8002948:	e16f      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800294a:	4bbd      	ldr	r3, [pc, #756]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x360>)
 800294c:	61bb      	str	r3, [r7, #24]
      break;
 800294e:	e16c      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002950:	4bb9      	ldr	r3, [pc, #740]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x358>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002958:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800295a:	4bb7      	ldr	r3, [pc, #732]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x358>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d053      	beq.n	8002a0e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002966:	4bb4      	ldr	r3, [pc, #720]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x358>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	099b      	lsrs	r3, r3, #6
 800296c:	461a      	mov	r2, r3
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002976:	f04f 0100 	mov.w	r1, #0
 800297a:	ea02 0400 	and.w	r4, r2, r0
 800297e:	603c      	str	r4, [r7, #0]
 8002980:	400b      	ands	r3, r1
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002988:	4620      	mov	r0, r4
 800298a:	4629      	mov	r1, r5
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	014b      	lsls	r3, r1, #5
 8002996:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800299a:	0142      	lsls	r2, r0, #5
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	4623      	mov	r3, r4
 80029a2:	1ac0      	subs	r0, r0, r3
 80029a4:	462b      	mov	r3, r5
 80029a6:	eb61 0103 	sbc.w	r1, r1, r3
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	018b      	lsls	r3, r1, #6
 80029b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029b8:	0182      	lsls	r2, r0, #6
 80029ba:	1a12      	subs	r2, r2, r0
 80029bc:	eb63 0301 	sbc.w	r3, r3, r1
 80029c0:	f04f 0000 	mov.w	r0, #0
 80029c4:	f04f 0100 	mov.w	r1, #0
 80029c8:	00d9      	lsls	r1, r3, #3
 80029ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029ce:	00d0      	lsls	r0, r2, #3
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4621      	mov	r1, r4
 80029d6:	1852      	adds	r2, r2, r1
 80029d8:	4629      	mov	r1, r5
 80029da:	eb43 0101 	adc.w	r1, r3, r1
 80029de:	460b      	mov	r3, r1
 80029e0:	f04f 0000 	mov.w	r0, #0
 80029e4:	f04f 0100 	mov.w	r1, #0
 80029e8:	0259      	lsls	r1, r3, #9
 80029ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029ee:	0250      	lsls	r0, r2, #9
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	f7fe f924 	bl	8000c4c <__aeabi_uldivmod>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4613      	mov	r3, r2
 8002a0a:	61fb      	str	r3, [r7, #28]
 8002a0c:	e04c      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0e:	4b8a      	ldr	r3, [pc, #552]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	461a      	mov	r2, r3
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a1e:	f04f 0100 	mov.w	r1, #0
 8002a22:	ea02 0a00 	and.w	sl, r2, r0
 8002a26:	ea03 0b01 	and.w	fp, r3, r1
 8002a2a:	4650      	mov	r0, sl
 8002a2c:	4659      	mov	r1, fp
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	014b      	lsls	r3, r1, #5
 8002a38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a3c:	0142      	lsls	r2, r0, #5
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	ebb0 000a 	subs.w	r0, r0, sl
 8002a46:	eb61 010b 	sbc.w	r1, r1, fp
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	018b      	lsls	r3, r1, #6
 8002a54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a58:	0182      	lsls	r2, r0, #6
 8002a5a:	1a12      	subs	r2, r2, r0
 8002a5c:	eb63 0301 	sbc.w	r3, r3, r1
 8002a60:	f04f 0000 	mov.w	r0, #0
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	00d9      	lsls	r1, r3, #3
 8002a6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a6e:	00d0      	lsls	r0, r2, #3
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	eb12 020a 	adds.w	r2, r2, sl
 8002a78:	eb43 030b 	adc.w	r3, r3, fp
 8002a7c:	f04f 0000 	mov.w	r0, #0
 8002a80:	f04f 0100 	mov.w	r1, #0
 8002a84:	0299      	lsls	r1, r3, #10
 8002a86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a8a:	0290      	lsls	r0, r2, #10
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	f7fe f8d6 	bl	8000c4c <__aeabi_uldivmod>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002aa8:	4b63      	ldr	r3, [pc, #396]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x358>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	0c1b      	lsrs	r3, r3, #16
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	61bb      	str	r3, [r7, #24]
      break;
 8002ac2:	e0b2      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ac4:	4b5c      	ldr	r3, [pc, #368]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002acc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ace:	4b5a      	ldr	r3, [pc, #360]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d04d      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ada:	4b57      	ldr	r3, [pc, #348]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x358>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	099b      	lsrs	r3, r3, #6
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002aea:	f04f 0100 	mov.w	r1, #0
 8002aee:	ea02 0800 	and.w	r8, r2, r0
 8002af2:	ea03 0901 	and.w	r9, r3, r1
 8002af6:	4640      	mov	r0, r8
 8002af8:	4649      	mov	r1, r9
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	014b      	lsls	r3, r1, #5
 8002b04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b08:	0142      	lsls	r2, r0, #5
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	ebb0 0008 	subs.w	r0, r0, r8
 8002b12:	eb61 0109 	sbc.w	r1, r1, r9
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	018b      	lsls	r3, r1, #6
 8002b20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b24:	0182      	lsls	r2, r0, #6
 8002b26:	1a12      	subs	r2, r2, r0
 8002b28:	eb63 0301 	sbc.w	r3, r3, r1
 8002b2c:	f04f 0000 	mov.w	r0, #0
 8002b30:	f04f 0100 	mov.w	r1, #0
 8002b34:	00d9      	lsls	r1, r3, #3
 8002b36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b3a:	00d0      	lsls	r0, r2, #3
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	eb12 0208 	adds.w	r2, r2, r8
 8002b44:	eb43 0309 	adc.w	r3, r3, r9
 8002b48:	f04f 0000 	mov.w	r0, #0
 8002b4c:	f04f 0100 	mov.w	r1, #0
 8002b50:	0259      	lsls	r1, r3, #9
 8002b52:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b56:	0250      	lsls	r0, r2, #9
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	461a      	mov	r2, r3
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	f7fe f870 	bl	8000c4c <__aeabi_uldivmod>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4613      	mov	r3, r2
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	e04a      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b76:	4b30      	ldr	r3, [pc, #192]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b86:	f04f 0100 	mov.w	r1, #0
 8002b8a:	ea02 0400 	and.w	r4, r2, r0
 8002b8e:	ea03 0501 	and.w	r5, r3, r1
 8002b92:	4620      	mov	r0, r4
 8002b94:	4629      	mov	r1, r5
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	014b      	lsls	r3, r1, #5
 8002ba0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ba4:	0142      	lsls	r2, r0, #5
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	1b00      	subs	r0, r0, r4
 8002bac:	eb61 0105 	sbc.w	r1, r1, r5
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	018b      	lsls	r3, r1, #6
 8002bba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bbe:	0182      	lsls	r2, r0, #6
 8002bc0:	1a12      	subs	r2, r2, r0
 8002bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc6:	f04f 0000 	mov.w	r0, #0
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	00d9      	lsls	r1, r3, #3
 8002bd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bd4:	00d0      	lsls	r0, r2, #3
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	1912      	adds	r2, r2, r4
 8002bdc:	eb45 0303 	adc.w	r3, r5, r3
 8002be0:	f04f 0000 	mov.w	r0, #0
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	0299      	lsls	r1, r3, #10
 8002bea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002bee:	0290      	lsls	r0, r2, #10
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	f7fe f824 	bl	8000c4c <__aeabi_uldivmod>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4613      	mov	r3, r2
 8002c0a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	0f1b      	lsrs	r3, r3, #28
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002c18:	69fa      	ldr	r2, [r7, #28]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	61bb      	str	r3, [r7, #24]
      break;
 8002c22:	e002      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c26:	61bb      	str	r3, [r7, #24]
      break;
 8002c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2a:	69bb      	ldr	r3, [r7, #24]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	00f42400 	.word	0x00f42400
 8002c40:	007a1200 	.word	0x007a1200

08002c44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e28d      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 8083 	beq.w	8002d6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c64:	4b94      	ldr	r3, [pc, #592]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 030c 	and.w	r3, r3, #12
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d019      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c70:	4b91      	ldr	r3, [pc, #580]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d106      	bne.n	8002c8a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c7c:	4b8e      	ldr	r3, [pc, #568]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c88:	d00c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8a:	4b8b      	ldr	r3, [pc, #556]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d112      	bne.n	8002cbc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c96:	4b88      	ldr	r3, [pc, #544]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca2:	d10b      	bne.n	8002cbc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	4b84      	ldr	r3, [pc, #528]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d05b      	beq.n	8002d68 <HAL_RCC_OscConfig+0x124>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d157      	bne.n	8002d68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e25a      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc4:	d106      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x90>
 8002cc6:	4b7c      	ldr	r3, [pc, #496]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a7b      	ldr	r2, [pc, #492]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e01d      	b.n	8002d10 <HAL_RCC_OscConfig+0xcc>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0xb4>
 8002cde:	4b76      	ldr	r3, [pc, #472]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a75      	ldr	r2, [pc, #468]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b73      	ldr	r3, [pc, #460]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a72      	ldr	r2, [pc, #456]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e00b      	b.n	8002d10 <HAL_RCC_OscConfig+0xcc>
 8002cf8:	4b6f      	ldr	r3, [pc, #444]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a6e      	ldr	r2, [pc, #440]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	4b6c      	ldr	r3, [pc, #432]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a6b      	ldr	r2, [pc, #428]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d013      	beq.n	8002d40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7ff f8f6 	bl	8001f08 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d20:	f7ff f8f2 	bl	8001f08 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e21f      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	4b61      	ldr	r3, [pc, #388]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0xdc>
 8002d3e:	e014      	b.n	8002d6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7ff f8e2 	bl	8001f08 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d48:	f7ff f8de 	bl	8001f08 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e20b      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5a:	4b57      	ldr	r3, [pc, #348]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x104>
 8002d66:	e000      	b.n	8002d6a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d06f      	beq.n	8002e56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d76:	4b50      	ldr	r3, [pc, #320]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d017      	beq.n	8002db2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d82:	4b4d      	ldr	r3, [pc, #308]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d105      	bne.n	8002d9a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d8e:	4b4a      	ldr	r3, [pc, #296]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d9a:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	d11c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da6:	4b44      	ldr	r3, [pc, #272]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d116      	bne.n	8002de0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db2:	4b41      	ldr	r3, [pc, #260]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_RCC_OscConfig+0x186>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d001      	beq.n	8002dca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e1d3      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dca:	4b3b      	ldr	r3, [pc, #236]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4937      	ldr	r1, [pc, #220]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	e03a      	b.n	8002e56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de8:	4b34      	ldr	r3, [pc, #208]	; (8002ebc <HAL_RCC_OscConfig+0x278>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dee:	f7ff f88b 	bl	8001f08 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df6:	f7ff f887 	bl	8001f08 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e1b4      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	4b2b      	ldr	r3, [pc, #172]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e14:	4b28      	ldr	r3, [pc, #160]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4925      	ldr	r1, [pc, #148]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
 8002e28:	e015      	b.n	8002e56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e2a:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_RCC_OscConfig+0x278>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7ff f86a 	bl	8001f08 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e38:	f7ff f866 	bl	8001f08 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e193      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d036      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d016      	beq.n	8002e98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6a:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <HAL_RCC_OscConfig+0x27c>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7ff f84a 	bl	8001f08 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e78:	f7ff f846 	bl	8001f08 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e173      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x234>
 8002e96:	e01b      	b.n	8002ed0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCC_OscConfig+0x27c>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9e:	f7ff f833 	bl	8001f08 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea4:	e00e      	b.n	8002ec4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea6:	f7ff f82f 	bl	8001f08 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d907      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e15c      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	42470000 	.word	0x42470000
 8002ec0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec4:	4b8a      	ldr	r3, [pc, #552]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1ea      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8097 	beq.w	800300c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee2:	4b83      	ldr	r3, [pc, #524]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10f      	bne.n	8002f0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	4b7f      	ldr	r3, [pc, #508]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	4a7e      	ldr	r2, [pc, #504]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efc:	6413      	str	r3, [r2, #64]	; 0x40
 8002efe:	4b7c      	ldr	r3, [pc, #496]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0e:	4b79      	ldr	r3, [pc, #484]	; (80030f4 <HAL_RCC_OscConfig+0x4b0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d118      	bne.n	8002f4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f1a:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <HAL_RCC_OscConfig+0x4b0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a75      	ldr	r2, [pc, #468]	; (80030f4 <HAL_RCC_OscConfig+0x4b0>)
 8002f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f26:	f7fe ffef 	bl	8001f08 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2e:	f7fe ffeb 	bl	8001f08 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e118      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	4b6c      	ldr	r3, [pc, #432]	; (80030f4 <HAL_RCC_OscConfig+0x4b0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d106      	bne.n	8002f62 <HAL_RCC_OscConfig+0x31e>
 8002f54:	4b66      	ldr	r3, [pc, #408]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	4a65      	ldr	r2, [pc, #404]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f60:	e01c      	b.n	8002f9c <HAL_RCC_OscConfig+0x358>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b05      	cmp	r3, #5
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x340>
 8002f6a:	4b61      	ldr	r3, [pc, #388]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	4a60      	ldr	r2, [pc, #384]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002f70:	f043 0304 	orr.w	r3, r3, #4
 8002f74:	6713      	str	r3, [r2, #112]	; 0x70
 8002f76:	4b5e      	ldr	r3, [pc, #376]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	4a5d      	ldr	r2, [pc, #372]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6713      	str	r3, [r2, #112]	; 0x70
 8002f82:	e00b      	b.n	8002f9c <HAL_RCC_OscConfig+0x358>
 8002f84:	4b5a      	ldr	r3, [pc, #360]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a59      	ldr	r2, [pc, #356]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002f8a:	f023 0301 	bic.w	r3, r3, #1
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	4b57      	ldr	r3, [pc, #348]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	4a56      	ldr	r2, [pc, #344]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002f96:	f023 0304 	bic.w	r3, r3, #4
 8002f9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d015      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7fe ffb0 	bl	8001f08 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fac:	f7fe ffac 	bl	8001f08 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e0d7      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc2:	4b4b      	ldr	r3, [pc, #300]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0ee      	beq.n	8002fac <HAL_RCC_OscConfig+0x368>
 8002fce:	e014      	b.n	8002ffa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe ff9a 	bl	8001f08 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7fe ff96 	bl	8001f08 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e0c1      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fee:	4b40      	ldr	r3, [pc, #256]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1ee      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d105      	bne.n	800300c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003000:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	4a3a      	ldr	r2, [pc, #232]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8003006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800300a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 80ad 	beq.w	8003170 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003016:	4b36      	ldr	r3, [pc, #216]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
 800301e:	2b08      	cmp	r3, #8
 8003020:	d060      	beq.n	80030e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d145      	bne.n	80030b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302a:	4b33      	ldr	r3, [pc, #204]	; (80030f8 <HAL_RCC_OscConfig+0x4b4>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe ff6a 	bl	8001f08 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003038:	f7fe ff66 	bl	8001f08 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e093      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304a:	4b29      	ldr	r3, [pc, #164]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69da      	ldr	r2, [r3, #28]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	019b      	lsls	r3, r3, #6
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	085b      	lsrs	r3, r3, #1
 800306e:	3b01      	subs	r3, #1
 8003070:	041b      	lsls	r3, r3, #16
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	061b      	lsls	r3, r3, #24
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	071b      	lsls	r3, r3, #28
 8003082:	491b      	ldr	r1, [pc, #108]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003088:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <HAL_RCC_OscConfig+0x4b4>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308e:	f7fe ff3b 	bl	8001f08 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003096:	f7fe ff37 	bl	8001f08 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e064      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x452>
 80030b4:	e05c      	b.n	8003170 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <HAL_RCC_OscConfig+0x4b4>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030bc:	f7fe ff24 	bl	8001f08 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fe ff20 	bl	8001f08 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e04d      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_RCC_OscConfig+0x4ac>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x480>
 80030e2:	e045      	b.n	8003170 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d107      	bne.n	80030fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e040      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40007000 	.word	0x40007000
 80030f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030fc:	4b1f      	ldr	r3, [pc, #124]	; (800317c <HAL_RCC_OscConfig+0x538>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d030      	beq.n	800316c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d129      	bne.n	800316c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d122      	bne.n	800316c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003134:	4293      	cmp	r3, r2
 8003136:	d119      	bne.n	800316c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	3b01      	subs	r3, #1
 8003146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d10f      	bne.n	800316c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d107      	bne.n	800316c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800

08003180 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e07b      	b.n	800328a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	2b00      	cmp	r3, #0
 8003198:	d108      	bne.n	80031ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031a2:	d009      	beq.n	80031b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	61da      	str	r2, [r3, #28]
 80031aa:	e005      	b.n	80031b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fe fc64 	bl	8001aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323c:	ea42 0103 	orr.w	r1, r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	f003 0104 	and.w	r1, r3, #4
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f003 0210 	and.w	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	69da      	ldr	r2, [r3, #28]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003278:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b088      	sub	sp, #32
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	4613      	mov	r3, r2
 80032a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_SPI_Transmit+0x22>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e126      	b.n	8003502 <HAL_SPI_Transmit+0x270>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032bc:	f7fe fe24 	bl	8001f08 <HAL_GetTick>
 80032c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d002      	beq.n	80032d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
 80032d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032d6:	e10b      	b.n	80034f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <HAL_SPI_Transmit+0x52>
 80032de:	88fb      	ldrh	r3, [r7, #6]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d102      	bne.n	80032ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032e8:	e102      	b.n	80034f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2203      	movs	r2, #3
 80032ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	88fa      	ldrh	r2, [r7, #6]
 8003302:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	88fa      	ldrh	r2, [r7, #6]
 8003308:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003330:	d10f      	bne.n	8003352 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003340:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003350:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	d007      	beq.n	8003370 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800336e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003378:	d14b      	bne.n	8003412 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_SPI_Transmit+0xf6>
 8003382:	8afb      	ldrh	r3, [r7, #22]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d13e      	bne.n	8003406 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	881a      	ldrh	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	1c9a      	adds	r2, r3, #2
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033ac:	e02b      	b.n	8003406 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d112      	bne.n	80033e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	881a      	ldrh	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	1c9a      	adds	r2, r3, #2
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	86da      	strh	r2, [r3, #54]	; 0x36
 80033e0:	e011      	b.n	8003406 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033e2:	f7fe fd91 	bl	8001f08 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d803      	bhi.n	80033fa <HAL_SPI_Transmit+0x168>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d102      	bne.n	8003400 <HAL_SPI_Transmit+0x16e>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003404:	e074      	b.n	80034f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1ce      	bne.n	80033ae <HAL_SPI_Transmit+0x11c>
 8003410:	e04c      	b.n	80034ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_SPI_Transmit+0x18e>
 800341a:	8afb      	ldrh	r3, [r7, #22]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d140      	bne.n	80034a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	330c      	adds	r3, #12
 800342a:	7812      	ldrb	r2, [r2, #0]
 800342c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003446:	e02c      	b.n	80034a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b02      	cmp	r3, #2
 8003454:	d113      	bne.n	800347e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	7812      	ldrb	r2, [r2, #0]
 8003462:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	86da      	strh	r2, [r3, #54]	; 0x36
 800347c:	e011      	b.n	80034a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800347e:	f7fe fd43 	bl	8001f08 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d803      	bhi.n	8003496 <HAL_SPI_Transmit+0x204>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d102      	bne.n	800349c <HAL_SPI_Transmit+0x20a>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034a0:	e026      	b.n	80034f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1cd      	bne.n	8003448 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	6839      	ldr	r1, [r7, #0]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fa55 	bl	8003960 <SPI_EndRxTxTransaction>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	77fb      	strb	r3, [r7, #31]
 80034ec:	e000      	b.n	80034f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80034ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003500:	7ffb      	ldrb	r3, [r7, #31]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3720      	adds	r7, #32
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b08c      	sub	sp, #48	; 0x30
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003518:	2301      	movs	r3, #1
 800351a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_SPI_TransmitReceive+0x26>
 800352c:	2302      	movs	r3, #2
 800352e:	e18a      	b.n	8003846 <HAL_SPI_TransmitReceive+0x33c>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003538:	f7fe fce6 	bl	8001f08 <HAL_GetTick>
 800353c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003552:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003556:	2b01      	cmp	r3, #1
 8003558:	d00f      	beq.n	800357a <HAL_SPI_TransmitReceive+0x70>
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003560:	d107      	bne.n	8003572 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d103      	bne.n	8003572 <HAL_SPI_TransmitReceive+0x68>
 800356a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800356e:	2b04      	cmp	r3, #4
 8003570:	d003      	beq.n	800357a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003572:	2302      	movs	r3, #2
 8003574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003578:	e15b      	b.n	8003832 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_SPI_TransmitReceive+0x82>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_SPI_TransmitReceive+0x82>
 8003586:	887b      	ldrh	r3, [r7, #2]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d103      	bne.n	8003594 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003592:	e14e      	b.n	8003832 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b04      	cmp	r3, #4
 800359e:	d003      	beq.n	80035a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2205      	movs	r2, #5
 80035a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	887a      	ldrh	r2, [r7, #2]
 80035b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	887a      	ldrh	r2, [r7, #2]
 80035be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	887a      	ldrh	r2, [r7, #2]
 80035ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b40      	cmp	r3, #64	; 0x40
 80035ea:	d007      	beq.n	80035fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003604:	d178      	bne.n	80036f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <HAL_SPI_TransmitReceive+0x10a>
 800360e:	8b7b      	ldrh	r3, [r7, #26]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d166      	bne.n	80036e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	881a      	ldrh	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	1c9a      	adds	r2, r3, #2
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003638:	e053      	b.n	80036e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b02      	cmp	r3, #2
 8003646:	d11b      	bne.n	8003680 <HAL_SPI_TransmitReceive+0x176>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d016      	beq.n	8003680 <HAL_SPI_TransmitReceive+0x176>
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	2b01      	cmp	r3, #1
 8003656:	d113      	bne.n	8003680 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	881a      	ldrh	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	1c9a      	adds	r2, r3, #2
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d119      	bne.n	80036c2 <HAL_SPI_TransmitReceive+0x1b8>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d014      	beq.n	80036c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	b292      	uxth	r2, r2
 80036a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	1c9a      	adds	r2, r3, #2
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036be:	2301      	movs	r3, #1
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036c2:	f7fe fc21 	bl	8001f08 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d807      	bhi.n	80036e2 <HAL_SPI_TransmitReceive+0x1d8>
 80036d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d003      	beq.n	80036e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80036e0:	e0a7      	b.n	8003832 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1a6      	bne.n	800363a <HAL_SPI_TransmitReceive+0x130>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1a1      	bne.n	800363a <HAL_SPI_TransmitReceive+0x130>
 80036f6:	e07c      	b.n	80037f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_SPI_TransmitReceive+0x1fc>
 8003700:	8b7b      	ldrh	r3, [r7, #26]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d16b      	bne.n	80037de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	330c      	adds	r3, #12
 8003710:	7812      	ldrb	r2, [r2, #0]
 8003712:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800372c:	e057      	b.n	80037de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b02      	cmp	r3, #2
 800373a:	d11c      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x26c>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d017      	beq.n	8003776 <HAL_SPI_TransmitReceive+0x26c>
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	2b01      	cmp	r3, #1
 800374a:	d114      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	7812      	ldrb	r2, [r2, #0]
 8003758:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d119      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x2ae>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d014      	beq.n	80037b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037b4:	2301      	movs	r3, #1
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037b8:	f7fe fba6 	bl	8001f08 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d803      	bhi.n	80037d0 <HAL_SPI_TransmitReceive+0x2c6>
 80037c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ce:	d102      	bne.n	80037d6 <HAL_SPI_TransmitReceive+0x2cc>
 80037d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d103      	bne.n	80037de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80037dc:	e029      	b.n	8003832 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1a2      	bne.n	800372e <HAL_SPI_TransmitReceive+0x224>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d19d      	bne.n	800372e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f8b2 	bl	8003960 <SPI_EndRxTxTransaction>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d006      	beq.n	8003810 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800380e:	e010      	b.n	8003832 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	e000      	b.n	8003832 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003830:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003846:	4618      	mov	r0, r3
 8003848:	3730      	adds	r7, #48	; 0x30
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	4613      	mov	r3, r2
 800385e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003860:	f7fe fb52 	bl	8001f08 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	4413      	add	r3, r2
 800386e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003870:	f7fe fb4a 	bl	8001f08 <HAL_GetTick>
 8003874:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003876:	4b39      	ldr	r3, [pc, #228]	; (800395c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	015b      	lsls	r3, r3, #5
 800387c:	0d1b      	lsrs	r3, r3, #20
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	fb02 f303 	mul.w	r3, r2, r3
 8003884:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003886:	e054      	b.n	8003932 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388e:	d050      	beq.n	8003932 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003890:	f7fe fb3a 	bl	8001f08 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	429a      	cmp	r2, r3
 800389e:	d902      	bls.n	80038a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d13d      	bne.n	8003922 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038be:	d111      	bne.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c8:	d004      	beq.n	80038d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d2:	d107      	bne.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ec:	d10f      	bne.n	800390e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800390c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e017      	b.n	8003952 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	3b01      	subs	r3, #1
 8003930:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4013      	ands	r3, r2
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	429a      	cmp	r2, r3
 8003940:	bf0c      	ite	eq
 8003942:	2301      	moveq	r3, #1
 8003944:	2300      	movne	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	429a      	cmp	r2, r3
 800394e:	d19b      	bne.n	8003888 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000008 	.word	0x20000008

08003960 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <SPI_EndRxTxTransaction+0x7c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1b      	ldr	r2, [pc, #108]	; (80039e0 <SPI_EndRxTxTransaction+0x80>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	0d5b      	lsrs	r3, r3, #21
 8003978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800397c:	fb02 f303 	mul.w	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800398a:	d112      	bne.n	80039b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2200      	movs	r2, #0
 8003994:	2180      	movs	r1, #128	; 0x80
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f7ff ff5a 	bl	8003850 <SPI_WaitFlagStateUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d016      	beq.n	80039d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e00f      	b.n	80039d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c8:	2b80      	cmp	r3, #128	; 0x80
 80039ca:	d0f2      	beq.n	80039b2 <SPI_EndRxTxTransaction+0x52>
 80039cc:	e000      	b.n	80039d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80039ce:	bf00      	nop
  }

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000008 	.word	0x20000008
 80039e0:	165e9f81 	.word	0x165e9f81

080039e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e03f      	b.n	8003a76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fe f890 	bl	8001b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2224      	movs	r2, #36	; 0x24
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fd7b 	bl	8004524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b08a      	sub	sp, #40	; 0x28
 8003a82:	af02      	add	r7, sp, #8
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	603b      	str	r3, [r7, #0]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	d17c      	bne.n	8003b98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_UART_Transmit+0x2c>
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e075      	b.n	8003b9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_UART_Transmit+0x3e>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e06e      	b.n	8003b9a <HAL_UART_Transmit+0x11c>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2221      	movs	r2, #33	; 0x21
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ad2:	f7fe fa19 	bl	8001f08 <HAL_GetTick>
 8003ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	88fa      	ldrh	r2, [r7, #6]
 8003adc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	88fa      	ldrh	r2, [r7, #6]
 8003ae2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aec:	d108      	bne.n	8003b00 <HAL_UART_Transmit+0x82>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d104      	bne.n	8003b00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	e003      	b.n	8003b08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b10:	e02a      	b.n	8003b68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2180      	movs	r1, #128	; 0x80
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 faf9 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e036      	b.n	8003b9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10b      	bne.n	8003b4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	3302      	adds	r3, #2
 8003b46:	61bb      	str	r3, [r7, #24]
 8003b48:	e007      	b.n	8003b5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	781a      	ldrb	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	3301      	adds	r3, #1
 8003b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1cf      	bne.n	8003b12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2140      	movs	r1, #64	; 0x40
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fac9 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e006      	b.n	8003b9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e000      	b.n	8003b9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b0ba      	sub	sp, #232	; 0xe8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <HAL_UART_IRQHandler+0x66>
 8003bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fbd3 	bl	80043ae <UART_Receive_IT>
      return;
 8003c08:	e256      	b.n	80040b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80de 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x22c>
 8003c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d106      	bne.n	8003c2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80d1 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_UART_IRQHandler+0xae>
 8003c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f043 0201 	orr.w	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_UART_IRQHandler+0xd2>
 8003c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f043 0202 	orr.w	r2, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00b      	beq.n	8003c9a <HAL_UART_IRQHandler+0xf6>
 8003c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f043 0204 	orr.w	r2, r3, #4
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d011      	beq.n	8003cca <HAL_UART_IRQHandler+0x126>
 8003ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d105      	bne.n	8003cbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f043 0208 	orr.w	r2, r3, #8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 81ed 	beq.w	80040ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x14e>
 8003ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fb5e 	bl	80043ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	2b40      	cmp	r3, #64	; 0x40
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <HAL_UART_IRQHandler+0x17a>
 8003d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d04f      	beq.n	8003dbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa66 	bl	80041f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d141      	bne.n	8003db6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3314      	adds	r3, #20
 8003d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3314      	adds	r3, #20
 8003d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1d9      	bne.n	8003d32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d013      	beq.n	8003dae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	4a7d      	ldr	r2, [pc, #500]	; (8003f80 <HAL_UART_IRQHandler+0x3dc>)
 8003d8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe fa69 	bl	800226a <HAL_DMA_Abort_IT>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d016      	beq.n	8003dcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003da8:	4610      	mov	r0, r2
 8003daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	e00e      	b.n	8003dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f99a 	bl	80040e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	e00a      	b.n	8003dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f996 	bl	80040e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	e006      	b.n	8003dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f992 	bl	80040e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003dca:	e170      	b.n	80040ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	bf00      	nop
    return;
 8003dce:	e16e      	b.n	80040ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	f040 814a 	bne.w	800406e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 8143 	beq.w	800406e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 813c 	beq.w	800406e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	f040 80b4 	bne.w	8003f84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8140 	beq.w	80040b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	f080 8139 	bcs.w	80040b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e52:	f000 8088 	beq.w	8003f66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	330c      	adds	r3, #12
 8003e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1d9      	bne.n	8003e56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3314      	adds	r3, #20
 8003ea8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3314      	adds	r3, #20
 8003ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ec6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003eca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ece:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e1      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3314      	adds	r3, #20
 8003ee4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3314      	adds	r3, #20
 8003efe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e3      	bne.n	8003ede <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f36:	f023 0310 	bic.w	r3, r3, #16
 8003f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	330c      	adds	r3, #12
 8003f44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f48:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f50:	e841 2300 	strex	r3, r2, [r1]
 8003f54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e3      	bne.n	8003f24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe f912 	bl	800218a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	4619      	mov	r1, r3
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f8c0 	bl	80040fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f7c:	e099      	b.n	80040b2 <HAL_UART_IRQHandler+0x50e>
 8003f7e:	bf00      	nop
 8003f80:	080042b7 	.word	0x080042b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 808b 	beq.w	80040b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8086 	beq.w	80040b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fce:	647a      	str	r2, [r7, #68]	; 0x44
 8003fd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e3      	bne.n	8003faa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3314      	adds	r3, #20
 8004002:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004006:	633a      	str	r2, [r7, #48]	; 0x30
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800400c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e3      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	60fb      	str	r3, [r7, #12]
   return(result);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0310 	bic.w	r3, r3, #16
 800403e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	330c      	adds	r3, #12
 8004048:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800404c:	61fa      	str	r2, [r7, #28]
 800404e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	69b9      	ldr	r1, [r7, #24]
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	617b      	str	r3, [r7, #20]
   return(result);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e3      	bne.n	8004028 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004064:	4619      	mov	r1, r3
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f848 	bl	80040fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800406c:	e023      	b.n	80040b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800406e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004076:	2b00      	cmp	r3, #0
 8004078:	d009      	beq.n	800408e <HAL_UART_IRQHandler+0x4ea>
 800407a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f929 	bl	80042de <UART_Transmit_IT>
    return;
 800408c:	e014      	b.n	80040b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00e      	beq.n	80040b8 <HAL_UART_IRQHandler+0x514>
 800409a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800409e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f969 	bl	800437e <UART_EndTransmit_IT>
    return;
 80040ac:	e004      	b.n	80040b8 <HAL_UART_IRQHandler+0x514>
    return;
 80040ae:	bf00      	nop
 80040b0:	e002      	b.n	80040b8 <HAL_UART_IRQHandler+0x514>
      return;
 80040b2:	bf00      	nop
 80040b4:	e000      	b.n	80040b8 <HAL_UART_IRQHandler+0x514>
      return;
 80040b6:	bf00      	nop
  }
}
 80040b8:	37e8      	adds	r7, #232	; 0xe8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop

080040c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b090      	sub	sp, #64	; 0x40
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004124:	e050      	b.n	80041c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d04c      	beq.n	80041c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800412e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <UART_WaitOnFlagUntilTimeout+0x30>
 8004134:	f7fd fee8 	bl	8001f08 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004140:	429a      	cmp	r2, r3
 8004142:	d241      	bcs.n	80041c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	330c      	adds	r3, #12
 800414a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	e853 3f00 	ldrex	r3, [r3]
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800415a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004164:	637a      	str	r2, [r7, #52]	; 0x34
 8004166:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800416a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800416c:	e841 2300 	strex	r3, r2, [r1]
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e5      	bne.n	8004144 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3314      	adds	r3, #20
 800417e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	e853 3f00 	ldrex	r3, [r3]
 8004186:	613b      	str	r3, [r7, #16]
   return(result);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f023 0301 	bic.w	r3, r3, #1
 800418e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3314      	adds	r3, #20
 8004196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004198:	623a      	str	r2, [r7, #32]
 800419a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419c:	69f9      	ldr	r1, [r7, #28]
 800419e:	6a3a      	ldr	r2, [r7, #32]
 80041a0:	e841 2300 	strex	r3, r2, [r1]
 80041a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e5      	bne.n	8004178 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e00f      	b.n	80041e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4013      	ands	r3, r2
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d09f      	beq.n	8004126 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3740      	adds	r7, #64	; 0x40
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b095      	sub	sp, #84	; 0x54
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004202:	e853 3f00 	ldrex	r3, [r3]
 8004206:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800420e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004218:	643a      	str	r2, [r7, #64]	; 0x40
 800421a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800421e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e5      	bne.n	80041f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3314      	adds	r3, #20
 8004232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	61fb      	str	r3, [r7, #28]
   return(result);
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	64bb      	str	r3, [r7, #72]	; 0x48
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3314      	adds	r3, #20
 800424a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800424c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e5      	bne.n	800422c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	2b01      	cmp	r3, #1
 8004266:	d119      	bne.n	800429c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	60bb      	str	r3, [r7, #8]
   return(result);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f023 0310 	bic.w	r3, r3, #16
 800427e:	647b      	str	r3, [r7, #68]	; 0x44
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	330c      	adds	r3, #12
 8004286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004288:	61ba      	str	r2, [r7, #24]
 800428a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6979      	ldr	r1, [r7, #20]
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	613b      	str	r3, [r7, #16]
   return(result);
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e5      	bne.n	8004268 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042aa:	bf00      	nop
 80042ac:	3754      	adds	r7, #84	; 0x54
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f7ff ff09 	bl	80040e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b21      	cmp	r3, #33	; 0x21
 80042f0:	d13e      	bne.n	8004370 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fa:	d114      	bne.n	8004326 <UART_Transmit_IT+0x48>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d110      	bne.n	8004326 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004318:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	1c9a      	adds	r2, r3, #2
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	621a      	str	r2, [r3, #32]
 8004324:	e008      	b.n	8004338 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	1c59      	adds	r1, r3, #1
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6211      	str	r1, [r2, #32]
 8004330:	781a      	ldrb	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29b      	uxth	r3, r3
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4619      	mov	r1, r3
 8004346:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10f      	bne.n	800436c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800435a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800436a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004370:	2302      	movs	r3, #2
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004394:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff fe8e 	bl	80040c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b08c      	sub	sp, #48	; 0x30
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b22      	cmp	r3, #34	; 0x22
 80043c0:	f040 80ab 	bne.w	800451a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043cc:	d117      	bne.n	80043fe <UART_Receive_IT+0x50>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d113      	bne.n	80043fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	1c9a      	adds	r2, r3, #2
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	629a      	str	r2, [r3, #40]	; 0x28
 80043fc:	e026      	b.n	800444c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004410:	d007      	beq.n	8004422 <UART_Receive_IT+0x74>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <UART_Receive_IT+0x82>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	e008      	b.n	8004442 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800443c:	b2da      	uxtb	r2, r3
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29b      	uxth	r3, r3
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4619      	mov	r1, r3
 800445a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800445c:	2b00      	cmp	r3, #0
 800445e:	d15a      	bne.n	8004516 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0220 	bic.w	r2, r2, #32
 800446e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800447e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	2b01      	cmp	r3, #1
 800449e:	d135      	bne.n	800450c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	613b      	str	r3, [r7, #16]
   return(result);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f023 0310 	bic.w	r3, r3, #16
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	623a      	str	r2, [r7, #32]
 80044c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	69f9      	ldr	r1, [r7, #28]
 80044cc:	6a3a      	ldr	r2, [r7, #32]
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d10a      	bne.n	80044fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004502:	4619      	mov	r1, r3
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff fdf9 	bl	80040fc <HAL_UARTEx_RxEventCallback>
 800450a:	e002      	b.n	8004512 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fde1 	bl	80040d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	e002      	b.n	800451c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	e000      	b.n	800451c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800451a:	2302      	movs	r3, #2
  }
}
 800451c:	4618      	mov	r0, r3
 800451e:	3730      	adds	r7, #48	; 0x30
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004528:	b09f      	sub	sp, #124	; 0x7c
 800452a:	af00      	add	r7, sp, #0
 800452c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800452e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453a:	68d9      	ldr	r1, [r3, #12]
 800453c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	ea40 0301 	orr.w	r3, r0, r1
 8004544:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	431a      	orrs	r2, r3
 8004550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	431a      	orrs	r2, r3
 8004556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	4313      	orrs	r3, r2
 800455c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800455e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004568:	f021 010c 	bic.w	r1, r1, #12
 800456c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004572:	430b      	orrs	r3, r1
 8004574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004582:	6999      	ldr	r1, [r3, #24]
 8004584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	ea40 0301 	orr.w	r3, r0, r1
 800458c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800458e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4bc5      	ldr	r3, [pc, #788]	; (80048a8 <UART_SetConfig+0x384>)
 8004594:	429a      	cmp	r2, r3
 8004596:	d004      	beq.n	80045a2 <UART_SetConfig+0x7e>
 8004598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4bc3      	ldr	r3, [pc, #780]	; (80048ac <UART_SetConfig+0x388>)
 800459e:	429a      	cmp	r2, r3
 80045a0:	d103      	bne.n	80045aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045a2:	f7fe f989 	bl	80028b8 <HAL_RCC_GetPCLK2Freq>
 80045a6:	6778      	str	r0, [r7, #116]	; 0x74
 80045a8:	e002      	b.n	80045b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045aa:	f7fe f971 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 80045ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b8:	f040 80b6 	bne.w	8004728 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045be:	461c      	mov	r4, r3
 80045c0:	f04f 0500 	mov.w	r5, #0
 80045c4:	4622      	mov	r2, r4
 80045c6:	462b      	mov	r3, r5
 80045c8:	1891      	adds	r1, r2, r2
 80045ca:	6439      	str	r1, [r7, #64]	; 0x40
 80045cc:	415b      	adcs	r3, r3
 80045ce:	647b      	str	r3, [r7, #68]	; 0x44
 80045d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045d4:	1912      	adds	r2, r2, r4
 80045d6:	eb45 0303 	adc.w	r3, r5, r3
 80045da:	f04f 0000 	mov.w	r0, #0
 80045de:	f04f 0100 	mov.w	r1, #0
 80045e2:	00d9      	lsls	r1, r3, #3
 80045e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045e8:	00d0      	lsls	r0, r2, #3
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	1911      	adds	r1, r2, r4
 80045f0:	6639      	str	r1, [r7, #96]	; 0x60
 80045f2:	416b      	adcs	r3, r5
 80045f4:	667b      	str	r3, [r7, #100]	; 0x64
 80045f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	461a      	mov	r2, r3
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	1891      	adds	r1, r2, r2
 8004602:	63b9      	str	r1, [r7, #56]	; 0x38
 8004604:	415b      	adcs	r3, r3
 8004606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004608:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800460c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004610:	f7fc fb1c 	bl	8000c4c <__aeabi_uldivmod>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4ba5      	ldr	r3, [pc, #660]	; (80048b0 <UART_SetConfig+0x38c>)
 800461a:	fba3 2302 	umull	r2, r3, r3, r2
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	011e      	lsls	r6, r3, #4
 8004622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004624:	461c      	mov	r4, r3
 8004626:	f04f 0500 	mov.w	r5, #0
 800462a:	4622      	mov	r2, r4
 800462c:	462b      	mov	r3, r5
 800462e:	1891      	adds	r1, r2, r2
 8004630:	6339      	str	r1, [r7, #48]	; 0x30
 8004632:	415b      	adcs	r3, r3
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
 8004636:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800463a:	1912      	adds	r2, r2, r4
 800463c:	eb45 0303 	adc.w	r3, r5, r3
 8004640:	f04f 0000 	mov.w	r0, #0
 8004644:	f04f 0100 	mov.w	r1, #0
 8004648:	00d9      	lsls	r1, r3, #3
 800464a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800464e:	00d0      	lsls	r0, r2, #3
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	1911      	adds	r1, r2, r4
 8004656:	65b9      	str	r1, [r7, #88]	; 0x58
 8004658:	416b      	adcs	r3, r5
 800465a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800465c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	461a      	mov	r2, r3
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	1891      	adds	r1, r2, r2
 8004668:	62b9      	str	r1, [r7, #40]	; 0x28
 800466a:	415b      	adcs	r3, r3
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800466e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004672:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004676:	f7fc fae9 	bl	8000c4c <__aeabi_uldivmod>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4b8c      	ldr	r3, [pc, #560]	; (80048b0 <UART_SetConfig+0x38c>)
 8004680:	fba3 1302 	umull	r1, r3, r3, r2
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	2164      	movs	r1, #100	; 0x64
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	3332      	adds	r3, #50	; 0x32
 8004692:	4a87      	ldr	r2, [pc, #540]	; (80048b0 <UART_SetConfig+0x38c>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046a0:	441e      	add	r6, r3
 80046a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a4:	4618      	mov	r0, r3
 80046a6:	f04f 0100 	mov.w	r1, #0
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	1894      	adds	r4, r2, r2
 80046b0:	623c      	str	r4, [r7, #32]
 80046b2:	415b      	adcs	r3, r3
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
 80046b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046ba:	1812      	adds	r2, r2, r0
 80046bc:	eb41 0303 	adc.w	r3, r1, r3
 80046c0:	f04f 0400 	mov.w	r4, #0
 80046c4:	f04f 0500 	mov.w	r5, #0
 80046c8:	00dd      	lsls	r5, r3, #3
 80046ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046ce:	00d4      	lsls	r4, r2, #3
 80046d0:	4622      	mov	r2, r4
 80046d2:	462b      	mov	r3, r5
 80046d4:	1814      	adds	r4, r2, r0
 80046d6:	653c      	str	r4, [r7, #80]	; 0x50
 80046d8:	414b      	adcs	r3, r1
 80046da:	657b      	str	r3, [r7, #84]	; 0x54
 80046dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	461a      	mov	r2, r3
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	1891      	adds	r1, r2, r2
 80046e8:	61b9      	str	r1, [r7, #24]
 80046ea:	415b      	adcs	r3, r3
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80046f6:	f7fc faa9 	bl	8000c4c <__aeabi_uldivmod>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4b6c      	ldr	r3, [pc, #432]	; (80048b0 <UART_SetConfig+0x38c>)
 8004700:	fba3 1302 	umull	r1, r3, r3, r2
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	2164      	movs	r1, #100	; 0x64
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	3332      	adds	r3, #50	; 0x32
 8004712:	4a67      	ldr	r2, [pc, #412]	; (80048b0 <UART_SetConfig+0x38c>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	f003 0207 	and.w	r2, r3, #7
 800471e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4432      	add	r2, r6
 8004724:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004726:	e0b9      	b.n	800489c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800472a:	461c      	mov	r4, r3
 800472c:	f04f 0500 	mov.w	r5, #0
 8004730:	4622      	mov	r2, r4
 8004732:	462b      	mov	r3, r5
 8004734:	1891      	adds	r1, r2, r2
 8004736:	6139      	str	r1, [r7, #16]
 8004738:	415b      	adcs	r3, r3
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004740:	1912      	adds	r2, r2, r4
 8004742:	eb45 0303 	adc.w	r3, r5, r3
 8004746:	f04f 0000 	mov.w	r0, #0
 800474a:	f04f 0100 	mov.w	r1, #0
 800474e:	00d9      	lsls	r1, r3, #3
 8004750:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004754:	00d0      	lsls	r0, r2, #3
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	eb12 0804 	adds.w	r8, r2, r4
 800475e:	eb43 0905 	adc.w	r9, r3, r5
 8004762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4618      	mov	r0, r3
 8004768:	f04f 0100 	mov.w	r1, #0
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	008b      	lsls	r3, r1, #2
 8004776:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800477a:	0082      	lsls	r2, r0, #2
 800477c:	4640      	mov	r0, r8
 800477e:	4649      	mov	r1, r9
 8004780:	f7fc fa64 	bl	8000c4c <__aeabi_uldivmod>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4b49      	ldr	r3, [pc, #292]	; (80048b0 <UART_SetConfig+0x38c>)
 800478a:	fba3 2302 	umull	r2, r3, r3, r2
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	011e      	lsls	r6, r3, #4
 8004792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004794:	4618      	mov	r0, r3
 8004796:	f04f 0100 	mov.w	r1, #0
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	1894      	adds	r4, r2, r2
 80047a0:	60bc      	str	r4, [r7, #8]
 80047a2:	415b      	adcs	r3, r3
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047aa:	1812      	adds	r2, r2, r0
 80047ac:	eb41 0303 	adc.w	r3, r1, r3
 80047b0:	f04f 0400 	mov.w	r4, #0
 80047b4:	f04f 0500 	mov.w	r5, #0
 80047b8:	00dd      	lsls	r5, r3, #3
 80047ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047be:	00d4      	lsls	r4, r2, #3
 80047c0:	4622      	mov	r2, r4
 80047c2:	462b      	mov	r3, r5
 80047c4:	1814      	adds	r4, r2, r0
 80047c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80047c8:	414b      	adcs	r3, r1
 80047ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f04f 0100 	mov.w	r1, #0
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	008b      	lsls	r3, r1, #2
 80047e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047e4:	0082      	lsls	r2, r0, #2
 80047e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80047ea:	f7fc fa2f 	bl	8000c4c <__aeabi_uldivmod>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4b2f      	ldr	r3, [pc, #188]	; (80048b0 <UART_SetConfig+0x38c>)
 80047f4:	fba3 1302 	umull	r1, r3, r3, r2
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	2164      	movs	r1, #100	; 0x64
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	3332      	adds	r3, #50	; 0x32
 8004806:	4a2a      	ldr	r2, [pc, #168]	; (80048b0 <UART_SetConfig+0x38c>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004812:	441e      	add	r6, r3
 8004814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004816:	4618      	mov	r0, r3
 8004818:	f04f 0100 	mov.w	r1, #0
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	1894      	adds	r4, r2, r2
 8004822:	603c      	str	r4, [r7, #0]
 8004824:	415b      	adcs	r3, r3
 8004826:	607b      	str	r3, [r7, #4]
 8004828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800482c:	1812      	adds	r2, r2, r0
 800482e:	eb41 0303 	adc.w	r3, r1, r3
 8004832:	f04f 0400 	mov.w	r4, #0
 8004836:	f04f 0500 	mov.w	r5, #0
 800483a:	00dd      	lsls	r5, r3, #3
 800483c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004840:	00d4      	lsls	r4, r2, #3
 8004842:	4622      	mov	r2, r4
 8004844:	462b      	mov	r3, r5
 8004846:	eb12 0a00 	adds.w	sl, r2, r0
 800484a:	eb43 0b01 	adc.w	fp, r3, r1
 800484e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4618      	mov	r0, r3
 8004854:	f04f 0100 	mov.w	r1, #0
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	008b      	lsls	r3, r1, #2
 8004862:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004866:	0082      	lsls	r2, r0, #2
 8004868:	4650      	mov	r0, sl
 800486a:	4659      	mov	r1, fp
 800486c:	f7fc f9ee 	bl	8000c4c <__aeabi_uldivmod>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <UART_SetConfig+0x38c>)
 8004876:	fba3 1302 	umull	r1, r3, r3, r2
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	2164      	movs	r1, #100	; 0x64
 800487e:	fb01 f303 	mul.w	r3, r1, r3
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	3332      	adds	r3, #50	; 0x32
 8004888:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <UART_SetConfig+0x38c>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	f003 020f 	and.w	r2, r3, #15
 8004894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4432      	add	r2, r6
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	377c      	adds	r7, #124	; 0x7c
 80048a0:	46bd      	mov	sp, r7
 80048a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a6:	bf00      	nop
 80048a8:	40011000 	.word	0x40011000
 80048ac:	40011400 	.word	0x40011400
 80048b0:	51eb851f 	.word	0x51eb851f

080048b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80048b8:	4904      	ldr	r1, [pc, #16]	; (80048cc <MX_FATFS_Init+0x18>)
 80048ba:	4805      	ldr	r0, [pc, #20]	; (80048d0 <MX_FATFS_Init+0x1c>)
 80048bc:	f004 fcce 	bl	800925c <FATFS_LinkDriver>
 80048c0:	4603      	mov	r3, r0
 80048c2:	461a      	mov	r2, r3
 80048c4:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <MX_FATFS_Init+0x20>)
 80048c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80048c8:	bf00      	nop
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20003cd0 	.word	0x20003cd0
 80048d0:	20000014 	.word	0x20000014
 80048d4:	20003cd4 	.word	0x20003cd4

080048d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80048dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80048de:	4618      	mov	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80048f2:	4b06      	ldr	r3, [pc, #24]	; (800490c <USER_initialize+0x24>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	701a      	strb	r2, [r3, #0]
    return SD_disk_initialize(pdrv);
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fc fd14 	bl	8001328 <SD_disk_initialize>
 8004900:	4603      	mov	r3, r0
 8004902:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	20000011 	.word	0x20000011

08004910 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800491a:	4b06      	ldr	r3, [pc, #24]	; (8004934 <USER_status+0x24>)
 800491c:	2201      	movs	r2, #1
 800491e:	701a      	strb	r2, [r3, #0]
    return SD_disk_status(pdrv);
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	4618      	mov	r0, r3
 8004924:	f7fc fdec 	bl	8001500 <SD_disk_status>
 8004928:	4603      	mov	r3, r0
 800492a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20000011 	.word	0x20000011

08004938 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	4603      	mov	r3, r0
 8004946:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004948:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	4603      	mov	r3, r0
 8004964:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004966:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	603a      	str	r2, [r7, #0]
 800497e:	71fb      	strb	r3, [r7, #7]
 8004980:	460b      	mov	r3, r1
 8004982:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
    return res;
 8004988:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <disk_status+0x30>)
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	79fa      	ldrb	r2, [r7, #7]
 80049b0:	4905      	ldr	r1, [pc, #20]	; (80049c8 <disk_status+0x30>)
 80049b2:	440a      	add	r2, r1
 80049b4:	7a12      	ldrb	r2, [r2, #8]
 80049b6:	4610      	mov	r0, r2
 80049b8:	4798      	blx	r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80049be:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	200006f8 	.word	0x200006f8

080049cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	4a0d      	ldr	r2, [pc, #52]	; (8004a14 <disk_initialize+0x48>)
 80049de:	5cd3      	ldrb	r3, [r2, r3]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d111      	bne.n	8004a08 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	4a0b      	ldr	r2, [pc, #44]	; (8004a14 <disk_initialize+0x48>)
 80049e8:	2101      	movs	r1, #1
 80049ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <disk_initialize+0x48>)
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	79fa      	ldrb	r2, [r7, #7]
 80049fa:	4906      	ldr	r1, [pc, #24]	; (8004a14 <disk_initialize+0x48>)
 80049fc:	440a      	add	r2, r1
 80049fe:	7a12      	ldrb	r2, [r2, #8]
 8004a00:	4610      	mov	r0, r2
 8004a02:	4798      	blx	r3
 8004a04:	4603      	mov	r3, r0
 8004a06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	200006f8 	.word	0x200006f8

08004a18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004a18:	b590      	push	{r4, r7, lr}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	4603      	mov	r3, r0
 8004a26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <disk_read+0x3c>)
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	689c      	ldr	r4, [r3, #8]
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	4a07      	ldr	r2, [pc, #28]	; (8004a54 <disk_read+0x3c>)
 8004a38:	4413      	add	r3, r2
 8004a3a:	7a18      	ldrb	r0, [r3, #8]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	47a0      	blx	r4
 8004a44:	4603      	mov	r3, r0
 8004a46:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd90      	pop	{r4, r7, pc}
 8004a52:	bf00      	nop
 8004a54:	200006f8 	.word	0x200006f8

08004a58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004a58:	b590      	push	{r4, r7, lr}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	4603      	mov	r3, r0
 8004a66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	4a0a      	ldr	r2, [pc, #40]	; (8004a94 <disk_write+0x3c>)
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	68dc      	ldr	r4, [r3, #12]
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	4a07      	ldr	r2, [pc, #28]	; (8004a94 <disk_write+0x3c>)
 8004a78:	4413      	add	r3, r2
 8004a7a:	7a18      	ldrb	r0, [r3, #8]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	68b9      	ldr	r1, [r7, #8]
 8004a82:	47a0      	blx	r4
 8004a84:	4603      	mov	r3, r0
 8004a86:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd90      	pop	{r4, r7, pc}
 8004a92:	bf00      	nop
 8004a94:	200006f8 	.word	0x200006f8

08004a98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	603a      	str	r2, [r7, #0]
 8004aa2:	71fb      	strb	r3, [r7, #7]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <disk_ioctl+0x38>)
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	79fa      	ldrb	r2, [r7, #7]
 8004ab6:	4906      	ldr	r1, [pc, #24]	; (8004ad0 <disk_ioctl+0x38>)
 8004ab8:	440a      	add	r2, r1
 8004aba:	7a10      	ldrb	r0, [r2, #8]
 8004abc:	79b9      	ldrb	r1, [r7, #6]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	4798      	blx	r3
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	73fb      	strb	r3, [r7, #15]
  return res;
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	200006f8 	.word	0x200006f8

08004ad4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004ae4:	89fb      	ldrh	r3, [r7, #14]
 8004ae6:	021b      	lsls	r3, r3, #8
 8004ae8:	b21a      	sxth	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	b21b      	sxth	r3, r3
 8004af0:	4313      	orrs	r3, r2
 8004af2:	b21b      	sxth	r3, r3
 8004af4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004af6:	89fb      	ldrh	r3, [r7, #14]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3303      	adds	r3, #3
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	3202      	adds	r2, #2
 8004b1c:	7812      	ldrb	r2, [r2, #0]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	3201      	adds	r2, #1
 8004b2a:	7812      	ldrb	r2, [r2, #0]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	021b      	lsls	r3, r3, #8
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	7812      	ldrb	r2, [r2, #0]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
	return rv;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8004b4a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004b4e:	b08d      	sub	sp, #52	; 0x34
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6278      	str	r0, [r7, #36]	; 0x24
	QWORD rv;

	rv = ptr[7];
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	3307      	adds	r3, #7
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[6];
 8004b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b68:	f04f 0000 	mov.w	r0, #0
 8004b6c:	f04f 0100 	mov.w	r1, #0
 8004b70:	0219      	lsls	r1, r3, #8
 8004b72:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004b76:	0210      	lsls	r0, r2, #8
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	3306      	adds	r3, #6
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	ea40 0402 	orr.w	r4, r0, r2
 8004b88:	ea41 0503 	orr.w	r5, r1, r3
 8004b8c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[5];
 8004b90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b94:	f04f 0000 	mov.w	r0, #0
 8004b98:	f04f 0100 	mov.w	r1, #0
 8004b9c:	0219      	lsls	r1, r3, #8
 8004b9e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004ba2:	0210      	lsls	r0, r2, #8
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	3305      	adds	r3, #5
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	ea40 0802 	orr.w	r8, r0, r2
 8004bb4:	ea41 0903 	orr.w	r9, r1, r3
 8004bb8:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[4];
 8004bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bc0:	f04f 0000 	mov.w	r0, #0
 8004bc4:	f04f 0100 	mov.w	r1, #0
 8004bc8:	0219      	lsls	r1, r3, #8
 8004bca:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004bce:	0210      	lsls	r0, r2, #8
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	ea40 0402 	orr.w	r4, r0, r2
 8004be0:	61bc      	str	r4, [r7, #24]
 8004be2:	430b      	orrs	r3, r1
 8004be4:	61fb      	str	r3, [r7, #28]
 8004be6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004bea:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[3];
 8004bee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	020b      	lsls	r3, r1, #8
 8004bfc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c00:	0202      	lsls	r2, r0, #8
 8004c02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c04:	3103      	adds	r1, #3
 8004c06:	7809      	ldrb	r1, [r1, #0]
 8004c08:	b2c8      	uxtb	r0, r1
 8004c0a:	f04f 0100 	mov.w	r1, #0
 8004c0e:	ea42 0400 	orr.w	r4, r2, r0
 8004c12:	613c      	str	r4, [r7, #16]
 8004c14:	430b      	orrs	r3, r1
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004c1c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[2];
 8004c20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	020b      	lsls	r3, r1, #8
 8004c2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c32:	0202      	lsls	r2, r0, #8
 8004c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c36:	3102      	adds	r1, #2
 8004c38:	7809      	ldrb	r1, [r1, #0]
 8004c3a:	b2c8      	uxtb	r0, r1
 8004c3c:	f04f 0100 	mov.w	r1, #0
 8004c40:	ea42 0400 	orr.w	r4, r2, r0
 8004c44:	60bc      	str	r4, [r7, #8]
 8004c46:	430b      	orrs	r3, r1
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004c4e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[1];
 8004c52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	020b      	lsls	r3, r1, #8
 8004c60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c64:	0202      	lsls	r2, r0, #8
 8004c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c68:	3101      	adds	r1, #1
 8004c6a:	7809      	ldrb	r1, [r1, #0]
 8004c6c:	b2c8      	uxtb	r0, r1
 8004c6e:	f04f 0100 	mov.w	r1, #0
 8004c72:	ea42 0400 	orr.w	r4, r2, r0
 8004c76:	603c      	str	r4, [r7, #0]
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	607b      	str	r3, [r7, #4]
 8004c7c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004c80:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[0];
 8004c84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	020b      	lsls	r3, r1, #8
 8004c92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c96:	0202      	lsls	r2, r0, #8
 8004c98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c9a:	7809      	ldrb	r1, [r1, #0]
 8004c9c:	b2c8      	uxtb	r0, r1
 8004c9e:	f04f 0100 	mov.w	r1, #0
 8004ca2:	ea42 0a00 	orr.w	sl, r2, r0
 8004ca6:	ea43 0b01 	orr.w	fp, r3, r1
 8004caa:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	return rv;
 8004cae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	3734      	adds	r7, #52	; 0x34
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004cbe:	4770      	bx	lr

08004cc0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	887a      	ldrh	r2, [r7, #2]
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	887b      	ldrh	r3, [r7, #2]
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	887a      	ldrh	r2, [r7, #2]
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	0a1b      	lsrs	r3, r3, #8
 8004d22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	607a      	str	r2, [r7, #4]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	0a1b      	lsrs	r3, r3, #8
 8004d34:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b085      	sub	sp, #20
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	60fa      	str	r2, [r7, #12]
 8004d60:	783a      	ldrb	r2, [r7, #0]
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	0a02      	lsrs	r2, r0, #8
 8004d72:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004d76:	0a0b      	lsrs	r3, r1, #8
 8004d78:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	60fa      	str	r2, [r7, #12]
 8004d82:	783a      	ldrb	r2, [r7, #0]
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	0a02      	lsrs	r2, r0, #8
 8004d94:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004d98:	0a0b      	lsrs	r3, r1, #8
 8004d9a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	60fa      	str	r2, [r7, #12]
 8004da4:	783a      	ldrb	r2, [r7, #0]
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	0a02      	lsrs	r2, r0, #8
 8004db6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004dba:	0a0b      	lsrs	r3, r1, #8
 8004dbc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	60fa      	str	r2, [r7, #12]
 8004dc6:	783a      	ldrb	r2, [r7, #0]
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	0a02      	lsrs	r2, r0, #8
 8004dd8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004ddc:	0a0b      	lsrs	r3, r1, #8
 8004dde:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	60fa      	str	r2, [r7, #12]
 8004de8:	783a      	ldrb	r2, [r7, #0]
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	0a02      	lsrs	r2, r0, #8
 8004dfa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004dfe:	0a0b      	lsrs	r3, r1, #8
 8004e00:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	60fa      	str	r2, [r7, #12]
 8004e0a:	783a      	ldrb	r2, [r7, #0]
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	0a02      	lsrs	r2, r0, #8
 8004e1c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004e20:	0a0b      	lsrs	r3, r1, #8
 8004e22:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	60fa      	str	r2, [r7, #12]
 8004e2c:	783a      	ldrb	r2, [r7, #0]
 8004e2e:	701a      	strb	r2, [r3, #0]
 8004e30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	0a02      	lsrs	r2, r0, #8
 8004e3e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004e42:	0a0b      	lsrs	r3, r1, #8
 8004e44:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	60fa      	str	r2, [r7, #12]
 8004e4e:	783a      	ldrb	r2, [r7, #0]
 8004e50:	701a      	strb	r2, [r3, #0]
}
 8004e52:	bf00      	nop
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004e5e:	b480      	push	{r7}
 8004e60:	b087      	sub	sp, #28
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00d      	beq.n	8004e94 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	1c53      	adds	r3, r2, #1
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	1c59      	adds	r1, r3, #1
 8004e82:	6179      	str	r1, [r7, #20]
 8004e84:	7812      	ldrb	r2, [r2, #0]
 8004e86:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	607b      	str	r3, [r7, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f1      	bne.n	8004e78 <mem_cpy+0x1a>
	}
}
 8004e94:	bf00      	nop
 8004e96:	371c      	adds	r7, #28
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	617a      	str	r2, [r7, #20]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1f3      	bne.n	8004eb0 <mem_set+0x10>
}
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004ed6:	b480      	push	{r7}
 8004ed8:	b089      	sub	sp, #36	; 0x24
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	61fb      	str	r3, [r7, #28]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	61fa      	str	r2, [r7, #28]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	61ba      	str	r2, [r7, #24]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	1acb      	subs	r3, r1, r3
 8004f02:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <mem_cmp+0x40>
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0eb      	beq.n	8004eee <mem_cmp+0x18>

	return r;
 8004f16:	697b      	ldr	r3, [r7, #20]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3724      	adds	r7, #36	; 0x24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004f2e:	e002      	b.n	8004f36 <chk_chr+0x12>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3301      	adds	r3, #1
 8004f34:	607b      	str	r3, [r7, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <chk_chr+0x26>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d1f2      	bne.n	8004f30 <chk_chr+0xc>
	return *str;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
	...

08004f5c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f66:	2300      	movs	r3, #0
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	e029      	b.n	8004fc4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004f70:	4a27      	ldr	r2, [pc, #156]	; (8005010 <chk_lock+0xb4>)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	4413      	add	r3, r2
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01d      	beq.n	8004fba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f7e:	4a24      	ldr	r2, [pc, #144]	; (8005010 <chk_lock+0xb4>)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	4413      	add	r3, r2
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d116      	bne.n	8004fbe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004f90:	4a1f      	ldr	r2, [pc, #124]	; (8005010 <chk_lock+0xb4>)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	4413      	add	r3, r2
 8004f98:	3304      	adds	r3, #4
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d10c      	bne.n	8004fbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004fa4:	4a1a      	ldr	r2, [pc, #104]	; (8005010 <chk_lock+0xb4>)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	4413      	add	r3, r2
 8004fac:	3308      	adds	r3, #8
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d102      	bne.n	8004fbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004fb8:	e007      	b.n	8004fca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d9d2      	bls.n	8004f70 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d109      	bne.n	8004fe4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <chk_lock+0x80>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d101      	bne.n	8004fe0 <chk_lock+0x84>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e010      	b.n	8005002 <chk_lock+0xa6>
 8004fe0:	2312      	movs	r3, #18
 8004fe2:	e00e      	b.n	8005002 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d108      	bne.n	8004ffc <chk_lock+0xa0>
 8004fea:	4a09      	ldr	r2, [pc, #36]	; (8005010 <chk_lock+0xb4>)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	4413      	add	r3, r2
 8004ff2:	330c      	adds	r3, #12
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffa:	d101      	bne.n	8005000 <chk_lock+0xa4>
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	e000      	b.n	8005002 <chk_lock+0xa6>
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20000278 	.word	0x20000278

08005014 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800501a:	2300      	movs	r3, #0
 800501c:	607b      	str	r3, [r7, #4]
 800501e:	e002      	b.n	8005026 <enq_lock+0x12>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3301      	adds	r3, #1
 8005024:	607b      	str	r3, [r7, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d806      	bhi.n	800503a <enq_lock+0x26>
 800502c:	4a09      	ldr	r2, [pc, #36]	; (8005054 <enq_lock+0x40>)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	4413      	add	r3, r2
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f2      	bne.n	8005020 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b02      	cmp	r3, #2
 800503e:	bf14      	ite	ne
 8005040:	2301      	movne	r3, #1
 8005042:	2300      	moveq	r3, #0
 8005044:	b2db      	uxtb	r3, r3
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	20000278 	.word	0x20000278

08005058 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005062:	2300      	movs	r3, #0
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	e01f      	b.n	80050a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005068:	4a41      	ldr	r2, [pc, #260]	; (8005170 <inc_lock+0x118>)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	4413      	add	r3, r2
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d113      	bne.n	80050a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800507a:	4a3d      	ldr	r2, [pc, #244]	; (8005170 <inc_lock+0x118>)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	4413      	add	r3, r2
 8005082:	3304      	adds	r3, #4
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800508a:	429a      	cmp	r2, r3
 800508c:	d109      	bne.n	80050a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800508e:	4a38      	ldr	r2, [pc, #224]	; (8005170 <inc_lock+0x118>)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	011b      	lsls	r3, r3, #4
 8005094:	4413      	add	r3, r2
 8005096:	3308      	adds	r3, #8
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800509e:	429a      	cmp	r2, r3
 80050a0:	d006      	beq.n	80050b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3301      	adds	r3, #1
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d9dc      	bls.n	8005068 <inc_lock+0x10>
 80050ae:	e000      	b.n	80050b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80050b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d132      	bne.n	800511e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	e002      	b.n	80050c4 <inc_lock+0x6c>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3301      	adds	r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d806      	bhi.n	80050d8 <inc_lock+0x80>
 80050ca:	4a29      	ldr	r2, [pc, #164]	; (8005170 <inc_lock+0x118>)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	4413      	add	r3, r2
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f2      	bne.n	80050be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d101      	bne.n	80050e2 <inc_lock+0x8a>
 80050de:	2300      	movs	r3, #0
 80050e0:	e040      	b.n	8005164 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4922      	ldr	r1, [pc, #136]	; (8005170 <inc_lock+0x118>)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	440b      	add	r3, r1
 80050ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	491e      	ldr	r1, [pc, #120]	; (8005170 <inc_lock+0x118>)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	440b      	add	r3, r1
 80050fc:	3304      	adds	r3, #4
 80050fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005104:	491a      	ldr	r1, [pc, #104]	; (8005170 <inc_lock+0x118>)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	440b      	add	r3, r1
 800510c:	3308      	adds	r3, #8
 800510e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005110:	4a17      	ldr	r2, [pc, #92]	; (8005170 <inc_lock+0x118>)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	4413      	add	r3, r2
 8005118:	330c      	adds	r3, #12
 800511a:	2200      	movs	r2, #0
 800511c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d009      	beq.n	8005138 <inc_lock+0xe0>
 8005124:	4a12      	ldr	r2, [pc, #72]	; (8005170 <inc_lock+0x118>)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	4413      	add	r3, r2
 800512c:	330c      	adds	r3, #12
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <inc_lock+0xe0>
 8005134:	2300      	movs	r3, #0
 8005136:	e015      	b.n	8005164 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d108      	bne.n	8005150 <inc_lock+0xf8>
 800513e:	4a0c      	ldr	r2, [pc, #48]	; (8005170 <inc_lock+0x118>)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	4413      	add	r3, r2
 8005146:	330c      	adds	r3, #12
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	3301      	adds	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	e001      	b.n	8005154 <inc_lock+0xfc>
 8005150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005154:	4906      	ldr	r1, [pc, #24]	; (8005170 <inc_lock+0x118>)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	440b      	add	r3, r1
 800515c:	330c      	adds	r3, #12
 800515e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3301      	adds	r3, #1
}
 8005164:	4618      	mov	r0, r3
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	20000278 	.word	0x20000278

08005174 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3b01      	subs	r3, #1
 8005180:	607b      	str	r3, [r7, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d825      	bhi.n	80051d4 <dec_lock+0x60>
		n = Files[i].ctr;
 8005188:	4a17      	ldr	r2, [pc, #92]	; (80051e8 <dec_lock+0x74>)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	4413      	add	r3, r2
 8005190:	330c      	adds	r3, #12
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005196:	89fb      	ldrh	r3, [r7, #14]
 8005198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800519c:	d101      	bne.n	80051a2 <dec_lock+0x2e>
 800519e:	2300      	movs	r3, #0
 80051a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80051a2:	89fb      	ldrh	r3, [r7, #14]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <dec_lock+0x3a>
 80051a8:	89fb      	ldrh	r3, [r7, #14]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80051ae:	4a0e      	ldr	r2, [pc, #56]	; (80051e8 <dec_lock+0x74>)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	4413      	add	r3, r2
 80051b6:	330c      	adds	r3, #12
 80051b8:	89fa      	ldrh	r2, [r7, #14]
 80051ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80051bc:	89fb      	ldrh	r3, [r7, #14]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d105      	bne.n	80051ce <dec_lock+0x5a>
 80051c2:	4a09      	ldr	r2, [pc, #36]	; (80051e8 <dec_lock+0x74>)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	4413      	add	r3, r2
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	737b      	strb	r3, [r7, #13]
 80051d2:	e001      	b.n	80051d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80051d4:	2302      	movs	r3, #2
 80051d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80051d8:	7b7b      	ldrb	r3, [r7, #13]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	20000278 	.word	0x20000278

080051ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80051f4:	2300      	movs	r3, #0
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	e010      	b.n	800521c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80051fa:	4a0d      	ldr	r2, [pc, #52]	; (8005230 <clear_lock+0x44>)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	4413      	add	r3, r2
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	429a      	cmp	r2, r3
 8005208:	d105      	bne.n	8005216 <clear_lock+0x2a>
 800520a:	4a09      	ldr	r2, [pc, #36]	; (8005230 <clear_lock+0x44>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	4413      	add	r3, r2
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3301      	adds	r3, #1
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d9eb      	bls.n	80051fa <clear_lock+0xe>
	}
}
 8005222:	bf00      	nop
 8005224:	bf00      	nop
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	20000278 	.word	0x20000278

08005234 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	78db      	ldrb	r3, [r3, #3]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d034      	beq.n	80052b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	7858      	ldrb	r0, [r3, #1]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005258:	2301      	movs	r3, #1
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	f7ff fbfc 	bl	8004a58 <disk_write>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005266:	2301      	movs	r3, #1
 8005268:	73fb      	strb	r3, [r7, #15]
 800526a:	e022      	b.n	80052b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	1ad2      	subs	r2, r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	429a      	cmp	r2, r3
 8005280:	d217      	bcs.n	80052b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	789b      	ldrb	r3, [r3, #2]
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	e010      	b.n	80052ac <sync_window+0x78>
					wsect += fs->fsize;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4413      	add	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	7858      	ldrb	r0, [r3, #1]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800529e:	2301      	movs	r3, #1
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	f7ff fbd9 	bl	8004a58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d8eb      	bhi.n	800528a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d01b      	beq.n	800530c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff ffad 	bl	8005234 <sync_window>
 80052da:	4603      	mov	r3, r0
 80052dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d113      	bne.n	800530c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	7858      	ldrb	r0, [r3, #1]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80052ee:	2301      	movs	r3, #1
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	f7ff fb91 	bl	8004a18 <disk_read>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d004      	beq.n	8005306 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80052fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005300:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005302:	2301      	movs	r3, #1
 8005304:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff ff87 	bl	8005234 <sync_window>
 8005326:	4603      	mov	r3, r0
 8005328:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d159      	bne.n	80053e4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b03      	cmp	r3, #3
 8005336:	d149      	bne.n	80053cc <sync_fs+0xb4>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	791b      	ldrb	r3, [r3, #4]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d145      	bne.n	80053cc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	899b      	ldrh	r3, [r3, #12]
 800534a:	461a      	mov	r2, r3
 800534c:	2100      	movs	r1, #0
 800534e:	f7ff fda7 	bl	8004ea0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	333c      	adds	r3, #60	; 0x3c
 8005356:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800535a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fcae 	bl	8004cc0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	333c      	adds	r3, #60	; 0x3c
 8005368:	4921      	ldr	r1, [pc, #132]	; (80053f0 <sync_fs+0xd8>)
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fcc3 	bl	8004cf6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	333c      	adds	r3, #60	; 0x3c
 8005374:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005378:	491e      	ldr	r1, [pc, #120]	; (80053f4 <sync_fs+0xdc>)
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff fcbb 	bl	8004cf6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	333c      	adds	r3, #60	; 0x3c
 8005384:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f7ff fcb1 	bl	8004cf6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	333c      	adds	r3, #60	; 0x3c
 8005398:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	4619      	mov	r1, r3
 80053a2:	4610      	mov	r0, r2
 80053a4:	f7ff fca7 	bl	8004cf6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	7858      	ldrb	r0, [r3, #1]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c0:	2301      	movs	r3, #1
 80053c2:	f7ff fb49 	bl	8004a58 <disk_write>
			fs->fsi_flag = 0;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	785b      	ldrb	r3, [r3, #1]
 80053d0:	2200      	movs	r2, #0
 80053d2:	2100      	movs	r1, #0
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff fb5f 	bl	8004a98 <disk_ioctl>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <sync_fs+0xcc>
 80053e0:	2301      	movs	r3, #1
 80053e2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	41615252 	.word	0x41615252
 80053f4:	61417272 	.word	0x61417272

080053f8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	3b02      	subs	r3, #2
 8005406:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	3b02      	subs	r3, #2
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d301      	bcc.n	8005418 <clust2sect+0x20>
 8005414:	2300      	movs	r3, #0
 8005416:	e008      	b.n	800542a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	895b      	ldrh	r3, [r3, #10]
 800541c:	461a      	mov	r2, r3
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	fb03 f202 	mul.w	r2, r3, r2
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005428:	4413      	add	r3, r2
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005438:	b5b0      	push	{r4, r5, r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d904      	bls.n	8005458 <get_fat+0x20>
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d302      	bcc.n	800545e <get_fat+0x26>
		val = 1;	/* Internal error */
 8005458:	2301      	movs	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	e139      	b.n	80056d2 <get_fat+0x29a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800545e:	f04f 33ff 	mov.w	r3, #4294967295
 8005462:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	3b01      	subs	r3, #1
 800546a:	2b03      	cmp	r3, #3
 800546c:	f200 8125 	bhi.w	80056ba <get_fat+0x282>
 8005470:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <get_fat+0x40>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	08005489 	.word	0x08005489
 800547c:	08005537 	.word	0x08005537
 8005480:	08005583 	.word	0x08005583
 8005484:	080055d3 	.word	0x080055d3
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	085b      	lsrs	r3, r3, #1
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	899b      	ldrh	r3, [r3, #12]
 800549e:	4619      	mov	r1, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80054a6:	4413      	add	r3, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	69b8      	ldr	r0, [r7, #24]
 80054ac:	f7ff ff06 	bl	80052bc <move_window>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f040 8104 	bne.w	80056c0 <get_fat+0x288>
			wc = fs->win[bc++ % SS(fs)];
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	60fa      	str	r2, [r7, #12]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	8992      	ldrh	r2, [r2, #12]
 80054c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80054c6:	fb02 f201 	mul.w	r2, r2, r1
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	4413      	add	r3, r2
 80054d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	899b      	ldrh	r3, [r3, #12]
 80054de:	4619      	mov	r1, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80054e6:	4413      	add	r3, r2
 80054e8:	4619      	mov	r1, r3
 80054ea:	69b8      	ldr	r0, [r7, #24]
 80054ec:	f7ff fee6 	bl	80052bc <move_window>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f040 80e6 	bne.w	80056c4 <get_fat+0x28c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	899b      	ldrh	r3, [r3, #12]
 80054fc:	461a      	mov	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	fbb3 f1f2 	udiv	r1, r3, r2
 8005504:	fb02 f201 	mul.w	r2, r2, r1
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	4413      	add	r3, r2
 800550e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	461a      	mov	r2, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	4313      	orrs	r3, r2
 800551a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <get_fat+0xf4>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	e002      	b.n	8005532 <get_fat+0xfa>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005532:	61fb      	str	r3, [r7, #28]
			break;
 8005534:	e0cd      	b.n	80056d2 <get_fat+0x29a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	899b      	ldrh	r3, [r3, #12]
 800553e:	085b      	lsrs	r3, r3, #1
 8005540:	b29b      	uxth	r3, r3
 8005542:	4619      	mov	r1, r3
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	fbb3 f3f1 	udiv	r3, r3, r1
 800554a:	4413      	add	r3, r2
 800554c:	4619      	mov	r1, r3
 800554e:	69b8      	ldr	r0, [r7, #24]
 8005550:	f7ff feb4 	bl	80052bc <move_window>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 80b6 	bne.w	80056c8 <get_fat+0x290>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	005b      	lsls	r3, r3, #1
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	8992      	ldrh	r2, [r2, #12]
 800556a:	fbb3 f0f2 	udiv	r0, r3, r2
 800556e:	fb02 f200 	mul.w	r2, r2, r0
 8005572:	1a9b      	subs	r3, r3, r2
 8005574:	440b      	add	r3, r1
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff faac 	bl	8004ad4 <ld_word>
 800557c:	4603      	mov	r3, r0
 800557e:	61fb      	str	r3, [r7, #28]
			break;
 8005580:	e0a7      	b.n	80056d2 <get_fat+0x29a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	899b      	ldrh	r3, [r3, #12]
 800558a:	089b      	lsrs	r3, r3, #2
 800558c:	b29b      	uxth	r3, r3
 800558e:	4619      	mov	r1, r3
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	fbb3 f3f1 	udiv	r3, r3, r1
 8005596:	4413      	add	r3, r2
 8005598:	4619      	mov	r1, r3
 800559a:	69b8      	ldr	r0, [r7, #24]
 800559c:	f7ff fe8e 	bl	80052bc <move_window>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f040 8092 	bne.w	80056cc <get_fat+0x294>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	8992      	ldrh	r2, [r2, #12]
 80055b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80055ba:	fb02 f200 	mul.w	r2, r2, r0
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	440b      	add	r3, r1
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fa9e 	bl	8004b04 <ld_dword>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80055ce:	61fb      	str	r3, [r7, #28]
			break;
 80055d0:	e07f      	b.n	80056d2 <get_fat+0x29a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	d06e      	beq.n	80056ba <get_fat+0x282>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80055ec:	f112 34ff 	adds.w	r4, r2, #4294967295
 80055f0:	f143 35ff 	adc.w	r5, r3, #4294967295
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	899b      	ldrh	r3, [r3, #12]
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	4620      	mov	r0, r4
 8005600:	4629      	mov	r1, r5
 8005602:	f7fb fb23 	bl	8000c4c <__aeabi_uldivmod>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	895b      	ldrh	r3, [r3, #10]
 800560e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005612:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	79db      	ldrb	r3, [r3, #7]
 8005618:	2b02      	cmp	r3, #2
 800561a:	d10e      	bne.n	800563a <get_fat+0x202>
					if (cofs <= clen) {
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	429a      	cmp	r2, r3
 8005622:	d80a      	bhi.n	800563a <get_fat+0x202>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	429a      	cmp	r2, r3
 800562a:	d002      	beq.n	8005632 <get_fat+0x1fa>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	3301      	adds	r3, #1
 8005630:	e001      	b.n	8005636 <get_fat+0x1fe>
 8005632:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005636:	61fb      	str	r3, [r7, #28]
						break;
 8005638:	e04b      	b.n	80056d2 <get_fat+0x29a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	79db      	ldrb	r3, [r3, #7]
 800563e:	2b03      	cmp	r3, #3
 8005640:	d108      	bne.n	8005654 <get_fat+0x21c>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	429a      	cmp	r2, r3
 800564a:	d203      	bcs.n	8005654 <get_fat+0x21c>
					val = clst + 1; 	/* Generate the value */
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	3301      	adds	r3, #1
 8005650:	61fb      	str	r3, [r7, #28]
					break;
 8005652:	e03e      	b.n	80056d2 <get_fat+0x29a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	79db      	ldrb	r3, [r3, #7]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d02e      	beq.n	80056ba <get_fat+0x282>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <get_fat+0x234>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8005664:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005668:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800566a:	e032      	b.n	80056d2 <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	899b      	ldrh	r3, [r3, #12]
 8005674:	089b      	lsrs	r3, r3, #2
 8005676:	b29b      	uxth	r3, r3
 8005678:	4619      	mov	r1, r3
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005680:	4413      	add	r3, r2
 8005682:	4619      	mov	r1, r3
 8005684:	69b8      	ldr	r0, [r7, #24]
 8005686:	f7ff fe19 	bl	80052bc <move_window>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d11f      	bne.n	80056d0 <get_fat+0x298>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	8992      	ldrh	r2, [r2, #12]
 800569e:	fbb3 f0f2 	udiv	r0, r3, r2
 80056a2:	fb02 f200 	mul.w	r2, r2, r0
 80056a6:	1a9b      	subs	r3, r3, r2
 80056a8:	440b      	add	r3, r1
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fa2a 	bl	8004b04 <ld_dword>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056b6:	61fb      	str	r3, [r7, #28]
					break;
 80056b8:	e00b      	b.n	80056d2 <get_fat+0x29a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80056ba:	2301      	movs	r3, #1
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	e008      	b.n	80056d2 <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056c0:	bf00      	nop
 80056c2:	e006      	b.n	80056d2 <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056c4:	bf00      	nop
 80056c6:	e004      	b.n	80056d2 <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80056c8:	bf00      	nop
 80056ca:	e002      	b.n	80056d2 <get_fat+0x29a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80056cc:	bf00      	nop
 80056ce:	e000      	b.n	80056d2 <get_fat+0x29a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80056d0:	bf00      	nop
		}
	}

	return val;
 80056d2:	69fb      	ldr	r3, [r7, #28]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3720      	adds	r7, #32
 80056d8:	46bd      	mov	sp, r7
 80056da:	bdb0      	pop	{r4, r5, r7, pc}

080056dc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80056dc:	b590      	push	{r4, r7, lr}
 80056de:	b089      	sub	sp, #36	; 0x24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80056e8:	2302      	movs	r3, #2
 80056ea:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	f240 8106 	bls.w	8005900 <put_fat+0x224>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	f080 8100 	bcs.w	8005900 <put_fat+0x224>
		switch (fs->fs_type) {
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b04      	cmp	r3, #4
 8005706:	f300 8104 	bgt.w	8005912 <put_fat+0x236>
 800570a:	2b03      	cmp	r3, #3
 800570c:	f280 80b3 	bge.w	8005876 <put_fat+0x19a>
 8005710:	2b01      	cmp	r3, #1
 8005712:	d003      	beq.n	800571c <put_fat+0x40>
 8005714:	2b02      	cmp	r3, #2
 8005716:	f000 8083 	beq.w	8005820 <put_fat+0x144>
 800571a:	e0fa      	b.n	8005912 <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	085b      	lsrs	r3, r3, #1
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	4413      	add	r3, r2
 8005728:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	899b      	ldrh	r3, [r3, #12]
 8005732:	4619      	mov	r1, r3
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	fbb3 f3f1 	udiv	r3, r3, r1
 800573a:	4413      	add	r3, r2
 800573c:	4619      	mov	r1, r3
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7ff fdbc 	bl	80052bc <move_window>
 8005744:	4603      	mov	r3, r0
 8005746:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005748:	7ffb      	ldrb	r3, [r7, #31]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f040 80da 	bne.w	8005904 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	61ba      	str	r2, [r7, #24]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	8992      	ldrh	r2, [r2, #12]
 8005760:	fbb3 f0f2 	udiv	r0, r3, r2
 8005764:	fb02 f200 	mul.w	r2, r2, r0
 8005768:	1a9b      	subs	r3, r3, r2
 800576a:	440b      	add	r3, r1
 800576c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00d      	beq.n	8005794 <put_fat+0xb8>
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	b25b      	sxtb	r3, r3
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	b25a      	sxtb	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	b2db      	uxtb	r3, r3
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	b25b      	sxtb	r3, r3
 800578c:	4313      	orrs	r3, r2
 800578e:	b25b      	sxtb	r3, r3
 8005790:	b2db      	uxtb	r3, r3
 8005792:	e001      	b.n	8005798 <put_fat+0xbc>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	b2db      	uxtb	r3, r3
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2201      	movs	r2, #1
 80057a0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	899b      	ldrh	r3, [r3, #12]
 80057aa:	4619      	mov	r1, r3
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80057b2:	4413      	add	r3, r2
 80057b4:	4619      	mov	r1, r3
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f7ff fd80 	bl	80052bc <move_window>
 80057bc:	4603      	mov	r3, r0
 80057be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80057c0:	7ffb      	ldrb	r3, [r7, #31]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f040 80a0 	bne.w	8005908 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	899b      	ldrh	r3, [r3, #12]
 80057d2:	461a      	mov	r2, r3
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80057da:	fb02 f200 	mul.w	r2, r2, r0
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	440b      	add	r3, r1
 80057e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <put_fat+0x11a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	091b      	lsrs	r3, r3, #4
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	e00e      	b.n	8005814 <put_fat+0x138>
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	b25b      	sxtb	r3, r3
 80057fc:	f023 030f 	bic.w	r3, r3, #15
 8005800:	b25a      	sxtb	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	0a1b      	lsrs	r3, r3, #8
 8005806:	b25b      	sxtb	r3, r3
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	b25b      	sxtb	r3, r3
 800580e:	4313      	orrs	r3, r2
 8005810:	b25b      	sxtb	r3, r3
 8005812:	b2db      	uxtb	r3, r3
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	70da      	strb	r2, [r3, #3]
			break;
 800581e:	e078      	b.n	8005912 <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	899b      	ldrh	r3, [r3, #12]
 8005828:	085b      	lsrs	r3, r3, #1
 800582a:	b29b      	uxth	r3, r3
 800582c:	4619      	mov	r1, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	fbb3 f3f1 	udiv	r3, r3, r1
 8005834:	4413      	add	r3, r2
 8005836:	4619      	mov	r1, r3
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f7ff fd3f 	bl	80052bc <move_window>
 800583e:	4603      	mov	r3, r0
 8005840:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005842:	7ffb      	ldrb	r3, [r7, #31]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d161      	bne.n	800590c <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	8992      	ldrh	r2, [r2, #12]
 8005856:	fbb3 f0f2 	udiv	r0, r3, r2
 800585a:	fb02 f200 	mul.w	r2, r2, r0
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	440b      	add	r3, r1
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	b292      	uxth	r2, r2
 8005866:	4611      	mov	r1, r2
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fa29 	bl	8004cc0 <st_word>
			fs->wflag = 1;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	70da      	strb	r2, [r3, #3]
			break;
 8005874:	e04d      	b.n	8005912 <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	899b      	ldrh	r3, [r3, #12]
 800587e:	089b      	lsrs	r3, r3, #2
 8005880:	b29b      	uxth	r3, r3
 8005882:	4619      	mov	r1, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	fbb3 f3f1 	udiv	r3, r3, r1
 800588a:	4413      	add	r3, r2
 800588c:	4619      	mov	r1, r3
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f7ff fd14 	bl	80052bc <move_window>
 8005894:	4603      	mov	r3, r0
 8005896:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005898:	7ffb      	ldrb	r3, [r7, #31]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d138      	bne.n	8005910 <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d017      	beq.n	80058d6 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	8992      	ldrh	r2, [r2, #12]
 80058ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80058be:	fb02 f200 	mul.w	r2, r2, r0
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	440b      	add	r3, r1
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff f91c 	bl	8004b04 <ld_dword>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80058d2:	4323      	orrs	r3, r4
 80058d4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	8992      	ldrh	r2, [r2, #12]
 80058e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80058e8:	fb02 f200 	mul.w	r2, r2, r0
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	440b      	add	r3, r1
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff f9ff 	bl	8004cf6 <st_dword>
			fs->wflag = 1;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	70da      	strb	r2, [r3, #3]
			break;
 80058fe:	e008      	b.n	8005912 <put_fat+0x236>
		}
	}
 8005900:	bf00      	nop
 8005902:	e006      	b.n	8005912 <put_fat+0x236>
			if (res != FR_OK) break;
 8005904:	bf00      	nop
 8005906:	e004      	b.n	8005912 <put_fat+0x236>
			if (res != FR_OK) break;
 8005908:	bf00      	nop
 800590a:	e002      	b.n	8005912 <put_fat+0x236>
			if (res != FR_OK) break;
 800590c:	bf00      	nop
 800590e:	e000      	b.n	8005912 <put_fat+0x236>
			if (res != FR_OK) break;
 8005910:	bf00      	nop
	return res;
 8005912:	7ffb      	ldrb	r3, [r7, #31]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3724      	adds	r7, #36	; 0x24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd90      	pop	{r4, r7, pc}

0800591c <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08a      	sub	sp, #40	; 0x28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	3b02      	subs	r3, #2
 800592c:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	3b02      	subs	r3, #2
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	429a      	cmp	r2, r3
 8005938:	d301      	bcc.n	800593e <find_bitmap+0x22>
 800593a:	2300      	movs	r3, #0
 800593c:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	61fb      	str	r3, [r7, #28]
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	08db      	lsrs	r3, r3, #3
 8005952:	68f9      	ldr	r1, [r7, #12]
 8005954:	8989      	ldrh	r1, [r1, #12]
 8005956:	fbb3 f3f1 	udiv	r3, r3, r1
 800595a:	4413      	add	r3, r2
 800595c:	4619      	mov	r1, r3
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7ff fcac 	bl	80052bc <move_window>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <find_bitmap+0x54>
 800596a:	f04f 33ff 	mov.w	r3, #4294967295
 800596e:	e058      	b.n	8005a22 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	08db      	lsrs	r3, r3, #3
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	8992      	ldrh	r2, [r2, #12]
 8005978:	fbb3 f1f2 	udiv	r1, r3, r2
 800597c:	fb02 f201 	mul.w	r2, r2, r1
 8005980:	1a9b      	subs	r3, r3, r2
 8005982:	623b      	str	r3, [r7, #32]
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	2201      	movs	r2, #1
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	4413      	add	r3, r2
 800599a:	333c      	adds	r3, #60	; 0x3c
 800599c:	781a      	ldrb	r2, [r3, #0]
 800599e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059a2:	4013      	ands	r3, r2
 80059a4:	74fb      	strb	r3, [r7, #19]
 80059a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	3301      	adds	r3, #1
 80059b4:	61fb      	str	r3, [r7, #28]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	3b02      	subs	r3, #2
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d307      	bcc.n	80059d2 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 80059c2:	2300      	movs	r3, #0
 80059c4:	61fb      	str	r3, [r7, #28]
 80059c6:	2300      	movs	r3, #0
 80059c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	899b      	ldrh	r3, [r3, #12]
 80059d0:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 80059d2:	7cfb      	ldrb	r3, [r7, #19]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	3301      	adds	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d106      	bne.n	80059f4 <find_bitmap+0xd8>
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	3302      	adds	r3, #2
 80059ea:	e01a      	b.n	8005a22 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	61bb      	str	r3, [r7, #24]
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d101      	bne.n	8005a00 <find_bitmap+0xe4>
 80059fc:	2300      	movs	r3, #0
 80059fe:	e010      	b.n	8005a22 <find_bitmap+0x106>
			} while (bm);
 8005a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1c5      	bne.n	8005994 <find_bitmap+0x78>
			bm = 1;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	3301      	adds	r3, #1
 8005a12:	623b      	str	r3, [r7, #32]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	899b      	ldrh	r3, [r3, #12]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d3b9      	bcc.n	8005994 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8005a20:	e793      	b.n	800594a <find_bitmap+0x2e>
	}
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3728      	adds	r7, #40	; 0x28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b088      	sub	sp, #32
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	607a      	str	r2, [r7, #4]
 8005a36:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	3b02      	subs	r3, #2
 8005a3c:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	08db      	lsrs	r3, r3, #3
 8005a46:	68f9      	ldr	r1, [r7, #12]
 8005a48:	8989      	ldrh	r1, [r1, #12]
 8005a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a4e:	4413      	add	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	08db      	lsrs	r3, r3, #3
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	8992      	ldrh	r2, [r2, #12]
 8005a5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a5e:	fb02 f201 	mul.w	r2, r2, r1
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	617a      	str	r2, [r7, #20]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f7ff fc1d 	bl	80052bc <move_window>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <change_bitmap+0x62>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e03f      	b.n	8005b0c <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	4413      	add	r3, r2
 8005a92:	333c      	adds	r3, #60	; 0x3c
 8005a94:	781a      	ldrb	r2, [r3, #0]
 8005a96:	7ffb      	ldrb	r3, [r7, #31]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d101      	bne.n	8005ab2 <change_bitmap+0x88>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e02c      	b.n	8005b0c <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	333c      	adds	r3, #60	; 0x3c
 8005aba:	781a      	ldrb	r2, [r3, #0]
 8005abc:	7ffb      	ldrb	r3, [r7, #31]
 8005abe:	4053      	eors	r3, r2
 8005ac0:	b2d9      	uxtb	r1, r3
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	333c      	adds	r3, #60	; 0x3c
 8005aca:	460a      	mov	r2, r1
 8005acc:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	607b      	str	r3, [r7, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <change_bitmap+0xba>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	e013      	b.n	8005b0c <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8005ae4:	7ffb      	ldrb	r3, [r7, #31]
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	77fb      	strb	r3, [r7, #31]
 8005aea:	7ffb      	ldrb	r3, [r7, #31]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1cd      	bne.n	8005a8c <change_bitmap+0x62>
			bm = 1;
 8005af0:	2301      	movs	r3, #1
 8005af2:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	3301      	adds	r3, #1
 8005af8:	61bb      	str	r3, [r7, #24]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	899b      	ldrh	r3, [r3, #12]
 8005afe:	461a      	mov	r2, r3
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d3c2      	bcc.n	8005a8c <change_bitmap+0x62>
		i = 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8005b0a:	e7b3      	b.n	8005a74 <change_bitmap+0x4a>
	}
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	79db      	ldrb	r3, [r3, #7]
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d121      	bne.n	8005b68 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	e014      	b.n	8005b5c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	6979      	ldr	r1, [r7, #20]
 8005b3e:	f7ff fdcd 	bl	80056dc <put_fat>
 8005b42:	4603      	mov	r3, r0
 8005b44:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <fill_first_frag+0x3c>
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	e00c      	b.n	8005b6a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	3301      	adds	r3, #1
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1e7      	bne.n	8005b32 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b086      	sub	sp, #24
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8005b7e:	e020      	b.n	8005bc2 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	1c59      	adds	r1, r3, #1
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d905      	bls.n	8005ba2 <fill_last_frag+0x30>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	3302      	adds	r3, #2
 8005ba0:	e000      	b.n	8005ba4 <fill_last_frag+0x32>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	f7ff fd99 	bl	80056dc <put_fat>
 8005baa:	4603      	mov	r3, r0
 8005bac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8005bae:	7dfb      	ldrb	r3, [r7, #23]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <fill_last_frag+0x46>
 8005bb4:	7dfb      	ldrb	r3, [r7, #23]
 8005bb6:	e009      	b.n	8005bcc <fill_last_frag+0x5a>
		obj->n_frag--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	1e5a      	subs	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1da      	bne.n	8005b80 <fill_last_frag+0xe>
	}
	return FR_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08a      	sub	sp, #40	; 0x28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d904      	bls.n	8005c02 <remove_chain+0x2e>
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d301      	bcc.n	8005c06 <remove_chain+0x32>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e096      	b.n	8005d34 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d014      	beq.n	8005c36 <remove_chain+0x62>
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d103      	bne.n	8005c1c <remove_chain+0x48>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	79db      	ldrb	r3, [r3, #7]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d00c      	beq.n	8005c36 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	69b8      	ldr	r0, [r7, #24]
 8005c24:	f7ff fd5a 	bl	80056dc <put_fat>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005c2c:	7ffb      	ldrb	r3, [r7, #31]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <remove_chain+0x62>
 8005c32:	7ffb      	ldrb	r3, [r7, #31]
 8005c34:	e07e      	b.n	8005d34 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f7ff fbfd 	bl	8005438 <get_fat>
 8005c3e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d055      	beq.n	8005cf2 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <remove_chain+0x7c>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e071      	b.n	8005d34 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c56:	d101      	bne.n	8005c5c <remove_chain+0x88>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e06b      	b.n	8005d34 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d00b      	beq.n	8005c7c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005c64:	2200      	movs	r2, #0
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	69b8      	ldr	r0, [r7, #24]
 8005c6a:	f7ff fd37 	bl	80056dc <put_fat>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005c72:	7ffb      	ldrb	r3, [r7, #31]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <remove_chain+0xa8>
 8005c78:	7ffb      	ldrb	r3, [r7, #31]
 8005c7a:	e05b      	b.n	8005d34 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	69da      	ldr	r2, [r3, #28]
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	3b02      	subs	r3, #2
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d20b      	bcs.n	8005ca2 <remove_chain+0xce>
			fs->free_clst++;
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	791b      	ldrb	r3, [r3, #4]
 8005c98:	f043 0301 	orr.w	r3, r3, #1
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d102      	bne.n	8005cb2 <remove_chain+0xde>
			ecl = nxt;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	623b      	str	r3, [r7, #32]
 8005cb0:	e017      	b.n	8005ce2 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d10f      	bne.n	8005cda <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8005cba:	6a3a      	ldr	r2, [r7, #32]
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cc6:	69b8      	ldr	r0, [r7, #24]
 8005cc8:	f7ff feaf 	bl	8005a2a <change_bitmap>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8005cd0:	7ffb      	ldrb	r3, [r7, #31]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <remove_chain+0x106>
 8005cd6:	7ffb      	ldrb	r3, [r7, #31]
 8005cd8:	e02c      	b.n	8005d34 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	623b      	str	r3, [r7, #32]
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d3a2      	bcc.n	8005c36 <remove_chain+0x62>
 8005cf0:	e000      	b.n	8005cf4 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8005cf2:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d11a      	bne.n	8005d32 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d103      	bne.n	8005d0a <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	71da      	strb	r2, [r3, #7]
 8005d08:	e013      	b.n	8005d32 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	79db      	ldrb	r3, [r3, #7]
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d10f      	bne.n	8005d32 <remove_chain+0x15e>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d30a      	bcc.n	8005d32 <remove_chain+0x15e>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	4413      	add	r3, r2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d802      	bhi.n	8005d32 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3728      	adds	r7, #40	; 0x28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10d      	bne.n	8005d6e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <create_chain+0x2c>
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d31b      	bcc.n	8005da0 <create_chain+0x64>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	e018      	b.n	8005da0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005d6e:	6839      	ldr	r1, [r7, #0]
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff fb61 	bl	8005438 <get_fat>
 8005d76:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d801      	bhi.n	8005d82 <create_chain+0x46>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e0d9      	b.n	8005f36 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d88:	d101      	bne.n	8005d8e <create_chain+0x52>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	e0d3      	b.n	8005f36 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d201      	bcs.n	8005d9c <create_chain+0x60>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	e0cc      	b.n	8005f36 <create_chain+0x1fa>
		scl = clst;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d164      	bne.n	8005e72 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8005da8:	2201      	movs	r2, #1
 8005daa:	69b9      	ldr	r1, [r7, #24]
 8005dac:	6938      	ldr	r0, [r7, #16]
 8005dae:	f7ff fdb5 	bl	800591c <find_bitmap>
 8005db2:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <create_chain+0x86>
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc0:	d101      	bne.n	8005dc6 <create_chain+0x8a>
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	e0b7      	b.n	8005f36 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	2201      	movs	r2, #1
 8005dca:	69f9      	ldr	r1, [r7, #28]
 8005dcc:	6938      	ldr	r0, [r7, #16]
 8005dce:	f7ff fe2c 	bl	8005a2a <change_bitmap>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d101      	bne.n	8005de0 <create_chain+0xa4>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e0aa      	b.n	8005f36 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d102      	bne.n	8005dec <create_chain+0xb0>
 8005de6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dea:	e0a4      	b.n	8005f36 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d103      	bne.n	8005dfa <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2202      	movs	r2, #2
 8005df6:	71da      	strb	r2, [r3, #7]
 8005df8:	e011      	b.n	8005e1e <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	79db      	ldrb	r3, [r3, #7]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d10d      	bne.n	8005e1e <create_chain+0xe2>
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	3301      	adds	r3, #1
 8005e06:	69fa      	ldr	r2, [r7, #28]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d008      	beq.n	8005e1e <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	1ad2      	subs	r2, r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2203      	movs	r2, #3
 8005e1c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	79db      	ldrb	r3, [r3, #7]
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d064      	beq.n	8005ef0 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d10b      	bne.n	8005e48 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <create_chain+0x104>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	e000      	b.n	8005e42 <create_chain+0x106>
 8005e40:	2302      	movs	r3, #2
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	61d3      	str	r3, [r2, #28]
 8005e46:	e053      	b.n	8005ef0 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d102      	bne.n	8005e56 <create_chain+0x11a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	6839      	ldr	r1, [r7, #0]
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff fe89 	bl	8005b72 <fill_last_frag>
 8005e60:	4603      	mov	r3, r0
 8005e62:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d142      	bne.n	8005ef0 <create_chain+0x1b4>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	61da      	str	r2, [r3, #28]
 8005e70:	e03e      	b.n	8005ef0 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d307      	bcc.n	8005e96 <create_chain+0x15a>
				ncl = 2;
 8005e86:	2302      	movs	r3, #2
 8005e88:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d901      	bls.n	8005e96 <create_chain+0x15a>
 8005e92:	2300      	movs	r3, #0
 8005e94:	e04f      	b.n	8005f36 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005e96:	69f9      	ldr	r1, [r7, #28]
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff facd 	bl	8005438 <get_fat>
 8005e9e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00e      	beq.n	8005ec4 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d003      	beq.n	8005eb4 <create_chain+0x178>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb2:	d101      	bne.n	8005eb8 <create_chain+0x17c>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	e03e      	b.n	8005f36 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d1da      	bne.n	8005e76 <create_chain+0x13a>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e038      	b.n	8005f36 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8005ec4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eca:	69f9      	ldr	r1, [r7, #28]
 8005ecc:	6938      	ldr	r0, [r7, #16]
 8005ece:	f7ff fc05 	bl	80056dc <put_fat>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005ed6:	7dfb      	ldrb	r3, [r7, #23]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d109      	bne.n	8005ef0 <create_chain+0x1b4>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d006      	beq.n	8005ef0 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	6938      	ldr	r0, [r7, #16]
 8005ee8:	f7ff fbf8 	bl	80056dc <put_fat>
 8005eec:	4603      	mov	r3, r0
 8005eee:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d116      	bne.n	8005f24 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	69da      	ldr	r2, [r3, #28]
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	3b02      	subs	r3, #2
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d804      	bhi.n	8005f14 <create_chain+0x1d8>
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	1e5a      	subs	r2, r3, #1
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	791b      	ldrb	r3, [r3, #4]
 8005f18:	f043 0301 	orr.w	r3, r3, #1
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	711a      	strb	r2, [r3, #4]
 8005f22:	e007      	b.n	8005f34 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005f24:	7dfb      	ldrb	r3, [r7, #23]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d102      	bne.n	8005f30 <create_chain+0x1f4>
 8005f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2e:	e000      	b.n	8005f32 <create_chain+0x1f6>
 8005f30:	2301      	movs	r3, #1
 8005f32:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005f34:	69fb      	ldr	r3, [r7, #28]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3720      	adds	r7, #32
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b088      	sub	sp, #32
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	60f8      	str	r0, [r7, #12]
 8005f46:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f54:	3304      	adds	r3, #4
 8005f56:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	899b      	ldrh	r3, [r3, #12]
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f66:	f7fa fe71 	bl	8000c4c <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4610      	mov	r0, r2
 8005f70:	4619      	mov	r1, r3
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	895b      	ldrh	r3, [r3, #10]
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	f7fa fe66 	bl	8000c4c <__aeabi_uldivmod>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4613      	mov	r3, r2
 8005f86:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	1d1a      	adds	r2, r3, #4
 8005f8c:	61ba      	str	r2, [r7, #24]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <clmt_clust+0x5e>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e010      	b.n	8005fbe <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d307      	bcc.n	8005fb4 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005fb2:	e7e9      	b.n	8005f88 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 8005fb4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	4413      	add	r3, r2
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3720      	adds	r7, #32
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b086      	sub	sp, #24
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d102      	bne.n	8005fe4 <dir_sdi+0x1e>
 8005fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe2:	e001      	b.n	8005fe8 <dir_sdi+0x22>
 8005fe4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d904      	bls.n	8005ff8 <dir_sdi+0x32>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <dir_sdi+0x36>
		return FR_INT_ERR;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	e074      	b.n	80060e6 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d109      	bne.n	8006022 <dir_sdi+0x5c>
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d905      	bls.n	8006022 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10c      	bne.n	8006042 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	095b      	lsrs	r3, r3, #5
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	8912      	ldrh	r2, [r2, #8]
 8006030:	4293      	cmp	r3, r2
 8006032:	d301      	bcc.n	8006038 <dir_sdi+0x72>
 8006034:	2302      	movs	r3, #2
 8006036:	e056      	b.n	80060e6 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	639a      	str	r2, [r3, #56]	; 0x38
 8006040:	e02d      	b.n	800609e <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	895b      	ldrh	r3, [r3, #10]
 8006046:	461a      	mov	r2, r3
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	899b      	ldrh	r3, [r3, #12]
 800604c:	fb03 f302 	mul.w	r3, r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006052:	e019      	b.n	8006088 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6979      	ldr	r1, [r7, #20]
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff f9ed 	bl	8005438 <get_fat>
 800605e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006066:	d101      	bne.n	800606c <dir_sdi+0xa6>
 8006068:	2301      	movs	r3, #1
 800606a:	e03c      	b.n	80060e6 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d904      	bls.n	800607c <dir_sdi+0xb6>
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	429a      	cmp	r2, r3
 800607a:	d301      	bcc.n	8006080 <dir_sdi+0xba>
 800607c:	2302      	movs	r3, #2
 800607e:	e032      	b.n	80060e6 <dir_sdi+0x120>
			ofs -= csz;
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	429a      	cmp	r2, r3
 800608e:	d2e1      	bcs.n	8006054 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 8006090:	6979      	ldr	r1, [r7, #20]
 8006092:	6938      	ldr	r0, [r7, #16]
 8006094:	f7ff f9b0 	bl	80053f8 <clust2sect>
 8006098:	4602      	mov	r2, r0
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <dir_sdi+0xea>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e01a      	b.n	80060e6 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	899b      	ldrh	r3, [r3, #12]
 80060b8:	4619      	mov	r1, r3
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80060c0:	441a      	add	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	899b      	ldrh	r3, [r3, #12]
 80060d0:	461a      	mov	r2, r3
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80060d8:	fb02 f200 	mul.w	r2, r2, r0
 80060dc:	1a9b      	subs	r3, r3, r2
 80060de:	18ca      	adds	r2, r1, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b086      	sub	sp, #24
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006102:	3320      	adds	r3, #32
 8006104:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00b      	beq.n	8006126 <dir_next+0x38>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b04      	cmp	r3, #4
 8006114:	d102      	bne.n	800611c <dir_next+0x2e>
 8006116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800611a:	e001      	b.n	8006120 <dir_next+0x32>
 800611c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	429a      	cmp	r2, r3
 8006124:	d801      	bhi.n	800612a <dir_next+0x3c>
 8006126:	2304      	movs	r3, #4
 8006128:	e0c3      	b.n	80062b2 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	899b      	ldrh	r3, [r3, #12]
 800612e:	461a      	mov	r2, r3
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	fbb3 f1f2 	udiv	r1, r3, r2
 8006136:	fb02 f201 	mul.w	r2, r2, r1
 800613a:	1a9b      	subs	r3, r3, r2
 800613c:	2b00      	cmp	r3, #0
 800613e:	f040 80a5 	bne.w	800628c <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10b      	bne.n	800616c <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	8912      	ldrh	r2, [r2, #8]
 800615c:	4293      	cmp	r3, r2
 800615e:	f0c0 8095 	bcc.w	800628c <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	639a      	str	r2, [r3, #56]	; 0x38
 8006168:	2304      	movs	r3, #4
 800616a:	e0a2      	b.n	80062b2 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	899b      	ldrh	r3, [r3, #12]
 8006170:	461a      	mov	r2, r3
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	fbb3 f3f2 	udiv	r3, r3, r2
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	8952      	ldrh	r2, [r2, #10]
 800617c:	3a01      	subs	r2, #1
 800617e:	4013      	ands	r3, r2
 8006180:	2b00      	cmp	r3, #0
 8006182:	f040 8083 	bne.w	800628c <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618c:	4619      	mov	r1, r3
 800618e:	4610      	mov	r0, r2
 8006190:	f7ff f952 	bl	8005438 <get_fat>
 8006194:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d801      	bhi.n	80061a0 <dir_next+0xb2>
 800619c:	2302      	movs	r3, #2
 800619e:	e088      	b.n	80062b2 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a6:	d101      	bne.n	80061ac <dir_next+0xbe>
 80061a8:	2301      	movs	r3, #1
 80061aa:	e082      	b.n	80062b2 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d360      	bcc.n	8006278 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d104      	bne.n	80061c6 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38
 80061c2:	2304      	movs	r3, #4
 80061c4:	e075      	b.n	80062b2 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061cc:	4619      	mov	r1, r3
 80061ce:	4610      	mov	r0, r2
 80061d0:	f7ff fdb4 	bl	8005d3c <create_chain>
 80061d4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <dir_next+0xf2>
 80061dc:	2307      	movs	r3, #7
 80061de:	e068      	b.n	80062b2 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <dir_next+0xfc>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e063      	b.n	80062b2 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f0:	d101      	bne.n	80061f6 <dir_next+0x108>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e05d      	b.n	80062b2 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	79db      	ldrb	r3, [r3, #7]
 80061fa:	f043 0304 	orr.w	r3, r3, #4
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff f815 	bl	8005234 <sync_window>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <dir_next+0x126>
 8006210:	2301      	movs	r3, #1
 8006212:	e04e      	b.n	80062b2 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	899b      	ldrh	r3, [r3, #12]
 800621e:	461a      	mov	r2, r3
 8006220:	2100      	movs	r1, #0
 8006222:	f7fe fe3d 	bl	8004ea0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006226:	2300      	movs	r3, #0
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	6979      	ldr	r1, [r7, #20]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff f8e3 	bl	80053f8 <clust2sect>
 8006232:	4602      	mov	r2, r0
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	639a      	str	r2, [r3, #56]	; 0x38
 8006238:	e012      	b.n	8006260 <dir_next+0x172>
						fs->wflag = 1;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7fe fff7 	bl	8005234 <sync_window>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <dir_next+0x162>
 800624c:	2301      	movs	r3, #1
 800624e:	e030      	b.n	80062b2 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	3301      	adds	r3, #1
 8006254:	613b      	str	r3, [r7, #16]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	639a      	str	r2, [r3, #56]	; 0x38
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	895b      	ldrh	r3, [r3, #10]
 8006264:	461a      	mov	r2, r3
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	4293      	cmp	r3, r2
 800626a:	d3e6      	bcc.n	800623a <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	1ad2      	subs	r2, r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800627e:	6979      	ldr	r1, [r7, #20]
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff f8b9 	bl	80053f8 <clust2sect>
 8006286:	4602      	mov	r2, r0
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	899b      	ldrh	r3, [r3, #12]
 800629c:	461a      	mov	r2, r3
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80062a4:	fb02 f200 	mul.w	r2, r2, r0
 80062a8:	1a9b      	subs	r3, r3, r2
 80062aa:	18ca      	adds	r2, r1, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b086      	sub	sp, #24
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80062ca:	2100      	movs	r1, #0
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff fe7a 	bl	8005fc6 <dir_sdi>
 80062d2:	4603      	mov	r3, r0
 80062d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d140      	bne.n	800635e <dir_alloc+0xa4>
		n = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	4619      	mov	r1, r3
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f7fe ffe8 	bl	80052bc <move_window>
 80062ec:	4603      	mov	r3, r0
 80062ee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80062f0:	7dfb      	ldrb	r3, [r7, #23]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d132      	bne.n	800635c <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d108      	bne.n	8006310 <dir_alloc+0x56>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	b25b      	sxtb	r3, r3
 8006306:	43db      	mvns	r3, r3
 8006308:	b2db      	uxtb	r3, r3
 800630a:	09db      	lsrs	r3, r3, #7
 800630c:	b2db      	uxtb	r3, r3
 800630e:	e00f      	b.n	8006330 <dir_alloc+0x76>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2be5      	cmp	r3, #229	; 0xe5
 8006318:	d004      	beq.n	8006324 <dir_alloc+0x6a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <dir_alloc+0x6e>
 8006324:	2301      	movs	r3, #1
 8006326:	e000      	b.n	800632a <dir_alloc+0x70>
 8006328:	2300      	movs	r3, #0
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d007      	beq.n	8006344 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	3301      	adds	r3, #1
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d102      	bne.n	8006348 <dir_alloc+0x8e>
 8006342:	e00c      	b.n	800635e <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006344:	2300      	movs	r3, #0
 8006346:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006348:	2101      	movs	r1, #1
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff fecf 	bl	80060ee <dir_next>
 8006350:	4603      	mov	r3, r0
 8006352:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0c2      	beq.n	80062e0 <dir_alloc+0x26>
 800635a:	e000      	b.n	800635e <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800635c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800635e:	7dfb      	ldrb	r3, [r7, #23]
 8006360:	2b04      	cmp	r3, #4
 8006362:	d101      	bne.n	8006368 <dir_alloc+0xae>
 8006364:	2307      	movs	r3, #7
 8006366:	75fb      	strb	r3, [r7, #23]
	return res;
 8006368:	7dfb      	ldrb	r3, [r7, #23]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	331a      	adds	r3, #26
 8006380:	4618      	mov	r0, r3
 8006382:	f7fe fba7 	bl	8004ad4 <ld_word>
 8006386:	4603      	mov	r3, r0
 8006388:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b03      	cmp	r3, #3
 8006390:	d109      	bne.n	80063a6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	3314      	adds	r3, #20
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe fb9c 	bl	8004ad4 <ld_word>
 800639c:	4603      	mov	r3, r0
 800639e:	041b      	lsls	r3, r3, #16
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80063a6:	68fb      	ldr	r3, [r7, #12]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	331a      	adds	r3, #26
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	b292      	uxth	r2, r2
 80063c4:	4611      	mov	r1, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fc7a 	bl	8004cc0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d109      	bne.n	80063e8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f103 0214 	add.w	r2, r3, #20
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	0c1b      	lsrs	r3, r3, #16
 80063de:	b29b      	uxth	r3, r3
 80063e0:	4619      	mov	r1, r3
 80063e2:	4610      	mov	r0, r2
 80063e4:	f7fe fc6c 	bl	8004cc0 <st_word>
	}
}
 80063e8:	bf00      	nop
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80063f0:	b590      	push	{r4, r7, lr}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	331a      	adds	r3, #26
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe fb68 	bl	8004ad4 <ld_word>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <cmp_lfn+0x1e>
 800640a:	2300      	movs	r3, #0
 800640c:	e059      	b.n	80064c2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006416:	1e5a      	subs	r2, r3, #1
 8006418:	4613      	mov	r3, r2
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006424:	2301      	movs	r3, #1
 8006426:	81fb      	strh	r3, [r7, #14]
 8006428:	2300      	movs	r3, #0
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	e033      	b.n	8006496 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800642e:	4a27      	ldr	r2, [pc, #156]	; (80064cc <cmp_lfn+0xdc>)
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	4413      	add	r3, r2
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	4413      	add	r3, r2
 800643c:	4618      	mov	r0, r3
 800643e:	f7fe fb49 	bl	8004ad4 <ld_word>
 8006442:	4603      	mov	r3, r0
 8006444:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006446:	89fb      	ldrh	r3, [r7, #14]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01a      	beq.n	8006482 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2bfe      	cmp	r3, #254	; 0xfe
 8006450:	d812      	bhi.n	8006478 <cmp_lfn+0x88>
 8006452:	89bb      	ldrh	r3, [r7, #12]
 8006454:	4618      	mov	r0, r3
 8006456:	f002 ff4d 	bl	80092f4 <ff_wtoupper>
 800645a:	4603      	mov	r3, r0
 800645c:	461c      	mov	r4, r3
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	617a      	str	r2, [r7, #20]
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	4413      	add	r3, r2
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f002 ff41 	bl	80092f4 <ff_wtoupper>
 8006472:	4603      	mov	r3, r0
 8006474:	429c      	cmp	r4, r3
 8006476:	d001      	beq.n	800647c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006478:	2300      	movs	r3, #0
 800647a:	e022      	b.n	80064c2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800647c:	89bb      	ldrh	r3, [r7, #12]
 800647e:	81fb      	strh	r3, [r7, #14]
 8006480:	e006      	b.n	8006490 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006482:	89bb      	ldrh	r3, [r7, #12]
 8006484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006488:	4293      	cmp	r3, r2
 800648a:	d001      	beq.n	8006490 <cmp_lfn+0xa0>
 800648c:	2300      	movs	r3, #0
 800648e:	e018      	b.n	80064c2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	3301      	adds	r3, #1
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b0c      	cmp	r3, #12
 800649a:	d9c8      	bls.n	800642e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00b      	beq.n	80064c0 <cmp_lfn+0xd0>
 80064a8:	89fb      	ldrh	r3, [r7, #14]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d008      	beq.n	80064c0 <cmp_lfn+0xd0>
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	4413      	add	r3, r2
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <cmp_lfn+0xd0>
 80064bc:	2300      	movs	r3, #0
 80064be:	e000      	b.n	80064c2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80064c0:	2301      	movs	r3, #1
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd90      	pop	{r4, r7, pc}
 80064ca:	bf00      	nop
 80064cc:	0800c798 	.word	0x0800c798

080064d0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	331a      	adds	r3, #26
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe faf8 	bl	8004ad4 <ld_word>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <pick_lfn+0x1e>
 80064ea:	2300      	movs	r3, #0
 80064ec:	e04d      	b.n	800658a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f6:	1e5a      	subs	r2, r3, #1
 80064f8:	4613      	mov	r3, r2
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006504:	2301      	movs	r3, #1
 8006506:	81fb      	strh	r3, [r7, #14]
 8006508:	2300      	movs	r3, #0
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	e028      	b.n	8006560 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800650e:	4a21      	ldr	r2, [pc, #132]	; (8006594 <pick_lfn+0xc4>)
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4413      	add	r3, r2
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	4413      	add	r3, r2
 800651c:	4618      	mov	r0, r3
 800651e:	f7fe fad9 	bl	8004ad4 <ld_word>
 8006522:	4603      	mov	r3, r0
 8006524:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006526:	89fb      	ldrh	r3, [r7, #14]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00f      	beq.n	800654c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2bfe      	cmp	r3, #254	; 0xfe
 8006530:	d901      	bls.n	8006536 <pick_lfn+0x66>
 8006532:	2300      	movs	r3, #0
 8006534:	e029      	b.n	800658a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006536:	89bb      	ldrh	r3, [r7, #12]
 8006538:	81fb      	strh	r3, [r7, #14]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	617a      	str	r2, [r7, #20]
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	4413      	add	r3, r2
 8006546:	89fa      	ldrh	r2, [r7, #14]
 8006548:	801a      	strh	r2, [r3, #0]
 800654a:	e006      	b.n	800655a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800654c:	89bb      	ldrh	r3, [r7, #12]
 800654e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006552:	4293      	cmp	r3, r2
 8006554:	d001      	beq.n	800655a <pick_lfn+0x8a>
 8006556:	2300      	movs	r3, #0
 8006558:	e017      	b.n	800658a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	3301      	adds	r3, #1
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2b0c      	cmp	r3, #12
 8006564:	d9d3      	bls.n	800650e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2bfe      	cmp	r3, #254	; 0xfe
 8006576:	d901      	bls.n	800657c <pick_lfn+0xac>
 8006578:	2300      	movs	r3, #0
 800657a:	e006      	b.n	800658a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	4413      	add	r3, r2
 8006584:	2200      	movs	r2, #0
 8006586:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8006588:	2301      	movs	r3, #1
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	0800c798 	.word	0x0800c798

08006598 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	4611      	mov	r1, r2
 80065a4:	461a      	mov	r2, r3
 80065a6:	460b      	mov	r3, r1
 80065a8:	71fb      	strb	r3, [r7, #7]
 80065aa:	4613      	mov	r3, r2
 80065ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	330d      	adds	r3, #13
 80065b2:	79ba      	ldrb	r2, [r7, #6]
 80065b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	330b      	adds	r3, #11
 80065ba:	220f      	movs	r2, #15
 80065bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	330c      	adds	r3, #12
 80065c2:	2200      	movs	r2, #0
 80065c4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	331a      	adds	r3, #26
 80065ca:	2100      	movs	r1, #0
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fe fb77 	bl	8004cc0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	1e5a      	subs	r2, r3, #1
 80065d6:	4613      	mov	r3, r2
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80065e2:	2300      	movs	r3, #0
 80065e4:	82fb      	strh	r3, [r7, #22]
 80065e6:	2300      	movs	r3, #0
 80065e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80065ea:	8afb      	ldrh	r3, [r7, #22]
 80065ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d007      	beq.n	8006604 <put_lfn+0x6c>
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	61fa      	str	r2, [r7, #28]
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006604:	4a17      	ldr	r2, [pc, #92]	; (8006664 <put_lfn+0xcc>)
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	4413      	add	r3, r2
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	4413      	add	r3, r2
 8006612:	8afa      	ldrh	r2, [r7, #22]
 8006614:	4611      	mov	r1, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe fb52 	bl	8004cc0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800661c:	8afb      	ldrh	r3, [r7, #22]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d102      	bne.n	8006628 <put_lfn+0x90>
 8006622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006626:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	3301      	adds	r3, #1
 800662c:	61bb      	str	r3, [r7, #24]
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	2b0c      	cmp	r3, #12
 8006632:	d9da      	bls.n	80065ea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006634:	8afb      	ldrh	r3, [r7, #22]
 8006636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800663a:	4293      	cmp	r3, r2
 800663c:	d006      	beq.n	800664c <put_lfn+0xb4>
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4413      	add	r3, r2
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d103      	bne.n	8006654 <put_lfn+0xbc>
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006652:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	79fa      	ldrb	r2, [r7, #7]
 8006658:	701a      	strb	r2, [r3, #0]
}
 800665a:	bf00      	nop
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	0800c798 	.word	0x0800c798

08006668 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08c      	sub	sp, #48	; 0x30
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006676:	220b      	movs	r2, #11
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f7fe fbef 	bl	8004e5e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b05      	cmp	r3, #5
 8006684:	d92b      	bls.n	80066de <gen_numname+0x76>
		sr = seq;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800668a:	e022      	b.n	80066d2 <gen_numname+0x6a>
			wc = *lfn++;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	1c9a      	adds	r2, r3, #2
 8006690:	607a      	str	r2, [r7, #4]
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006696:	2300      	movs	r3, #0
 8006698:	62bb      	str	r3, [r7, #40]	; 0x28
 800669a:	e017      	b.n	80066cc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	005a      	lsls	r2, r3, #1
 80066a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	4413      	add	r3, r2
 80066a8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80066aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80066ac:	085b      	lsrs	r3, r3, #1
 80066ae:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <gen_numname+0x5e>
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80066c0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80066c4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	3301      	adds	r3, #1
 80066ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	2b0f      	cmp	r3, #15
 80066d0:	d9e4      	bls.n	800669c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1d8      	bne.n	800668c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80066de:	2307      	movs	r3, #7
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	3330      	adds	r3, #48	; 0x30
 80066ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80066f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066f6:	2b39      	cmp	r3, #57	; 0x39
 80066f8:	d904      	bls.n	8006704 <gen_numname+0x9c>
 80066fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066fe:	3307      	adds	r3, #7
 8006700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	1e5a      	subs	r2, r3, #1
 8006708:	62ba      	str	r2, [r7, #40]	; 0x28
 800670a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800670e:	4413      	add	r3, r2
 8006710:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006714:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	091b      	lsrs	r3, r3, #4
 800671c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1de      	bne.n	80066e2 <gen_numname+0x7a>
	ns[i] = '~';
 8006724:	f107 0214 	add.w	r2, r7, #20
 8006728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672a:	4413      	add	r3, r2
 800672c:	227e      	movs	r2, #126	; 0x7e
 800672e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006730:	2300      	movs	r3, #0
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
 8006734:	e002      	b.n	800673c <gen_numname+0xd4>
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	3301      	adds	r3, #1
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
 800673c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	429a      	cmp	r2, r3
 8006742:	d205      	bcs.n	8006750 <gen_numname+0xe8>
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	4413      	add	r3, r2
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b20      	cmp	r3, #32
 800674e:	d1f2      	bne.n	8006736 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	2b07      	cmp	r3, #7
 8006754:	d808      	bhi.n	8006768 <gen_numname+0x100>
 8006756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	62ba      	str	r2, [r7, #40]	; 0x28
 800675c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006760:	4413      	add	r3, r2
 8006762:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006766:	e000      	b.n	800676a <gen_numname+0x102>
 8006768:	2120      	movs	r1, #32
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	627a      	str	r2, [r7, #36]	; 0x24
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	460a      	mov	r2, r1
 8006776:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	2b07      	cmp	r3, #7
 800677c:	d9e8      	bls.n	8006750 <gen_numname+0xe8>
}
 800677e:	bf00      	nop
 8006780:	bf00      	nop
 8006782:	3730      	adds	r7, #48	; 0x30
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006794:	230b      	movs	r3, #11
 8006796:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	b2da      	uxtb	r2, r3
 800679c:	0852      	lsrs	r2, r2, #1
 800679e:	01db      	lsls	r3, r3, #7
 80067a0:	4313      	orrs	r3, r2
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	1c59      	adds	r1, r3, #1
 80067a8:	6079      	str	r1, [r7, #4]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	4413      	add	r3, r2
 80067ae:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	60bb      	str	r3, [r7, #8]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1ed      	bne.n	8006798 <sum_sfn+0x10>
	return sum;
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b087      	sub	sp, #28
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3301      	adds	r3, #1
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	3301      	adds	r3, #1
 80067da:	015b      	lsls	r3, r3, #5
 80067dc:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 80067de:	2300      	movs	r3, #0
 80067e0:	827b      	strh	r3, [r7, #18]
 80067e2:	2300      	movs	r3, #0
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	e018      	b.n	800681a <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d103      	bne.n	80067f6 <xdir_sum+0x2c>
			i++;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	3301      	adds	r3, #1
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	e00e      	b.n	8006814 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80067f6:	8a7b      	ldrh	r3, [r7, #18]
 80067f8:	03db      	lsls	r3, r3, #15
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	8a7b      	ldrh	r3, [r7, #18]
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	b29b      	uxth	r3, r3
 8006802:	4413      	add	r3, r2
 8006804:	b29a      	uxth	r2, r3
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	440b      	add	r3, r1
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	4413      	add	r3, r2
 8006812:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	3301      	adds	r3, #1
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	429a      	cmp	r2, r3
 8006820:	d3e2      	bcc.n	80067e8 <xdir_sum+0x1e>
		}
	}
	return sum;
 8006822:	8a7b      	ldrh	r3, [r7, #18]
}
 8006824:	4618      	mov	r0, r3
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800683c:	e01f      	b.n	800687e <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800683e:	89bb      	ldrh	r3, [r7, #12]
 8006840:	4618      	mov	r0, r3
 8006842:	f002 fd57 	bl	80092f4 <ff_wtoupper>
 8006846:	4603      	mov	r3, r0
 8006848:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800684a:	89fb      	ldrh	r3, [r7, #14]
 800684c:	03db      	lsls	r3, r3, #15
 800684e:	b29a      	uxth	r2, r3
 8006850:	89fb      	ldrh	r3, [r7, #14]
 8006852:	085b      	lsrs	r3, r3, #1
 8006854:	b29b      	uxth	r3, r3
 8006856:	4413      	add	r3, r2
 8006858:	b29a      	uxth	r2, r3
 800685a:	89bb      	ldrh	r3, [r7, #12]
 800685c:	b2db      	uxtb	r3, r3
 800685e:	b29b      	uxth	r3, r3
 8006860:	4413      	add	r3, r2
 8006862:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8006864:	89fb      	ldrh	r3, [r7, #14]
 8006866:	03db      	lsls	r3, r3, #15
 8006868:	b29a      	uxth	r2, r3
 800686a:	89fb      	ldrh	r3, [r7, #14]
 800686c:	085b      	lsrs	r3, r3, #1
 800686e:	b29b      	uxth	r3, r3
 8006870:	4413      	add	r3, r2
 8006872:	b29a      	uxth	r2, r3
 8006874:	89bb      	ldrh	r3, [r7, #12]
 8006876:	0a1b      	lsrs	r3, r3, #8
 8006878:	b29b      	uxth	r3, r3
 800687a:	4413      	add	r3, r2
 800687c:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	1c9a      	adds	r2, r3, #2
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	81bb      	strh	r3, [r7, #12]
 8006888:	89bb      	ldrh	r3, [r7, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1d7      	bne.n	800683e <xname_sum+0xe>
	}
	return sum;
 800688e:	89fb      	ldrh	r3, [r7, #14]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8006898:	b590      	push	{r4, r7, lr}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b0:	4619      	mov	r1, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	f7fe fd02 	bl	80052bc <move_window>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <load_xdir+0x2e>
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	e09f      	b.n	8006a06 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b85      	cmp	r3, #133	; 0x85
 80068ce:	d001      	beq.n	80068d4 <load_xdir+0x3c>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e098      	b.n	8006a06 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d8:	2220      	movs	r2, #32
 80068da:	4619      	mov	r1, r3
 80068dc:	6938      	ldr	r0, [r7, #16]
 80068de:	f7fe fabe 	bl	8004e5e <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	3301      	adds	r3, #1
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	3301      	adds	r3, #1
 80068ea:	015b      	lsls	r3, r3, #5
 80068ec:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b5f      	cmp	r3, #95	; 0x5f
 80068f2:	d903      	bls.n	80068fc <load_xdir+0x64>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80068fa:	d901      	bls.n	8006900 <load_xdir+0x68>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e082      	b.n	8006a06 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8006900:	2100      	movs	r1, #0
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff fbf3 	bl	80060ee <dir_next>
 8006908:	4603      	mov	r3, r0
 800690a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <load_xdir+0x7e>
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	e077      	b.n	8006a06 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	4619      	mov	r1, r3
 8006920:	4610      	mov	r0, r2
 8006922:	f7fe fccb 	bl	80052bc <move_window>
 8006926:	4603      	mov	r3, r0
 8006928:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800692a:	7bfb      	ldrb	r3, [r7, #15]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <load_xdir+0x9c>
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	e068      	b.n	8006a06 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2bc0      	cmp	r3, #192	; 0xc0
 800693c:	d001      	beq.n	8006942 <load_xdir+0xaa>
 800693e:	2302      	movs	r3, #2
 8006940:	e061      	b.n	8006a06 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f103 0020 	add.w	r0, r3, #32
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694c:	2220      	movs	r2, #32
 800694e:	4619      	mov	r1, r3
 8006950:	f7fe fa85 	bl	8004e5e <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	3323      	adds	r3, #35	; 0x23
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	332c      	adds	r3, #44	; 0x2c
 800695c:	4a2c      	ldr	r2, [pc, #176]	; (8006a10 <load_xdir+0x178>)
 800695e:	fba2 2303 	umull	r2, r3, r2, r3
 8006962:	08db      	lsrs	r3, r3, #3
 8006964:	015b      	lsls	r3, r3, #5
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	429a      	cmp	r2, r3
 800696a:	d201      	bcs.n	8006970 <load_xdir+0xd8>
 800696c:	2302      	movs	r3, #2
 800696e:	e04a      	b.n	8006a06 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8006970:	2340      	movs	r3, #64	; 0x40
 8006972:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8006974:	2100      	movs	r1, #0
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff fbb9 	bl	80060ee <dir_next>
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <load_xdir+0xf2>
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	e03d      	b.n	8006a06 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006992:	4619      	mov	r1, r3
 8006994:	4610      	mov	r0, r2
 8006996:	f7fe fc91 	bl	80052bc <move_window>
 800699a:	4603      	mov	r3, r0
 800699c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800699e:	7bfb      	ldrb	r3, [r7, #15]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <load_xdir+0x110>
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	e02e      	b.n	8006a06 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2bc1      	cmp	r3, #193	; 0xc1
 80069b0:	d001      	beq.n	80069b6 <load_xdir+0x11e>
 80069b2:	2302      	movs	r3, #2
 80069b4:	e027      	b.n	8006a06 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80069bc:	d208      	bcs.n	80069d0 <load_xdir+0x138>
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	18d0      	adds	r0, r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c8:	2220      	movs	r2, #32
 80069ca:	4619      	mov	r1, r3
 80069cc:	f7fe fa47 	bl	8004e5e <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	3320      	adds	r3, #32
 80069d4:	617b      	str	r3, [r7, #20]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d3ca      	bcc.n	8006974 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80069e4:	d80e      	bhi.n	8006a04 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80069e6:	6938      	ldr	r0, [r7, #16]
 80069e8:	f7ff feef 	bl	80067ca <xdir_sum>
 80069ec:	4603      	mov	r3, r0
 80069ee:	461c      	mov	r4, r3
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	3302      	adds	r3, #2
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe f86d 	bl	8004ad4 <ld_word>
 80069fa:	4603      	mov	r3, r0
 80069fc:	429c      	cmp	r4, r3
 80069fe:	d001      	beq.n	8006a04 <load_xdir+0x16c>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e000      	b.n	8006a06 <load_xdir+0x16e>
	}
	return FR_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	371c      	adds	r7, #28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd90      	pop	{r4, r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	88888889 	.word	0x88888889

08006a14 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8006a14:	b5b0      	push	{r4, r5, r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6808      	ldr	r0, [r1, #0]
 8006a22:	6879      	ldr	r1, [r7, #4]
 8006a24:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6a08      	ldr	r0, [r1, #32]
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8006a32:	b2c8      	uxtb	r0, r1
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	f04f 0100 	mov.w	r1, #0
 8006a42:	f06f 04ff 	mvn.w	r4, #255	; 0xff
 8006a46:	f04f 0500 	mov.w	r5, #0
 8006a4a:	ea00 0204 	and.w	r2, r0, r4
 8006a4e:	ea01 0305 	and.w	r3, r1, r5
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff faad 	bl	8005fc6 <dir_sdi>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d104      	bne.n	8006a80 <load_obj_dir+0x6c>
		res = load_xdir(dp);		/* Load the object's entry block */
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff ff0e 	bl	8006898 <load_xdir>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bdb0      	pop	{r4, r5, r7, pc}

08006a8a <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8006a8a:	b590      	push	{r4, r7, lr}
 8006a8c:	b087      	sub	sp, #28
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1c9c      	adds	r4, r3, #2
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f7ff fe93 	bl	80067ca <xdir_sum>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f7fe f909 	bl	8004cc0 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff fa81 	bl	8005fc6 <dir_sdi>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8006ac8:	e026      	b.n	8006b18 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	f7fe fbf1 	bl	80052bc <move_window>
 8006ada:	4603      	mov	r3, r0
 8006adc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d11d      	bne.n	8006b20 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae8:	2220      	movs	r2, #32
 8006aea:	68f9      	ldr	r1, [r7, #12]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fe f9b6 	bl	8004e5e <mem_cpy>
		dp->obj.fs->wflag = 1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2201      	movs	r2, #1
 8006af8:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	613b      	str	r3, [r7, #16]
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00e      	beq.n	8006b24 <store_xdir+0x9a>
		dirb += SZDIRE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3320      	adds	r3, #32
 8006b0a:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff faed 	bl	80060ee <dir_next>
 8006b14:	4603      	mov	r3, r0
 8006b16:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8006b18:	7dfb      	ldrb	r3, [r7, #23]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0d5      	beq.n	8006aca <store_xdir+0x40>
 8006b1e:	e002      	b.n	8006b26 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8006b20:	bf00      	nop
 8006b22:	e000      	b.n	8006b26 <store_xdir+0x9c>
		if (--nent == 0) break;
 8006b24:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <store_xdir+0xa8>
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <store_xdir+0xac>
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	e000      	b.n	8006b38 <store_xdir+0xae>
 8006b36:	2302      	movs	r3, #2
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd90      	pop	{r4, r7, pc}

08006b40 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8006b40:	b590      	push	{r4, r7, lr}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8006b4a:	2240      	movs	r2, #64	; 0x40
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fe f9a6 	bl	8004ea0 <mem_set>
	dirb[XDIR_Type] = 0x85;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2285      	movs	r2, #133	; 0x85
 8006b58:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3320      	adds	r3, #32
 8006b5e:	22c0      	movs	r2, #192	; 0xc0
 8006b60:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8006b62:	2300      	movs	r3, #0
 8006b64:	72bb      	strb	r3, [r7, #10]
 8006b66:	2301      	movs	r3, #1
 8006b68:	72fb      	strb	r3, [r7, #11]
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	813b      	strh	r3, [r7, #8]
 8006b6e:	2340      	movs	r3, #64	; 0x40
 8006b70:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	60fa      	str	r2, [r7, #12]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	22c1      	movs	r2, #193	; 0xc1
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	60fa      	str	r2, [r7, #12]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	4413      	add	r3, r2
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8006b8e:	893b      	ldrh	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00b      	beq.n	8006bac <create_xdir+0x6c>
 8006b94:	7abb      	ldrb	r3, [r7, #10]
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	813b      	strh	r3, [r7, #8]
 8006ba0:	893b      	ldrh	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <create_xdir+0x6c>
 8006ba6:	7abb      	ldrb	r3, [r7, #10]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	893a      	ldrh	r2, [r7, #8]
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe f882 	bl	8004cc0 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3302      	adds	r3, #2
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f003 031f 	and.w	r3, r3, #31
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e0      	bne.n	8006b8e <create_xdir+0x4e>
		nb++;
 8006bcc:	7afb      	ldrb	r3, [r7, #11]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8006bd2:	7abb      	ldrb	r3, [r7, #10]
 8006bd4:	005b      	lsls	r3, r3, #1
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	4413      	add	r3, r2
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1c8      	bne.n	8006b72 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3323      	adds	r3, #35	; 0x23
 8006be4:	7aba      	ldrb	r2, [r7, #10]
 8006be6:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3301      	adds	r3, #1
 8006bec:	7afa      	ldrb	r2, [r7, #11]
 8006bee:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8006bf6:	6838      	ldr	r0, [r7, #0]
 8006bf8:	f7ff fe1a 	bl	8006830 <xname_sum>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4620      	mov	r0, r4
 8006c02:	f7fe f85d 	bl	8004cc0 <st_word>
}
 8006c06:	bf00      	nop
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd90      	pop	{r4, r7, pc}

08006c0e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b086      	sub	sp, #24
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006c18:	2304      	movs	r3, #4
 8006c1a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8006c22:	23ff      	movs	r3, #255	; 0xff
 8006c24:	757b      	strb	r3, [r7, #21]
 8006c26:	23ff      	movs	r3, #255	; 0xff
 8006c28:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8006c2a:	e09f      	b.n	8006d6c <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c30:	4619      	mov	r1, r3
 8006c32:	6938      	ldr	r0, [r7, #16]
 8006c34:	f7fe fb42 	bl	80052bc <move_window>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f040 809a 	bne.w	8006d78 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8006c4c:	7dbb      	ldrb	r3, [r7, #22]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d102      	bne.n	8006c58 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006c52:	2304      	movs	r3, #4
 8006c54:	75fb      	strb	r3, [r7, #23]
 8006c56:	e096      	b.n	8006d86 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d118      	bne.n	8006c92 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8006c60:	7dbb      	ldrb	r3, [r7, #22]
 8006c62:	2b85      	cmp	r3, #133	; 0x85
 8006c64:	d179      	bne.n	8006d5a <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff fe12 	bl	8006898 <load_xdir>
 8006c74:	4603      	mov	r3, r0
 8006c76:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d17e      	bne.n	8006d7c <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	3304      	adds	r3, #4
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	719a      	strb	r2, [r3, #6]
					}
					break;
 8006c90:	e074      	b.n	8006d7c <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c96:	330b      	adds	r3, #11
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c9e:	73fb      	strb	r3, [r7, #15]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	7bfa      	ldrb	r2, [r7, #15]
 8006ca4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006ca6:	7dbb      	ldrb	r3, [r7, #22]
 8006ca8:	2be5      	cmp	r3, #229	; 0xe5
 8006caa:	d00e      	beq.n	8006cca <dir_read+0xbc>
 8006cac:	7dbb      	ldrb	r3, [r7, #22]
 8006cae:	2b2e      	cmp	r3, #46	; 0x2e
 8006cb0:	d00b      	beq.n	8006cca <dir_read+0xbc>
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
 8006cb4:	f023 0320 	bic.w	r3, r3, #32
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	bf0c      	ite	eq
 8006cbc:	2301      	moveq	r3, #1
 8006cbe:	2300      	movne	r3, #0
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d002      	beq.n	8006cd0 <dir_read+0xc2>
				ord = 0xFF;
 8006cca:	23ff      	movs	r3, #255	; 0xff
 8006ccc:	757b      	strb	r3, [r7, #21]
 8006cce:	e044      	b.n	8006d5a <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
 8006cd2:	2b0f      	cmp	r3, #15
 8006cd4:	d12f      	bne.n	8006d36 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8006cd6:	7dbb      	ldrb	r3, [r7, #22]
 8006cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00d      	beq.n	8006cfc <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce4:	7b5b      	ldrb	r3, [r3, #13]
 8006ce6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8006ce8:	7dbb      	ldrb	r3, [r7, #22]
 8006cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cee:	75bb      	strb	r3, [r7, #22]
 8006cf0:	7dbb      	ldrb	r3, [r7, #22]
 8006cf2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006cfc:	7dba      	ldrb	r2, [r7, #22]
 8006cfe:	7d7b      	ldrb	r3, [r7, #21]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d115      	bne.n	8006d30 <dir_read+0x122>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d08:	330d      	adds	r3, #13
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	7d3a      	ldrb	r2, [r7, #20]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d10e      	bne.n	8006d30 <dir_read+0x122>
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	f7ff fbd7 	bl	80064d0 <pick_lfn>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <dir_read+0x122>
 8006d28:	7d7b      	ldrb	r3, [r7, #21]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	e000      	b.n	8006d32 <dir_read+0x124>
 8006d30:	23ff      	movs	r3, #255	; 0xff
 8006d32:	757b      	strb	r3, [r7, #21]
 8006d34:	e011      	b.n	8006d5a <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006d36:	7d7b      	ldrb	r3, [r7, #21]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d109      	bne.n	8006d50 <dir_read+0x142>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff fd21 	bl	8006788 <sum_sfn>
 8006d46:	4603      	mov	r3, r0
 8006d48:	461a      	mov	r2, r3
 8006d4a:	7d3b      	ldrb	r3, [r7, #20]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d017      	beq.n	8006d80 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f04f 32ff 	mov.w	r2, #4294967295
 8006d56:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8006d58:	e012      	b.n	8006d80 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff f9c6 	bl	80060ee <dir_next>
 8006d62:	4603      	mov	r3, r0
 8006d64:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10b      	bne.n	8006d84 <dir_read+0x176>
	while (dp->sect) {
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f47f af5b 	bne.w	8006c2c <dir_read+0x1e>
 8006d76:	e006      	b.n	8006d86 <dir_read+0x178>
		if (res != FR_OK) break;
 8006d78:	bf00      	nop
 8006d7a:	e004      	b.n	8006d86 <dir_read+0x178>
					break;
 8006d7c:	bf00      	nop
 8006d7e:	e002      	b.n	8006d86 <dir_read+0x178>
					break;
 8006d80:	bf00      	nop
 8006d82:	e000      	b.n	8006d86 <dir_read+0x178>
		if (res != FR_OK) break;
 8006d84:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <dir_read+0x184>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006d9c:	b590      	push	{r4, r7, lr}
 8006d9e:	b089      	sub	sp, #36	; 0x24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006daa:	2100      	movs	r1, #0
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff f90a 	bl	8005fc6 <dir_sdi>
 8006db2:	4603      	mov	r3, r0
 8006db4:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8006db6:	7ffb      	ldrb	r3, [r7, #31]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <dir_find+0x24>
 8006dbc:	7ffb      	ldrb	r3, [r7, #31]
 8006dbe:	e112      	b.n	8006fe6 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b04      	cmp	r3, #4
 8006dc6:	d164      	bne.n	8006e92 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff fd2f 	bl	8006830 <xname_sum>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8006dd6:	e04f      	b.n	8006e78 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	3324      	adds	r3, #36	; 0x24
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fd fe78 	bl	8004ad4 <ld_word>
 8006de4:	4603      	mov	r3, r0
 8006de6:	461a      	mov	r2, r3
 8006de8:	893b      	ldrh	r3, [r7, #8]
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d000      	beq.n	8006df0 <dir_find+0x54>
 8006dee:	e043      	b.n	8006e78 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006df8:	76fb      	strb	r3, [r7, #27]
 8006dfa:	2340      	movs	r3, #64	; 0x40
 8006dfc:	617b      	str	r3, [r7, #20]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	e029      	b.n	8006e58 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f003 031f 	and.w	r3, r3, #31
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d102      	bne.n	8006e14 <dir_find+0x78>
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	3302      	adds	r3, #2
 8006e12:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	695a      	ldr	r2, [r3, #20]
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fd fe59 	bl	8004ad4 <ld_word>
 8006e22:	4603      	mov	r3, r0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f002 fa65 	bl	80092f4 <ff_wtoupper>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	461c      	mov	r4, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	691a      	ldr	r2, [r3, #16]
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	005b      	lsls	r3, r3, #1
 8006e36:	4413      	add	r3, r2
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f002 fa5a 	bl	80092f4 <ff_wtoupper>
 8006e40:	4603      	mov	r3, r0
 8006e42:	429c      	cmp	r4, r3
 8006e44:	d10c      	bne.n	8006e60 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8006e46:	7efb      	ldrb	r3, [r7, #27]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	76fb      	strb	r3, [r7, #27]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	3302      	adds	r3, #2
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	3301      	adds	r3, #1
 8006e56:	613b      	str	r3, [r7, #16]
 8006e58:	7efb      	ldrb	r3, [r7, #27]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1d2      	bne.n	8006e04 <dir_find+0x68>
 8006e5e:	e000      	b.n	8006e62 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8006e60:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8006e62:	7efb      	ldrb	r3, [r7, #27]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d107      	bne.n	8006e78 <dir_find+0xdc>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	691a      	ldr	r2, [r3, #16]
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	4413      	add	r3, r2
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d009      	beq.n	8006e8c <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8006e78:	2100      	movs	r1, #0
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7ff fec7 	bl	8006c0e <dir_read>
 8006e80:	4603      	mov	r3, r0
 8006e82:	77fb      	strb	r3, [r7, #31]
 8006e84:	7ffb      	ldrb	r3, [r7, #31]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0a6      	beq.n	8006dd8 <dir_find+0x3c>
 8006e8a:	e000      	b.n	8006e8e <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8006e8c:	bf00      	nop
		}
		return res;
 8006e8e:	7ffb      	ldrb	r3, [r7, #31]
 8006e90:	e0a9      	b.n	8006fe6 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006e92:	23ff      	movs	r3, #255	; 0xff
 8006e94:	773b      	strb	r3, [r7, #28]
 8006e96:	7f3b      	ldrb	r3, [r7, #28]
 8006e98:	777b      	strb	r3, [r7, #29]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f7fe fa07 	bl	80052bc <move_window>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8006eb2:	7ffb      	ldrb	r3, [r7, #31]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f040 8090 	bne.w	8006fda <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006ec2:	7fbb      	ldrb	r3, [r7, #30]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d102      	bne.n	8006ece <dir_find+0x132>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	77fb      	strb	r3, [r7, #31]
 8006ecc:	e08a      	b.n	8006fe4 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed2:	330b      	adds	r3, #11
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eda:	72fb      	strb	r3, [r7, #11]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	7afa      	ldrb	r2, [r7, #11]
 8006ee0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006ee2:	7fbb      	ldrb	r3, [r7, #30]
 8006ee4:	2be5      	cmp	r3, #229	; 0xe5
 8006ee6:	d007      	beq.n	8006ef8 <dir_find+0x15c>
 8006ee8:	7afb      	ldrb	r3, [r7, #11]
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d009      	beq.n	8006f06 <dir_find+0x16a>
 8006ef2:	7afb      	ldrb	r3, [r7, #11]
 8006ef4:	2b0f      	cmp	r3, #15
 8006ef6:	d006      	beq.n	8006f06 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ef8:	23ff      	movs	r3, #255	; 0xff
 8006efa:	777b      	strb	r3, [r7, #29]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f04f 32ff 	mov.w	r2, #4294967295
 8006f02:	64da      	str	r2, [r3, #76]	; 0x4c
 8006f04:	e05e      	b.n	8006fc4 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006f06:	7afb      	ldrb	r3, [r7, #11]
 8006f08:	2b0f      	cmp	r3, #15
 8006f0a:	d136      	bne.n	8006f7a <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d154      	bne.n	8006fc4 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006f1a:	7fbb      	ldrb	r3, [r7, #30]
 8006f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00d      	beq.n	8006f40 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f28:	7b5b      	ldrb	r3, [r3, #13]
 8006f2a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006f2c:	7fbb      	ldrb	r3, [r7, #30]
 8006f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f32:	77bb      	strb	r3, [r7, #30]
 8006f34:	7fbb      	ldrb	r3, [r7, #30]
 8006f36:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006f40:	7fba      	ldrb	r2, [r7, #30]
 8006f42:	7f7b      	ldrb	r3, [r7, #29]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d115      	bne.n	8006f74 <dir_find+0x1d8>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4c:	330d      	adds	r3, #13
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	7f3a      	ldrb	r2, [r7, #28]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d10e      	bne.n	8006f74 <dir_find+0x1d8>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	691a      	ldr	r2, [r3, #16]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f7ff fa45 	bl	80063f0 <cmp_lfn>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <dir_find+0x1d8>
 8006f6c:	7f7b      	ldrb	r3, [r7, #29]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	e000      	b.n	8006f76 <dir_find+0x1da>
 8006f74:	23ff      	movs	r3, #255	; 0xff
 8006f76:	777b      	strb	r3, [r7, #29]
 8006f78:	e024      	b.n	8006fc4 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006f7a:	7f7b      	ldrb	r3, [r7, #29]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d109      	bne.n	8006f94 <dir_find+0x1f8>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff fbff 	bl	8006788 <sum_sfn>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	7f3b      	ldrb	r3, [r7, #28]
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d024      	beq.n	8006fde <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10a      	bne.n	8006fb8 <dir_find+0x21c>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	3340      	adds	r3, #64	; 0x40
 8006faa:	220b      	movs	r2, #11
 8006fac:	4619      	mov	r1, r3
 8006fae:	f7fd ff92 	bl	8004ed6 <mem_cmp>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d014      	beq.n	8006fe2 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006fb8:	23ff      	movs	r3, #255	; 0xff
 8006fba:	777b      	strb	r3, [r7, #29]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc2:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff f891 	bl	80060ee <dir_next>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8006fd0:	7ffb      	ldrb	r3, [r7, #31]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f43f af65 	beq.w	8006ea2 <dir_find+0x106>
 8006fd8:	e004      	b.n	8006fe4 <dir_find+0x248>
		if (res != FR_OK) break;
 8006fda:	bf00      	nop
 8006fdc:	e002      	b.n	8006fe4 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006fde:	bf00      	nop
 8006fe0:	e000      	b.n	8006fe4 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006fe2:	bf00      	nop

	return res;
 8006fe4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3724      	adds	r7, #36	; 0x24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd90      	pop	{r4, r7, pc}
	...

08006ff0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006ff0:	b5b0      	push	{r4, r5, r7, lr}
 8006ff2:	b0a0      	sub	sp, #128	; 0x80
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8007004:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <dir_register+0x20>
 800700c:	2306      	movs	r3, #6
 800700e:	e18c      	b.n	800732a <dir_register+0x33a>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007010:	2300      	movs	r3, #0
 8007012:	677b      	str	r3, [r7, #116]	; 0x74
 8007014:	e002      	b.n	800701c <dir_register+0x2c>
 8007016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007018:	3301      	adds	r3, #1
 800701a:	677b      	str	r3, [r7, #116]	; 0x74
 800701c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	4413      	add	r3, r2
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1f4      	bne.n	8007016 <dir_register+0x26>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800702c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b04      	cmp	r3, #4
 8007032:	f040 80a2 	bne.w	800717a <dir_register+0x18a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8007036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007038:	330e      	adds	r3, #14
 800703a:	4abe      	ldr	r2, [pc, #760]	; (8007334 <dir_register+0x344>)
 800703c:	fba2 2303 	umull	r2, r3, r2, r3
 8007040:	08db      	lsrs	r3, r3, #3
 8007042:	3302      	adds	r3, #2
 8007044:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8007046:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7ff f936 	bl	80062ba <dir_alloc>
 800704e:	4603      	mov	r3, r0
 8007050:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8007054:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <dir_register+0x72>
 800705c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007060:	e163      	b.n	800732a <dir_register+0x33a>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007068:	3b01      	subs	r3, #1
 800706a:	015b      	lsls	r3, r3, #5
 800706c:	1ad2      	subs	r2, r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d075      	beq.n	8007166 <dir_register+0x176>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	79db      	ldrb	r3, [r3, #7]
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	2b00      	cmp	r3, #0
 8007084:	d06f      	beq.n	8007166 <dir_register+0x176>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800708c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800708e:	895b      	ldrh	r3, [r3, #10]
 8007090:	461a      	mov	r2, r3
 8007092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007094:	899b      	ldrh	r3, [r3, #12]
 8007096:	fb03 f302 	mul.w	r3, r3, r2
 800709a:	461a      	mov	r2, r3
 800709c:	f04f 0300 	mov.w	r3, #0
 80070a0:	1884      	adds	r4, r0, r2
 80070a2:	eb41 0503 	adc.w	r5, r1, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	e9c3 4504 	strd	r4, r5, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fe fd30 	bl	8005b14 <fill_first_frag>
 80070b4:	4603      	mov	r3, r0
 80070b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80070ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <dir_register+0xd8>
 80070c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80070c6:	e130      	b.n	800732a <dir_register+0x33a>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ce:	f04f 32ff 	mov.w	r2, #4294967295
 80070d2:	4619      	mov	r1, r3
 80070d4:	f7fe fd4d 	bl	8005b72 <fill_last_frag>
 80070d8:	4603      	mov	r3, r0
 80070da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80070de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <dir_register+0xfc>
 80070e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80070ea:	e11e      	b.n	800732a <dir_register+0x33a>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	f107 0308 	add.w	r3, r7, #8
 80070f2:	4611      	mov	r1, r2
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff fc8d 	bl	8006a14 <load_obj_dir>
 80070fa:	4603      	mov	r3, r0
 80070fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8007100:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <dir_register+0x11e>
 8007108:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800710c:	e10d      	b.n	800732a <dir_register+0x33a>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800710e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800711c:	4608      	mov	r0, r1
 800711e:	f7fd fe16 	bl	8004d4e <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8007122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007130:	4608      	mov	r0, r1
 8007132:	f7fd fe0c 	bl	8004d4e <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	79da      	ldrb	r2, [r3, #7]
 800713a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	3321      	adds	r3, #33	; 0x21
 8007140:	f042 0201 	orr.w	r2, r2, #1
 8007144:	b2d2      	uxtb	r2, r2
 8007146:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8007148:	f107 0308 	add.w	r3, r7, #8
 800714c:	4618      	mov	r0, r3
 800714e:	f7ff fc9c 	bl	8006a8a <store_xdir>
 8007152:	4603      	mov	r3, r0
 8007154:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8007158:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <dir_register+0x176>
 8007160:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007164:	e0e1      	b.n	800732a <dir_register+0x33a>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8007166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007168:	695a      	ldr	r2, [r3, #20]
 800716a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	4619      	mov	r1, r3
 8007170:	4610      	mov	r0, r2
 8007172:	f7ff fce5 	bl	8006b40 <create_xdir>
		return FR_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	e0d7      	b.n	800732a <dir_register+0x33a>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8007180:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007184:	220c      	movs	r2, #12
 8007186:	4618      	mov	r0, r3
 8007188:	f7fd fe69 	bl	8004e5e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800718c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d033      	beq.n	8007200 <dir_register+0x210>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2240      	movs	r2, #64	; 0x40
 800719c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 80071a0:	2301      	movs	r3, #1
 80071a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80071a4:	e016      	b.n	80071d4 <dir_register+0x1e4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80071ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80071b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071b6:	f7ff fa57 	bl	8006668 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff fdee 	bl	8006d9c <dir_find>
 80071c0:	4603      	mov	r3, r0
 80071c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 80071c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d106      	bne.n	80071dc <dir_register+0x1ec>
		for (n = 1; n < 100; n++) {
 80071ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071d0:	3301      	adds	r3, #1
 80071d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80071d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071d6:	2b63      	cmp	r3, #99	; 0x63
 80071d8:	d9e5      	bls.n	80071a6 <dir_register+0x1b6>
 80071da:	e000      	b.n	80071de <dir_register+0x1ee>
			if (res != FR_OK) break;
 80071dc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80071de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071e0:	2b64      	cmp	r3, #100	; 0x64
 80071e2:	d101      	bne.n	80071e8 <dir_register+0x1f8>
 80071e4:	2307      	movs	r3, #7
 80071e6:	e0a0      	b.n	800732a <dir_register+0x33a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80071e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	d002      	beq.n	80071f6 <dir_register+0x206>
 80071f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80071f4:	e099      	b.n	800732a <dir_register+0x33a>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80071f6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007200:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d007      	beq.n	800721c <dir_register+0x22c>
 800720c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800720e:	330c      	adds	r3, #12
 8007210:	4a49      	ldr	r2, [pc, #292]	; (8007338 <dir_register+0x348>)
 8007212:	fba2 2303 	umull	r2, r3, r2, r3
 8007216:	089b      	lsrs	r3, r3, #2
 8007218:	3301      	adds	r3, #1
 800721a:	e000      	b.n	800721e <dir_register+0x22e>
 800721c:	2301      	movs	r3, #1
 800721e:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007220:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7ff f849 	bl	80062ba <dir_alloc>
 8007228:	4603      	mov	r3, r0
 800722a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800722e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007232:	2b00      	cmp	r3, #0
 8007234:	d14a      	bne.n	80072cc <dir_register+0x2dc>
 8007236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007238:	3b01      	subs	r3, #1
 800723a:	673b      	str	r3, [r7, #112]	; 0x70
 800723c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800723e:	2b00      	cmp	r3, #0
 8007240:	d044      	beq.n	80072cc <dir_register+0x2dc>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007248:	015b      	lsls	r3, r3, #5
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7fe feb9 	bl	8005fc6 <dir_sdi>
 8007254:	4603      	mov	r3, r0
 8007256:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800725a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800725e:	2b00      	cmp	r3, #0
 8007260:	d134      	bne.n	80072cc <dir_register+0x2dc>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3340      	adds	r3, #64	; 0x40
 8007266:	4618      	mov	r0, r3
 8007268:	f7ff fa8e 	bl	8006788 <sum_sfn>
 800726c:	4603      	mov	r3, r0
 800726e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	4619      	mov	r1, r3
 8007278:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800727a:	f7fe f81f 	bl	80052bc <move_window>
 800727e:	4603      	mov	r3, r0
 8007280:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8007284:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007288:	2b00      	cmp	r3, #0
 800728a:	d11e      	bne.n	80072ca <dir_register+0x2da>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800728c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800728e:	6918      	ldr	r0, [r3, #16]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007294:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007296:	b2da      	uxtb	r2, r3
 8007298:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800729c:	f7ff f97c 	bl	8006598 <put_lfn>
				fs->wflag = 1;
 80072a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a2:	2201      	movs	r2, #1
 80072a4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80072a6:	2100      	movs	r1, #0
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7fe ff20 	bl	80060ee <dir_next>
 80072ae:	4603      	mov	r3, r0
 80072b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 80072b4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d107      	bne.n	80072cc <dir_register+0x2dc>
 80072bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072be:	3b01      	subs	r3, #1
 80072c0:	673b      	str	r3, [r7, #112]	; 0x70
 80072c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1d4      	bne.n	8007272 <dir_register+0x282>
 80072c8:	e000      	b.n	80072cc <dir_register+0x2dc>
				if (res != FR_OK) break;
 80072ca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80072cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d128      	bne.n	8007326 <dir_register+0x336>
		res = move_window(fs, dp->sect);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	4619      	mov	r1, r3
 80072da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80072dc:	f7fd ffee 	bl	80052bc <move_window>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 80072e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d11b      	bne.n	8007326 <dir_register+0x336>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f2:	2220      	movs	r2, #32
 80072f4:	2100      	movs	r1, #0
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fd fdd2 	bl	8004ea0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	3340      	adds	r3, #64	; 0x40
 8007304:	220b      	movs	r2, #11
 8007306:	4619      	mov	r1, r3
 8007308:	f7fd fda9 	bl	8004e5e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007316:	330c      	adds	r3, #12
 8007318:	f002 0218 	and.w	r2, r2, #24
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007322:	2201      	movs	r2, #1
 8007324:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007326:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800732a:	4618      	mov	r0, r3
 800732c:	3780      	adds	r7, #128	; 0x80
 800732e:	46bd      	mov	sp, r7
 8007330:	bdb0      	pop	{r4, r5, r7, pc}
 8007332:	bf00      	nop
 8007334:	88888889 	.word	0x88888889
 8007338:	4ec4ec4f 	.word	0x4ec4ec4f

0800733c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08a      	sub	sp, #40	; 0x28
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	613b      	str	r3, [r7, #16]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	61ba      	str	r2, [r7, #24]
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	4413      	add	r3, r2
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800736a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800736c:	2b1f      	cmp	r3, #31
 800736e:	d940      	bls.n	80073f2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007370:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007372:	2b2f      	cmp	r3, #47	; 0x2f
 8007374:	d006      	beq.n	8007384 <create_name+0x48>
 8007376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007378:	2b5c      	cmp	r3, #92	; 0x5c
 800737a:	d110      	bne.n	800739e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800737c:	e002      	b.n	8007384 <create_name+0x48>
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	3301      	adds	r3, #1
 8007382:	61bb      	str	r3, [r7, #24]
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	4413      	add	r3, r2
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	2b2f      	cmp	r3, #47	; 0x2f
 800738e:	d0f6      	beq.n	800737e <create_name+0x42>
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	4413      	add	r3, r2
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b5c      	cmp	r3, #92	; 0x5c
 800739a:	d0f0      	beq.n	800737e <create_name+0x42>
			break;
 800739c:	e02a      	b.n	80073f4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2bfe      	cmp	r3, #254	; 0xfe
 80073a2:	d901      	bls.n	80073a8 <create_name+0x6c>
 80073a4:	2306      	movs	r3, #6
 80073a6:	e177      	b.n	8007698 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80073a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80073ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073b0:	2101      	movs	r1, #1
 80073b2:	4618      	mov	r0, r3
 80073b4:	f001 ff62 	bl	800927c <ff_convert>
 80073b8:	4603      	mov	r3, r0
 80073ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80073bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <create_name+0x8a>
 80073c2:	2306      	movs	r3, #6
 80073c4:	e168      	b.n	8007698 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80073c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073c8:	2b7f      	cmp	r3, #127	; 0x7f
 80073ca:	d809      	bhi.n	80073e0 <create_name+0xa4>
 80073cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073ce:	4619      	mov	r1, r3
 80073d0:	48b3      	ldr	r0, [pc, #716]	; (80076a0 <create_name+0x364>)
 80073d2:	f7fd fda7 	bl	8004f24 <chk_chr>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <create_name+0xa4>
 80073dc:	2306      	movs	r3, #6
 80073de:	e15b      	b.n	8007698 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	617a      	str	r2, [r7, #20]
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4413      	add	r3, r2
 80073ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80073ee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80073f0:	e7b4      	b.n	800735c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80073f2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	441a      	add	r2, r3
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80073fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007400:	2b1f      	cmp	r3, #31
 8007402:	d801      	bhi.n	8007408 <create_name+0xcc>
 8007404:	2304      	movs	r3, #4
 8007406:	e000      	b.n	800740a <create_name+0xce>
 8007408:	2300      	movs	r3, #0
 800740a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800740e:	e011      	b.n	8007434 <create_name+0xf8>
		w = lfn[di - 1];
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007416:	3b01      	subs	r3, #1
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4413      	add	r3, r2
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007424:	2b20      	cmp	r3, #32
 8007426:	d002      	beq.n	800742e <create_name+0xf2>
 8007428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800742a:	2b2e      	cmp	r3, #46	; 0x2e
 800742c:	d106      	bne.n	800743c <create_name+0x100>
		di--;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	3b01      	subs	r3, #1
 8007432:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1ea      	bne.n	8007410 <create_name+0xd4>
 800743a:	e000      	b.n	800743e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800743c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	4413      	add	r3, r2
 8007446:	2200      	movs	r2, #0
 8007448:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <create_name+0x118>
 8007450:	2306      	movs	r3, #6
 8007452:	e121      	b.n	8007698 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3340      	adds	r3, #64	; 0x40
 8007458:	220b      	movs	r2, #11
 800745a:	2120      	movs	r1, #32
 800745c:	4618      	mov	r0, r3
 800745e:	f7fd fd1f 	bl	8004ea0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007462:	2300      	movs	r3, #0
 8007464:	61bb      	str	r3, [r7, #24]
 8007466:	e002      	b.n	800746e <create_name+0x132>
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	3301      	adds	r3, #1
 800746c:	61bb      	str	r3, [r7, #24]
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4413      	add	r3, r2
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	2b20      	cmp	r3, #32
 800747a:	d0f5      	beq.n	8007468 <create_name+0x12c>
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	2b2e      	cmp	r3, #46	; 0x2e
 8007488:	d0ee      	beq.n	8007468 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d009      	beq.n	80074a4 <create_name+0x168>
 8007490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007494:	f043 0303 	orr.w	r3, r3, #3
 8007498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800749c:	e002      	b.n	80074a4 <create_name+0x168>
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d009      	beq.n	80074be <create_name+0x182>
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80074b0:	3b01      	subs	r3, #1
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	2b2e      	cmp	r3, #46	; 0x2e
 80074bc:	d1ef      	bne.n	800749e <create_name+0x162>

	i = b = 0; ni = 8;
 80074be:	2300      	movs	r3, #0
 80074c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80074c4:	2300      	movs	r3, #0
 80074c6:	623b      	str	r3, [r7, #32]
 80074c8:	2308      	movs	r3, #8
 80074ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	61ba      	str	r2, [r7, #24]
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	4413      	add	r3, r2
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80074dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 8090 	beq.w	8007604 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80074e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	d006      	beq.n	80074f8 <create_name+0x1bc>
 80074ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074ec:	2b2e      	cmp	r3, #46	; 0x2e
 80074ee:	d10a      	bne.n	8007506 <create_name+0x1ca>
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d006      	beq.n	8007506 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80074f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074fc:	f043 0303 	orr.w	r3, r3, #3
 8007500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007504:	e07d      	b.n	8007602 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007506:	6a3a      	ldr	r2, [r7, #32]
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	429a      	cmp	r2, r3
 800750c:	d203      	bcs.n	8007516 <create_name+0x1da>
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	429a      	cmp	r2, r3
 8007514:	d123      	bne.n	800755e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	2b0b      	cmp	r3, #11
 800751a:	d106      	bne.n	800752a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800751c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007520:	f043 0303 	orr.w	r3, r3, #3
 8007524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007528:	e06f      	b.n	800760a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	429a      	cmp	r2, r3
 8007530:	d005      	beq.n	800753e <create_name+0x202>
 8007532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007536:	f043 0303 	orr.w	r3, r3, #3
 800753a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	429a      	cmp	r2, r3
 8007544:	d860      	bhi.n	8007608 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	61bb      	str	r3, [r7, #24]
 800754a:	2308      	movs	r3, #8
 800754c:	623b      	str	r3, [r7, #32]
 800754e:	230b      	movs	r3, #11
 8007550:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007552:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800755c:	e051      	b.n	8007602 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800755e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007560:	2b7f      	cmp	r3, #127	; 0x7f
 8007562:	d914      	bls.n	800758e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007564:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007566:	2100      	movs	r1, #0
 8007568:	4618      	mov	r0, r3
 800756a:	f001 fe87 	bl	800927c <ff_convert>
 800756e:	4603      	mov	r3, r0
 8007570:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007574:	2b00      	cmp	r3, #0
 8007576:	d004      	beq.n	8007582 <create_name+0x246>
 8007578:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800757a:	3b80      	subs	r3, #128	; 0x80
 800757c:	4a49      	ldr	r2, [pc, #292]	; (80076a4 <create_name+0x368>)
 800757e:	5cd3      	ldrb	r3, [r2, r3]
 8007580:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007586:	f043 0302 	orr.w	r3, r3, #2
 800758a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800758e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007590:	2b00      	cmp	r3, #0
 8007592:	d007      	beq.n	80075a4 <create_name+0x268>
 8007594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007596:	4619      	mov	r1, r3
 8007598:	4843      	ldr	r0, [pc, #268]	; (80076a8 <create_name+0x36c>)
 800759a:	f7fd fcc3 	bl	8004f24 <chk_chr>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d008      	beq.n	80075b6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80075a4:	235f      	movs	r3, #95	; 0x5f
 80075a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80075a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075ac:	f043 0303 	orr.w	r3, r3, #3
 80075b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075b4:	e01b      	b.n	80075ee <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80075b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075b8:	2b40      	cmp	r3, #64	; 0x40
 80075ba:	d909      	bls.n	80075d0 <create_name+0x294>
 80075bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075be:	2b5a      	cmp	r3, #90	; 0x5a
 80075c0:	d806      	bhi.n	80075d0 <create_name+0x294>
					b |= 2;
 80075c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075c6:	f043 0302 	orr.w	r3, r3, #2
 80075ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80075ce:	e00e      	b.n	80075ee <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80075d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075d2:	2b60      	cmp	r3, #96	; 0x60
 80075d4:	d90b      	bls.n	80075ee <create_name+0x2b2>
 80075d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075d8:	2b7a      	cmp	r3, #122	; 0x7a
 80075da:	d808      	bhi.n	80075ee <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80075dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075e0:	f043 0301 	orr.w	r3, r3, #1
 80075e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80075e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075ea:	3b20      	subs	r3, #32
 80075ec:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	623a      	str	r2, [r7, #32]
 80075f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075f6:	b2d1      	uxtb	r1, r2
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	4413      	add	r3, r2
 80075fc:	460a      	mov	r2, r1
 80075fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 8007602:	e763      	b.n	80074cc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007604:	bf00      	nop
 8007606:	e000      	b.n	800760a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007608:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007610:	2be5      	cmp	r3, #229	; 0xe5
 8007612:	d103      	bne.n	800761c <create_name+0x2e0>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2205      	movs	r2, #5
 8007618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	2b08      	cmp	r3, #8
 8007620:	d104      	bne.n	800762c <create_name+0x2f0>
 8007622:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800762c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007630:	f003 030c 	and.w	r3, r3, #12
 8007634:	2b0c      	cmp	r3, #12
 8007636:	d005      	beq.n	8007644 <create_name+0x308>
 8007638:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800763c:	f003 0303 	and.w	r3, r3, #3
 8007640:	2b03      	cmp	r3, #3
 8007642:	d105      	bne.n	8007650 <create_name+0x314>
 8007644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007648:	f043 0302 	orr.w	r3, r3, #2
 800764c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d117      	bne.n	800768c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800765c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007660:	f003 0303 	and.w	r3, r3, #3
 8007664:	2b01      	cmp	r3, #1
 8007666:	d105      	bne.n	8007674 <create_name+0x338>
 8007668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800766c:	f043 0310 	orr.w	r3, r3, #16
 8007670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007674:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007678:	f003 030c 	and.w	r3, r3, #12
 800767c:	2b04      	cmp	r3, #4
 800767e:	d105      	bne.n	800768c <create_name+0x350>
 8007680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007684:	f043 0308 	orr.w	r3, r3, #8
 8007688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007692:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 8007696:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007698:	4618      	mov	r0, r3
 800769a:	3728      	adds	r7, #40	; 0x28
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	0800c668 	.word	0x0800c668
 80076a4:	0800c718 	.word	0x0800c718
 80076a8:	0800c674 	.word	0x0800c674

080076ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80076c0:	e002      	b.n	80076c8 <follow_path+0x1c>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	3301      	adds	r3, #1
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b2f      	cmp	r3, #47	; 0x2f
 80076ce:	d0f8      	beq.n	80076c2 <follow_path+0x16>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b5c      	cmp	r3, #92	; 0x5c
 80076d6:	d0f4      	beq.n	80076c2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	2200      	movs	r2, #0
 80076dc:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	2200      	movs	r2, #0
 80076e2:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b1f      	cmp	r3, #31
 80076ea:	d80a      	bhi.n	8007702 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2280      	movs	r2, #128	; 0x80
 80076f0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 80076f4:	2100      	movs	r1, #0
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7fe fc65 	bl	8005fc6 <dir_sdi>
 80076fc:	4603      	mov	r3, r0
 80076fe:	75fb      	strb	r3, [r7, #23]
 8007700:	e07d      	b.n	80077fe <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007702:	463b      	mov	r3, r7
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff fe18 	bl	800733c <create_name>
 800770c:	4603      	mov	r3, r0
 800770e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d16e      	bne.n	80077f4 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff fb40 	bl	8006d9c <dir_find>
 800771c:	4603      	mov	r3, r0
 800771e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8007726:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007728:	7dfb      	ldrb	r3, [r7, #23]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800772e:	7dfb      	ldrb	r3, [r7, #23]
 8007730:	2b04      	cmp	r3, #4
 8007732:	d161      	bne.n	80077f8 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007734:	7afb      	ldrb	r3, [r7, #11]
 8007736:	f003 0304 	and.w	r3, r3, #4
 800773a:	2b00      	cmp	r3, #0
 800773c:	d15c      	bne.n	80077f8 <follow_path+0x14c>
 800773e:	2305      	movs	r3, #5
 8007740:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007742:	e059      	b.n	80077f8 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007744:	7afb      	ldrb	r3, [r7, #11]
 8007746:	f003 0304 	and.w	r3, r3, #4
 800774a:	2b00      	cmp	r3, #0
 800774c:	d156      	bne.n	80077fc <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	799b      	ldrb	r3, [r3, #6]
 8007752:	f003 0310 	and.w	r3, r3, #16
 8007756:	2b00      	cmp	r3, #0
 8007758:	d102      	bne.n	8007760 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800775a:	2305      	movs	r3, #5
 800775c:	75fb      	strb	r3, [r7, #23]
 800775e:	e04e      	b.n	80077fe <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b04      	cmp	r3, #4
 8007766:	d130      	bne.n	80077ca <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	689a      	ldr	r2, [r3, #8]
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007776:	4613      	mov	r3, r2
 8007778:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	79d2      	ldrb	r2, [r2, #7]
 8007780:	431a      	orrs	r2, r3
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	3334      	adds	r3, #52	; 0x34
 8007794:	4618      	mov	r0, r3
 8007796:	f7fd f9b5 	bl	8004b04 <ld_dword>
 800779a:	4602      	mov	r2, r0
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	3321      	adds	r3, #33	; 0x21
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	3338      	adds	r3, #56	; 0x38
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fd f9c6 	bl	8004b4a <ld_qword>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	6939      	ldr	r1, [r7, #16]
 80077c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80077c8:	e79b      	b.n	8007702 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	8992      	ldrh	r2, [r2, #12]
 80077d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80077dc:	fb02 f200 	mul.w	r2, r2, r0
 80077e0:	1a9b      	subs	r3, r3, r2
 80077e2:	440b      	add	r3, r1
 80077e4:	4619      	mov	r1, r3
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f7fe fdc3 	bl	8006372 <ld_clust>
 80077ec:	4602      	mov	r2, r0
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80077f2:	e786      	b.n	8007702 <follow_path+0x56>
			if (res != FR_OK) break;
 80077f4:	bf00      	nop
 80077f6:	e002      	b.n	80077fe <follow_path+0x152>
				break;
 80077f8:	bf00      	nop
 80077fa:	e000      	b.n	80077fe <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80077fc:	bf00      	nop
			}
		}
	}

	return res;
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007808:	b480      	push	{r7}
 800780a:	b087      	sub	sp, #28
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007810:	f04f 33ff 	mov.w	r3, #4294967295
 8007814:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d031      	beq.n	8007882 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	e002      	b.n	800782c <get_ldnumber+0x24>
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	3301      	adds	r3, #1
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	2b1f      	cmp	r3, #31
 8007832:	d903      	bls.n	800783c <get_ldnumber+0x34>
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	2b3a      	cmp	r3, #58	; 0x3a
 800783a:	d1f4      	bne.n	8007826 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b3a      	cmp	r3, #58	; 0x3a
 8007842:	d11c      	bne.n	800787e <get_ldnumber+0x76>
			tp = *path;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	60fa      	str	r2, [r7, #12]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	3b30      	subs	r3, #48	; 0x30
 8007854:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2b09      	cmp	r3, #9
 800785a:	d80e      	bhi.n	800787a <get_ldnumber+0x72>
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	429a      	cmp	r2, r3
 8007862:	d10a      	bne.n	800787a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d107      	bne.n	800787a <get_ldnumber+0x72>
					vol = (int)i;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	3301      	adds	r3, #1
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	e002      	b.n	8007884 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800787e:	2300      	movs	r3, #0
 8007880:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007882:	693b      	ldr	r3, [r7, #16]
}
 8007884:	4618      	mov	r0, r3
 8007886:	371c      	adds	r7, #28
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	70da      	strb	r2, [r3, #3]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f04f 32ff 	mov.w	r2, #4294967295
 80078a6:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7fd fd06 	bl	80052bc <move_window>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <check_fs+0x2a>
 80078b6:	2304      	movs	r3, #4
 80078b8:	e044      	b.n	8007944 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	333c      	adds	r3, #60	; 0x3c
 80078be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fd f906 	bl	8004ad4 <ld_word>
 80078c8:	4603      	mov	r3, r0
 80078ca:	461a      	mov	r2, r3
 80078cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d001      	beq.n	80078d8 <check_fs+0x48>
 80078d4:	2303      	movs	r3, #3
 80078d6:	e035      	b.n	8007944 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078de:	2be9      	cmp	r3, #233	; 0xe9
 80078e0:	d009      	beq.n	80078f6 <check_fs+0x66>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078e8:	2beb      	cmp	r3, #235	; 0xeb
 80078ea:	d11e      	bne.n	800792a <check_fs+0x9a>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078f2:	2b90      	cmp	r3, #144	; 0x90
 80078f4:	d119      	bne.n	800792a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	333c      	adds	r3, #60	; 0x3c
 80078fa:	3336      	adds	r3, #54	; 0x36
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fd f901 	bl	8004b04 <ld_dword>
 8007902:	4603      	mov	r3, r0
 8007904:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007908:	4a10      	ldr	r2, [pc, #64]	; (800794c <check_fs+0xbc>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d101      	bne.n	8007912 <check_fs+0x82>
 800790e:	2300      	movs	r3, #0
 8007910:	e018      	b.n	8007944 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	333c      	adds	r3, #60	; 0x3c
 8007916:	3352      	adds	r3, #82	; 0x52
 8007918:	4618      	mov	r0, r3
 800791a:	f7fd f8f3 	bl	8004b04 <ld_dword>
 800791e:	4603      	mov	r3, r0
 8007920:	4a0b      	ldr	r2, [pc, #44]	; (8007950 <check_fs+0xc0>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d101      	bne.n	800792a <check_fs+0x9a>
 8007926:	2300      	movs	r3, #0
 8007928:	e00c      	b.n	8007944 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	333c      	adds	r3, #60	; 0x3c
 800792e:	220b      	movs	r2, #11
 8007930:	4908      	ldr	r1, [pc, #32]	; (8007954 <check_fs+0xc4>)
 8007932:	4618      	mov	r0, r3
 8007934:	f7fd facf 	bl	8004ed6 <mem_cmp>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <check_fs+0xb2>
 800793e:	2301      	movs	r3, #1
 8007940:	e000      	b.n	8007944 <check_fs+0xb4>
#endif
	return 2;
 8007942:	2302      	movs	r3, #2
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	00544146 	.word	0x00544146
 8007950:	33544146 	.word	0x33544146
 8007954:	0800c67c 	.word	0x0800c67c

08007958 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007958:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800795c:	b098      	sub	sp, #96	; 0x60
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	4613      	mov	r3, r2
 8007966:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f7ff ff4a 	bl	8007808 <get_ldnumber>
 8007974:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 8007976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007978:	2b00      	cmp	r3, #0
 800797a:	da01      	bge.n	8007980 <find_volume+0x28>
 800797c:	230b      	movs	r3, #11
 800797e:	e36b      	b.n	8008058 <find_volume+0x700>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007980:	4aa9      	ldr	r2, [pc, #676]	; (8007c28 <find_volume+0x2d0>)
 8007982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007988:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800798a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <find_volume+0x3c>
 8007990:	230c      	movs	r3, #12
 8007992:	e361      	b.n	8008058 <find_volume+0x700>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007998:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	f023 0301 	bic.w	r3, r3, #1
 80079a0:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80079a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d01a      	beq.n	80079e0 <find_volume+0x88>
		stat = disk_status(fs->drv);
 80079aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ac:	785b      	ldrb	r3, [r3, #1]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fc fff2 	bl	8004998 <disk_status>
 80079b4:	4603      	mov	r3, r0
 80079b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80079ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10c      	bne.n	80079e0 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d007      	beq.n	80079dc <find_volume+0x84>
 80079cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80079d8:	230a      	movs	r3, #10
 80079da:	e33d      	b.n	8008058 <find_volume+0x700>
			}
			return FR_OK;				/* The file system object is valid */
 80079dc:	2300      	movs	r3, #0
 80079de:	e33b      	b.n	8008058 <find_volume+0x700>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80079e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80079e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ec:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80079ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079f0:	785b      	ldrb	r3, [r3, #1]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fc ffea 	bl	80049cc <disk_initialize>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80079fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e324      	b.n	8008058 <find_volume+0x700>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007a0e:	79fb      	ldrb	r3, [r7, #7]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d007      	beq.n	8007a24 <find_volume+0xcc>
 8007a14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a18:	f003 0304 	and.w	r3, r3, #4
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8007a20:	230a      	movs	r3, #10
 8007a22:	e319      	b.n	8008058 <find_volume+0x700>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a26:	7858      	ldrb	r0, [r3, #1]
 8007a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a2a:	330c      	adds	r3, #12
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	2102      	movs	r1, #2
 8007a30:	f7fd f832 	bl	8004a98 <disk_ioctl>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <find_volume+0xe6>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e30c      	b.n	8008058 <find_volume+0x700>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a40:	899b      	ldrh	r3, [r3, #12]
 8007a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a46:	d80d      	bhi.n	8007a64 <find_volume+0x10c>
 8007a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a4a:	899b      	ldrh	r3, [r3, #12]
 8007a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a50:	d308      	bcc.n	8007a64 <find_volume+0x10c>
 8007a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a54:	899b      	ldrh	r3, [r3, #12]
 8007a56:	461a      	mov	r2, r3
 8007a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a5a:	899b      	ldrh	r3, [r3, #12]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	4013      	ands	r3, r2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <find_volume+0x110>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e2f7      	b.n	8008058 <find_volume+0x700>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007a6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a6e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007a70:	f7ff ff0e 	bl	8007890 <check_fs>
 8007a74:	4603      	mov	r3, r0
 8007a76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d14b      	bne.n	8007b1a <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007a82:	2300      	movs	r3, #0
 8007a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a86:	e01f      	b.n	8007ac8 <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a8a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007a96:	4413      	add	r3, r2
 8007a98:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d006      	beq.n	8007ab2 <find_volume+0x15a>
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fd f82b 	bl	8004b04 <ld_dword>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	e000      	b.n	8007ab4 <find_volume+0x15c>
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8007abc:	440b      	add	r3, r1
 8007abe:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d9dc      	bls.n	8007a88 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007ace:	2300      	movs	r3, #0
 8007ad0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 8007ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <find_volume+0x186>
 8007ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ada:	3b01      	subs	r3, #1
 8007adc:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8007aec:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d005      	beq.n	8007b00 <find_volume+0x1a8>
 8007af4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007af6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007af8:	f7ff feca 	bl	8007890 <check_fs>
 8007afc:	4603      	mov	r3, r0
 8007afe:	e000      	b.n	8007b02 <find_volume+0x1aa>
 8007b00:	2303      	movs	r3, #3
 8007b02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007b06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d905      	bls.n	8007b1a <find_volume+0x1c2>
 8007b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b10:	3301      	adds	r3, #1
 8007b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d9e1      	bls.n	8007ade <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007b1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d101      	bne.n	8007b26 <find_volume+0x1ce>
 8007b22:	2301      	movs	r3, #1
 8007b24:	e298      	b.n	8008058 <find_volume+0x700>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007b26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d901      	bls.n	8007b32 <find_volume+0x1da>
 8007b2e:	230d      	movs	r3, #13
 8007b30:	e292      	b.n	8008058 <find_volume+0x700>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8007b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	f040 80fe 	bne.w	8007d38 <find_volume+0x3e0>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8007b3c:	230b      	movs	r3, #11
 8007b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b40:	e002      	b.n	8007b48 <find_volume+0x1f0>
 8007b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b44:	3301      	adds	r3, #1
 8007b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b4a:	2b3f      	cmp	r3, #63	; 0x3f
 8007b4c:	d806      	bhi.n	8007b5c <find_volume+0x204>
 8007b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b52:	4413      	add	r3, r2
 8007b54:	333c      	adds	r3, #60	; 0x3c
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0f2      	beq.n	8007b42 <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8007b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b5e:	2b3f      	cmp	r3, #63	; 0x3f
 8007b60:	d801      	bhi.n	8007b66 <find_volume+0x20e>
 8007b62:	230d      	movs	r3, #13
 8007b64:	e278      	b.n	8008058 <find_volume+0x700>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8007b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b68:	333c      	adds	r3, #60	; 0x3c
 8007b6a:	3368      	adds	r3, #104	; 0x68
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7fc ffb1 	bl	8004ad4 <ld_word>
 8007b72:	4603      	mov	r3, r0
 8007b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b78:	d001      	beq.n	8007b7e <find_volume+0x226>
 8007b7a:	230d      	movs	r3, #13
 8007b7c:	e26c      	b.n	8008058 <find_volume+0x700>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8007b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b80:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8007b84:	461a      	mov	r2, r3
 8007b86:	2301      	movs	r3, #1
 8007b88:	4093      	lsls	r3, r2
 8007b8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b8c:	8992      	ldrh	r2, [r2, #12]
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d001      	beq.n	8007b96 <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 8007b92:	230d      	movs	r3, #13
 8007b94:	e260      	b.n	8008058 <find_volume+0x700>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8007b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b98:	333c      	adds	r3, #60	; 0x3c
 8007b9a:	3348      	adds	r3, #72	; 0x48
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fc ffd4 	bl	8004b4a <ld_qword>
 8007ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	f04f 0300 	mov.w	r3, #0
 8007baa:	eb10 0802 	adds.w	r8, r0, r2
 8007bae:	eb41 0903 	adc.w	r9, r1, r3
 8007bb2:	e9c7 8908 	strd	r8, r9, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8007bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	bf08      	it	eq
 8007bbe:	2a00      	cmpeq	r2, #0
 8007bc0:	d301      	bcc.n	8007bc6 <find_volume+0x26e>
 8007bc2:	230d      	movs	r3, #13
 8007bc4:	e248      	b.n	8008058 <find_volume+0x700>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8007bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bc8:	333c      	adds	r3, #60	; 0x3c
 8007bca:	3354      	adds	r3, #84	; 0x54
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7fc ff99 	bl	8004b04 <ld_dword>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd6:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8007bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bda:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8007bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007be0:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8007be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007be4:	789b      	ldrb	r3, [r3, #2]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d001      	beq.n	8007bee <find_volume+0x296>
 8007bea:	230d      	movs	r3, #13
 8007bec:	e234      	b.n	8008058 <find_volume+0x700>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8007bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf0:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	4093      	lsls	r3, r2
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bfe:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8007c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c02:	895b      	ldrh	r3, [r3, #10]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <find_volume+0x2b4>
 8007c08:	230d      	movs	r3, #13
 8007c0a:	e225      	b.n	8008058 <find_volume+0x700>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8007c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c0e:	333c      	adds	r3, #60	; 0x3c
 8007c10:	335c      	adds	r3, #92	; 0x5c
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fc ff76 	bl	8004b04 <ld_dword>
 8007c18:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8007c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1c:	4a03      	ldr	r2, [pc, #12]	; (8007c2c <find_volume+0x2d4>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d906      	bls.n	8007c30 <find_volume+0x2d8>
 8007c22:	230d      	movs	r3, #13
 8007c24:	e218      	b.n	8008058 <find_volume+0x700>
 8007c26:	bf00      	nop
 8007c28:	20000270 	.word	0x20000270
 8007c2c:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8007c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c32:	1c9a      	adds	r2, r3, #2
 8007c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c36:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8007c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c3c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8007c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c40:	333c      	adds	r3, #60	; 0x3c
 8007c42:	3358      	adds	r3, #88	; 0x58
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fc ff5d 	bl	8004b04 <ld_dword>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c4e:	441a      	add	r2, r3
 8007c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c52:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8007c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c56:	333c      	adds	r3, #60	; 0x3c
 8007c58:	3350      	adds	r3, #80	; 0x50
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fc ff52 	bl	8004b04 <ld_dword>
 8007c60:	4602      	mov	r2, r0
 8007c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c64:	441a      	add	r2, r3
 8007c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c68:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8007c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f04f 0100 	mov.w	r1, #0
 8007c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c76:	895b      	ldrh	r3, [r3, #10]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7c:	fb03 f302 	mul.w	r3, r3, r2
 8007c80:	461a      	mov	r2, r3
 8007c82:	f04f 0300 	mov.w	r3, #0
 8007c86:	1884      	adds	r4, r0, r2
 8007c88:	eb41 0503 	adc.w	r5, r1, r3
 8007c8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c90:	42ab      	cmp	r3, r5
 8007c92:	bf08      	it	eq
 8007c94:	42a2      	cmpeq	r2, r4
 8007c96:	d201      	bcs.n	8007c9c <find_volume+0x344>
 8007c98:	230d      	movs	r3, #13
 8007c9a:	e1dd      	b.n	8008058 <find_volume+0x700>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8007c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c9e:	333c      	adds	r3, #60	; 0x3c
 8007ca0:	3360      	adds	r3, #96	; 0x60
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fc ff2e 	bl	8004b04 <ld_dword>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cac:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8007cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007cb6:	f7fd fb9f 	bl	80053f8 <clust2sect>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007cc0:	f7fd fafc 	bl	80052bc <move_window>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <find_volume+0x376>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e1c4      	b.n	8008058 <find_volume+0x700>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8007cce:	2300      	movs	r3, #0
 8007cd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cd2:	e015      	b.n	8007d00 <find_volume+0x3a8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8007cd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cd8:	4413      	add	r3, r2
 8007cda:	333c      	adds	r3, #60	; 0x3c
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b81      	cmp	r3, #129	; 0x81
 8007ce0:	d10b      	bne.n	8007cfa <find_volume+0x3a2>
 8007ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ce4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8007ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cea:	3314      	adds	r3, #20
 8007cec:	4413      	add	r3, r2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fc ff08 	bl	8004b04 <ld_dword>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d009      	beq.n	8007d0e <find_volume+0x3b6>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8007cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cfc:	3320      	adds	r3, #32
 8007cfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d02:	899b      	ldrh	r3, [r3, #12]
 8007d04:	461a      	mov	r2, r3
 8007d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d3e3      	bcc.n	8007cd4 <find_volume+0x37c>
 8007d0c:	e000      	b.n	8007d10 <find_volume+0x3b8>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8007d0e:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8007d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d12:	899b      	ldrh	r3, [r3, #12]
 8007d14:	461a      	mov	r2, r3
 8007d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d101      	bne.n	8007d20 <find_volume+0x3c8>
 8007d1c:	230d      	movs	r3, #13
 8007d1e:	e19b      	b.n	8008058 <find_volume+0x700>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d22:	f04f 32ff 	mov.w	r2, #4294967295
 8007d26:	61da      	str	r2, [r3, #28]
 8007d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d2a:	69da      	ldr	r2, [r3, #28]
 8007d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d2e:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8007d30:	2304      	movs	r3, #4
 8007d32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007d36:	e177      	b.n	8008028 <find_volume+0x6d0>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d3a:	333c      	adds	r3, #60	; 0x3c
 8007d3c:	330b      	adds	r3, #11
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fc fec8 	bl	8004ad4 <ld_word>
 8007d44:	4603      	mov	r3, r0
 8007d46:	461a      	mov	r2, r3
 8007d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4a:	899b      	ldrh	r3, [r3, #12]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d001      	beq.n	8007d54 <find_volume+0x3fc>
 8007d50:	230d      	movs	r3, #13
 8007d52:	e181      	b.n	8008058 <find_volume+0x700>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d56:	333c      	adds	r3, #60	; 0x3c
 8007d58:	3316      	adds	r3, #22
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fc feba 	bl	8004ad4 <ld_word>
 8007d60:	4603      	mov	r3, r0
 8007d62:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d106      	bne.n	8007d78 <find_volume+0x420>
 8007d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d6c:	333c      	adds	r3, #60	; 0x3c
 8007d6e:	3324      	adds	r3, #36	; 0x24
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fc fec7 	bl	8004b04 <ld_dword>
 8007d76:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 8007d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d7c:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d80:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8007d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d86:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d8a:	789b      	ldrb	r3, [r3, #2]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d005      	beq.n	8007d9c <find_volume+0x444>
 8007d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d92:	789b      	ldrb	r3, [r3, #2]
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d001      	beq.n	8007d9c <find_volume+0x444>
 8007d98:	230d      	movs	r3, #13
 8007d9a:	e15d      	b.n	8008058 <find_volume+0x700>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d9e:	789b      	ldrb	r3, [r3, #2]
 8007da0:	461a      	mov	r2, r3
 8007da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007da4:	fb02 f303 	mul.w	r3, r2, r3
 8007da8:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dac:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007db4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007db8:	895b      	ldrh	r3, [r3, #10]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d008      	beq.n	8007dd0 <find_volume+0x478>
 8007dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dc0:	895b      	ldrh	r3, [r3, #10]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dc6:	895b      	ldrh	r3, [r3, #10]
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <find_volume+0x47c>
 8007dd0:	230d      	movs	r3, #13
 8007dd2:	e141      	b.n	8008058 <find_volume+0x700>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd6:	333c      	adds	r3, #60	; 0x3c
 8007dd8:	3311      	adds	r3, #17
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fc fe7a 	bl	8004ad4 <ld_word>
 8007de0:	4603      	mov	r3, r0
 8007de2:	461a      	mov	r2, r3
 8007de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dea:	891b      	ldrh	r3, [r3, #8]
 8007dec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dee:	8992      	ldrh	r2, [r2, #12]
 8007df0:	0952      	lsrs	r2, r2, #5
 8007df2:	b292      	uxth	r2, r2
 8007df4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007df8:	fb02 f201 	mul.w	r2, r2, r1
 8007dfc:	1a9b      	subs	r3, r3, r2
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <find_volume+0x4b0>
 8007e04:	230d      	movs	r3, #13
 8007e06:	e127      	b.n	8008058 <find_volume+0x700>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e0a:	333c      	adds	r3, #60	; 0x3c
 8007e0c:	3313      	adds	r3, #19
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fc fe60 	bl	8004ad4 <ld_word>
 8007e14:	4603      	mov	r3, r0
 8007e16:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d106      	bne.n	8007e2c <find_volume+0x4d4>
 8007e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e20:	333c      	adds	r3, #60	; 0x3c
 8007e22:	3320      	adds	r3, #32
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fc fe6d 	bl	8004b04 <ld_dword>
 8007e2a:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e2e:	333c      	adds	r3, #60	; 0x3c
 8007e30:	330e      	adds	r3, #14
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fc fe4e 	bl	8004ad4 <ld_word>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007e3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <find_volume+0x4ee>
 8007e42:	230d      	movs	r3, #13
 8007e44:	e108      	b.n	8008058 <find_volume+0x700>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007e46:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e4a:	4413      	add	r3, r2
 8007e4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e4e:	8911      	ldrh	r1, [r2, #8]
 8007e50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e52:	8992      	ldrh	r2, [r2, #12]
 8007e54:	0952      	lsrs	r2, r2, #5
 8007e56:	b292      	uxth	r2, r2
 8007e58:	fbb1 f2f2 	udiv	r2, r1, r2
 8007e5c:	b292      	uxth	r2, r2
 8007e5e:	4413      	add	r3, r2
 8007e60:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007e62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d201      	bcs.n	8007e6e <find_volume+0x516>
 8007e6a:	230d      	movs	r3, #13
 8007e6c:	e0f4      	b.n	8008058 <find_volume+0x700>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007e6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e76:	8952      	ldrh	r2, [r2, #10]
 8007e78:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <find_volume+0x530>
 8007e84:	230d      	movs	r3, #13
 8007e86:	e0e7      	b.n	8008058 <find_volume+0x700>
		fmt = FS_FAT32;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d802      	bhi.n	8007e9e <find_volume+0x546>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d802      	bhi.n	8007eae <find_volume+0x556>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb0:	1c9a      	adds	r2, r3, #2
 8007eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb4:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8007eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007eba:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007ebc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ec0:	441a      	add	r2, r3
 8007ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ec4:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8007ec6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	441a      	add	r2, r3
 8007ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ece:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8007ed0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ed4:	2b03      	cmp	r3, #3
 8007ed6:	d11e      	bne.n	8007f16 <find_volume+0x5be>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eda:	333c      	adds	r3, #60	; 0x3c
 8007edc:	332a      	adds	r3, #42	; 0x2a
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fc fdf8 	bl	8004ad4 <ld_word>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <find_volume+0x596>
 8007eea:	230d      	movs	r3, #13
 8007eec:	e0b4      	b.n	8008058 <find_volume+0x700>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ef0:	891b      	ldrh	r3, [r3, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <find_volume+0x5a2>
 8007ef6:	230d      	movs	r3, #13
 8007ef8:	e0ae      	b.n	8008058 <find_volume+0x700>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007efc:	333c      	adds	r3, #60	; 0x3c
 8007efe:	332c      	adds	r3, #44	; 0x2c
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fc fdff 	bl	8004b04 <ld_dword>
 8007f06:	4602      	mov	r2, r0
 8007f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f0a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f14:	e01f      	b.n	8007f56 <find_volume+0x5fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f18:	891b      	ldrh	r3, [r3, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <find_volume+0x5ca>
 8007f1e:	230d      	movs	r3, #13
 8007f20:	e09a      	b.n	8008058 <find_volume+0x700>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f28:	441a      	add	r2, r3
 8007f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f2c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007f2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d103      	bne.n	8007f3e <find_volume+0x5e6>
 8007f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	e00a      	b.n	8007f54 <find_volume+0x5fc>
 8007f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f40:	6a1a      	ldr	r2, [r3, #32]
 8007f42:	4613      	mov	r3, r2
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	4413      	add	r3, r2
 8007f48:	085a      	lsrs	r2, r3, #1
 8007f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007f54:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f5c:	899b      	ldrh	r3, [r3, #12]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f62:	440b      	add	r3, r1
 8007f64:	3b01      	subs	r3, #1
 8007f66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f68:	8989      	ldrh	r1, [r1, #12]
 8007f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d201      	bcs.n	8007f76 <find_volume+0x61e>
 8007f72:	230d      	movs	r3, #13
 8007f74:	e070      	b.n	8008058 <find_volume+0x700>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f78:	f04f 32ff 	mov.w	r2, #4294967295
 8007f7c:	61da      	str	r2, [r3, #28]
 8007f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f80:	69da      	ldr	r2, [r3, #28]
 8007f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f84:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8007f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f88:	2280      	movs	r2, #128	; 0x80
 8007f8a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d149      	bne.n	8008028 <find_volume+0x6d0>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f96:	333c      	adds	r3, #60	; 0x3c
 8007f98:	3330      	adds	r3, #48	; 0x30
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fc fd9a 	bl	8004ad4 <ld_word>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d140      	bne.n	8008028 <find_volume+0x6d0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fa8:	3301      	adds	r3, #1
 8007faa:	4619      	mov	r1, r3
 8007fac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007fae:	f7fd f985 	bl	80052bc <move_window>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d137      	bne.n	8008028 <find_volume+0x6d0>
		{
			fs->fsi_flag = 0;
 8007fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fba:	2200      	movs	r2, #0
 8007fbc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fc0:	333c      	adds	r3, #60	; 0x3c
 8007fc2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fc fd84 	bl	8004ad4 <ld_word>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d127      	bne.n	8008028 <find_volume+0x6d0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fda:	333c      	adds	r3, #60	; 0x3c
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fc fd91 	bl	8004b04 <ld_dword>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	4a1f      	ldr	r2, [pc, #124]	; (8008064 <find_volume+0x70c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d11e      	bne.n	8008028 <find_volume+0x6d0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fec:	333c      	adds	r3, #60	; 0x3c
 8007fee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fc fd86 	bl	8004b04 <ld_dword>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	4a1b      	ldr	r2, [pc, #108]	; (8008068 <find_volume+0x710>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d113      	bne.n	8008028 <find_volume+0x6d0>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008002:	333c      	adds	r3, #60	; 0x3c
 8008004:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008008:	4618      	mov	r0, r3
 800800a:	f7fc fd7b 	bl	8004b04 <ld_dword>
 800800e:	4602      	mov	r2, r0
 8008010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008012:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008016:	333c      	adds	r3, #60	; 0x3c
 8008018:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800801c:	4618      	mov	r0, r3
 800801e:	f7fc fd71 	bl	8004b04 <ld_dword>
 8008022:	4602      	mov	r2, r0
 8008024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008026:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800802a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800802e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008030:	4b0e      	ldr	r3, [pc, #56]	; (800806c <find_volume+0x714>)
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	3301      	adds	r3, #1
 8008036:	b29a      	uxth	r2, r3
 8008038:	4b0c      	ldr	r3, [pc, #48]	; (800806c <find_volume+0x714>)
 800803a:	801a      	strh	r2, [r3, #0]
 800803c:	4b0b      	ldr	r3, [pc, #44]	; (800806c <find_volume+0x714>)
 800803e:	881a      	ldrh	r2, [r3, #0]
 8008040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008042:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008046:	4a0a      	ldr	r2, [pc, #40]	; (8008070 <find_volume+0x718>)
 8008048:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800804a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800804c:	4a09      	ldr	r2, [pc, #36]	; (8008074 <find_volume+0x71c>)
 800804e:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008050:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008052:	f7fd f8cb 	bl	80051ec <clear_lock>
#endif
	return FR_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3760      	adds	r7, #96	; 0x60
 800805c:	46bd      	mov	sp, r7
 800805e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008062:	bf00      	nop
 8008064:	41615252 	.word	0x41615252
 8008068:	61417272 	.word	0x61417272
 800806c:	20000274 	.word	0x20000274
 8008070:	200004f8 	.word	0x200004f8
 8008074:	20000298 	.word	0x20000298

08008078 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008082:	2309      	movs	r3, #9
 8008084:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d01c      	beq.n	80080c6 <validate+0x4e>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d018      	beq.n	80080c6 <validate+0x4e>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d013      	beq.n	80080c6 <validate+0x4e>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	889a      	ldrh	r2, [r3, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	88db      	ldrh	r3, [r3, #6]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d10c      	bne.n	80080c6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	785b      	ldrb	r3, [r3, #1]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fc fc70 	bl	8004998 <disk_status>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <validate+0x4e>
			res = FR_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d102      	bne.n	80080d2 <validate+0x5a>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	e000      	b.n	80080d4 <validate+0x5c>
 80080d2:	2300      	movs	r3, #0
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	6013      	str	r3, [r2, #0]
	return res;
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
	...

080080e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	4613      	mov	r3, r2
 80080f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80080f6:	f107 0310 	add.w	r3, r7, #16
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7ff fb84 	bl	8007808 <get_ldnumber>
 8008100:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	2b00      	cmp	r3, #0
 8008106:	da01      	bge.n	800810c <f_mount+0x28>
 8008108:	230b      	movs	r3, #11
 800810a:	e02b      	b.n	8008164 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800810c:	4a17      	ldr	r2, [pc, #92]	; (800816c <f_mount+0x88>)
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008114:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d005      	beq.n	8008128 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800811c:	69b8      	ldr	r0, [r7, #24]
 800811e:	f7fd f865 	bl	80051ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	2200      	movs	r2, #0
 8008126:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	490d      	ldr	r1, [pc, #52]	; (800816c <f_mount+0x88>)
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <f_mount+0x66>
 8008144:	79fb      	ldrb	r3, [r7, #7]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d001      	beq.n	800814e <f_mount+0x6a>
 800814a:	2300      	movs	r3, #0
 800814c:	e00a      	b.n	8008164 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800814e:	f107 010c 	add.w	r1, r7, #12
 8008152:	f107 0308 	add.w	r3, r7, #8
 8008156:	2200      	movs	r2, #0
 8008158:	4618      	mov	r0, r3
 800815a:	f7ff fbfd 	bl	8007958 <find_volume>
 800815e:	4603      	mov	r3, r0
 8008160:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008162:	7dfb      	ldrb	r3, [r7, #23]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3720      	adds	r7, #32
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	20000270 	.word	0x20000270

08008170 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008170:	b5b0      	push	{r4, r5, r7, lr}
 8008172:	b0a2      	sub	sp, #136	; 0x88
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <f_open+0x18>
 8008184:	2309      	movs	r3, #9
 8008186:	e2a0      	b.n	80086ca <f_open+0x55a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008188:	79fb      	ldrb	r3, [r7, #7]
 800818a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800818e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008190:	79fa      	ldrb	r2, [r7, #7]
 8008192:	f107 0114 	add.w	r1, r7, #20
 8008196:	f107 0308 	add.w	r3, r7, #8
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff fbdc 	bl	8007958 <find_volume>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
 80081a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f040 8284 	bne.w	80086b8 <f_open+0x548>
		dj.obj.fs = fs;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	f107 0318 	add.w	r3, r7, #24
 80081ba:	4611      	mov	r1, r2
 80081bc:	4618      	mov	r0, r3
 80081be:	f7ff fa75 	bl	80076ac <follow_path>
 80081c2:	4603      	mov	r3, r0
 80081c4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80081c8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d11a      	bne.n	8008206 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80081d0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80081d4:	b25b      	sxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	da03      	bge.n	80081e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80081da:	2306      	movs	r3, #6
 80081dc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80081e0:	e011      	b.n	8008206 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80081e2:	79fb      	ldrb	r3, [r7, #7]
 80081e4:	f023 0301 	bic.w	r3, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	bf14      	ite	ne
 80081ec:	2301      	movne	r3, #1
 80081ee:	2300      	moveq	r3, #0
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	461a      	mov	r2, r3
 80081f4:	f107 0318 	add.w	r3, r7, #24
 80081f8:	4611      	mov	r1, r2
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fc feae 	bl	8004f5c <chk_lock>
 8008200:	4603      	mov	r3, r0
 8008202:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008206:	79fb      	ldrb	r3, [r7, #7]
 8008208:	f003 031c 	and.w	r3, r3, #28
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 8109 	beq.w	8008424 <f_open+0x2b4>
			if (res != FR_OK) {					/* No file, create new */
 8008212:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008216:	2b00      	cmp	r3, #0
 8008218:	d017      	beq.n	800824a <f_open+0xda>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800821a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800821e:	2b04      	cmp	r3, #4
 8008220:	d10e      	bne.n	8008240 <f_open+0xd0>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008222:	f7fc fef7 	bl	8005014 <enq_lock>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d006      	beq.n	800823a <f_open+0xca>
 800822c:	f107 0318 	add.w	r3, r7, #24
 8008230:	4618      	mov	r0, r3
 8008232:	f7fe fedd 	bl	8006ff0 <dir_register>
 8008236:	4603      	mov	r3, r0
 8008238:	e000      	b.n	800823c <f_open+0xcc>
 800823a:	2312      	movs	r3, #18
 800823c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008240:	79fb      	ldrb	r3, [r7, #7]
 8008242:	f043 0308 	orr.w	r3, r3, #8
 8008246:	71fb      	strb	r3, [r7, #7]
 8008248:	e010      	b.n	800826c <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800824a:	7fbb      	ldrb	r3, [r7, #30]
 800824c:	f003 0311 	and.w	r3, r3, #17
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <f_open+0xec>
					res = FR_DENIED;
 8008254:	2307      	movs	r3, #7
 8008256:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800825a:	e007      	b.n	800826c <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	f003 0304 	and.w	r3, r3, #4
 8008262:	2b00      	cmp	r3, #0
 8008264:	d002      	beq.n	800826c <f_open+0xfc>
 8008266:	2308      	movs	r3, #8
 8008268:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800826c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008270:	2b00      	cmp	r3, #0
 8008272:	f040 80f1 	bne.w	8008458 <f_open+0x2e8>
 8008276:	79fb      	ldrb	r3, [r7, #7]
 8008278:	f003 0308 	and.w	r3, r3, #8
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 80eb 	beq.w	8008458 <f_open+0x2e8>
				dw = GET_FATTIME();
 8008282:	f7fc fb29 	bl	80048d8 <get_fattime>
 8008286:	6778      	str	r0, [r7, #116]	; 0x74
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	2b04      	cmp	r3, #4
 800828e:	f040 8082 	bne.w	8008396 <f_open+0x226>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	3334      	adds	r3, #52	; 0x34
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fc fc30 	bl	8004b04 <ld_dword>
 80082a4:	4602      	mov	r2, r0
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	3338      	adds	r3, #56	; 0x38
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fc fc4a 	bl	8004b4a <ld_qword>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	68f9      	ldr	r1, [r7, #12]
 80082bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	695b      	ldr	r3, [r3, #20]
 80082c4:	3321      	adds	r3, #33	; 0x21
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	b2da      	uxtb	r2, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	695b      	ldr	r3, [r3, #20]
 80082dc:	3308      	adds	r3, #8
 80082de:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fc fd08 	bl	8004cf6 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	3314      	adds	r3, #20
 80082ec:	2200      	movs	r2, #0
 80082ee:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	330c      	adds	r3, #12
 80082f6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fc fcfc 	bl	8004cf6 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	3315      	adds	r3, #21
 8008304:	2200      	movs	r2, #0
 8008306:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	3304      	adds	r3, #4
 800830e:	2220      	movs	r2, #32
 8008310:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	3334      	adds	r3, #52	; 0x34
 8008318:	2100      	movs	r1, #0
 800831a:	4618      	mov	r0, r3
 800831c:	f7fc fceb 	bl	8004cf6 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008328:	f04f 0200 	mov.w	r2, #0
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	4608      	mov	r0, r1
 8008332:	f7fc fd0c 	bl	8004d4e <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800833e:	f04f 0200 	mov.w	r2, #0
 8008342:	f04f 0300 	mov.w	r3, #0
 8008346:	4608      	mov	r0, r1
 8008348:	f7fc fd01 	bl	8004d4e <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	695b      	ldr	r3, [r3, #20]
 8008350:	3321      	adds	r3, #33	; 0x21
 8008352:	2201      	movs	r2, #1
 8008354:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8008356:	f107 0318 	add.w	r3, r7, #24
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fb95 	bl	8006a8a <store_xdir>
 8008360:	4603      	mov	r3, r0
 8008362:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8008366:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800836a:	2b00      	cmp	r3, #0
 800836c:	d174      	bne.n	8008458 <f_open+0x2e8>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d070      	beq.n	8008458 <f_open+0x2e8>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	2200      	movs	r2, #0
 800837e:	4619      	mov	r1, r3
 8008380:	f7fd fc28 	bl	8005bd4 <remove_chain>
 8008384:	4603      	mov	r3, r0
 8008386:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	689a      	ldr	r2, [r3, #8]
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	3a01      	subs	r2, #1
 8008392:	619a      	str	r2, [r3, #24]
 8008394:	e060      	b.n	8008458 <f_open+0x2e8>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008398:	330e      	adds	r3, #14
 800839a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800839c:	4618      	mov	r0, r3
 800839e:	f7fc fcaa 	bl	8004cf6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80083a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083a4:	3316      	adds	r3, #22
 80083a6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fc fca4 	bl	8004cf6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80083ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083b0:	330b      	adds	r3, #11
 80083b2:	2220      	movs	r2, #32
 80083b4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fd ffd8 	bl	8006372 <ld_clust>
 80083c2:	6738      	str	r0, [r7, #112]	; 0x70
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083c8:	2200      	movs	r2, #0
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fd fff0 	bl	80063b0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80083d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083d2:	331c      	adds	r3, #28
 80083d4:	2100      	movs	r1, #0
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fc fc8d 	bl	8004cf6 <st_dword>
					fs->wflag = 1;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2201      	movs	r2, #1
 80083e0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80083e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d037      	beq.n	8008458 <f_open+0x2e8>
						dw = fs->winsect;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ec:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 80083ee:	f107 0318 	add.w	r3, r7, #24
 80083f2:	2200      	movs	r2, #0
 80083f4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fd fbec 	bl	8005bd4 <remove_chain>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
 8008402:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008406:	2b00      	cmp	r3, #0
 8008408:	d126      	bne.n	8008458 <f_open+0x2e8>
							res = move_window(fs, dw);
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800840e:	4618      	mov	r0, r3
 8008410:	f7fc ff54 	bl	80052bc <move_window>
 8008414:	4603      	mov	r3, r0
 8008416:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800841e:	3a01      	subs	r2, #1
 8008420:	619a      	str	r2, [r3, #24]
 8008422:	e019      	b.n	8008458 <f_open+0x2e8>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008424:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008428:	2b00      	cmp	r3, #0
 800842a:	d115      	bne.n	8008458 <f_open+0x2e8>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800842c:	7fbb      	ldrb	r3, [r7, #30]
 800842e:	f003 0310 	and.w	r3, r3, #16
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <f_open+0x2ce>
					res = FR_NO_FILE;
 8008436:	2304      	movs	r3, #4
 8008438:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800843c:	e00c      	b.n	8008458 <f_open+0x2e8>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d007      	beq.n	8008458 <f_open+0x2e8>
 8008448:	7fbb      	ldrb	r3, [r7, #30]
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	d002      	beq.n	8008458 <f_open+0x2e8>
						res = FR_DENIED;
 8008452:	2307      	movs	r3, #7
 8008454:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
 8008458:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800845c:	2b00      	cmp	r3, #0
 800845e:	d128      	bne.n	80084b2 <f_open+0x342>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	f003 0308 	and.w	r3, r3, #8
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <f_open+0x302>
				mode |= FA_MODIFIED;
 800846a:	79fb      	ldrb	r3, [r7, #7]
 800846c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008470:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800847a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008480:	79fb      	ldrb	r3, [r7, #7]
 8008482:	f023 0301 	bic.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	bf14      	ite	ne
 800848a:	2301      	movne	r3, #1
 800848c:	2300      	moveq	r3, #0
 800848e:	b2db      	uxtb	r3, r3
 8008490:	461a      	mov	r2, r3
 8008492:	f107 0318 	add.w	r3, r7, #24
 8008496:	4611      	mov	r1, r2
 8008498:	4618      	mov	r0, r3
 800849a:	f7fc fddd 	bl	8005058 <inc_lock>
 800849e:	4602      	mov	r2, r0
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d102      	bne.n	80084b2 <f_open+0x342>
 80084ac:	2302      	movs	r3, #2
 80084ae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
		}
#endif

		if (res == FR_OK) {
 80084b2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f040 80fe 	bne.w	80086b8 <f_open+0x548>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d12c      	bne.n	800851e <f_open+0x3ae>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80084c4:	6a3a      	ldr	r2, [r7, #32]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80084ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084ce:	4613      	mov	r3, r2
 80084d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80084d4:	7ffa      	ldrb	r2, [r7, #31]
 80084d6:	431a      	orrs	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80084dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	3334      	adds	r3, #52	; 0x34
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fc fb0b 	bl	8004b04 <ld_dword>
 80084ee:	4602      	mov	r2, r0
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	3338      	adds	r3, #56	; 0x38
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fc fb25 	bl	8004b4a <ld_qword>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	68f9      	ldr	r1, [r7, #12]
 8008506:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	3321      	adds	r3, #33	; 0x21
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	f003 0302 	and.w	r3, r3, #2
 8008516:	b2da      	uxtb	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	71da      	strb	r2, [r3, #7]
 800851c:	e014      	b.n	8008548 <f_open+0x3d8>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008522:	4611      	mov	r1, r2
 8008524:	4618      	mov	r0, r3
 8008526:	f7fd ff24 	bl	8006372 <ld_clust>
 800852a:	4602      	mov	r2, r0
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008532:	331c      	adds	r3, #28
 8008534:	4618      	mov	r0, r3
 8008536:	f7fc fae5 	bl	8004b04 <ld_dword>
 800853a:	4603      	mov	r3, r0
 800853c:	461a      	mov	r2, r3
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	68f9      	ldr	r1, [r7, #12]
 8008544:	e9c1 2304 	strd	r2, r3, [r1, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	88da      	ldrh	r2, [r3, #6]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	79fa      	ldrb	r2, [r7, #7]
 8008560:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008572:	68f9      	ldr	r1, [r7, #12]
 8008574:	f04f 0200 	mov.w	r2, #0
 8008578:	f04f 0300 	mov.w	r3, #0
 800857c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3354      	adds	r3, #84	; 0x54
 8008584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008588:	2100      	movs	r1, #0
 800858a:	4618      	mov	r0, r3
 800858c:	f7fc fc88 	bl	8004ea0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008590:	79fb      	ldrb	r3, [r7, #7]
 8008592:	f003 0320 	and.w	r3, r3, #32
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 808e 	beq.w	80086b8 <f_open+0x548>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	f000 8088 	beq.w	80086b8 <f_open+0x548>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80085ae:	68f9      	ldr	r1, [r7, #12]
 80085b0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	895b      	ldrh	r3, [r3, #10]
 80085b8:	461a      	mov	r2, r3
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	899b      	ldrh	r3, [r3, #12]
 80085be:	fb03 f302 	mul.w	r3, r3, r2
 80085c2:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80085d2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 80085d6:	e021      	b.n	800861c <f_open+0x4ac>
					clst = get_fat(&fp->obj, clst);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fc ff2a 	bl	8005438 <get_fat>
 80085e4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
 80085e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d802      	bhi.n	80085f6 <f_open+0x486>
 80085f0:	2302      	movs	r3, #2
 80085f2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80085f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fe:	d102      	bne.n	8008606 <f_open+0x496>
 8008600:	2301      	movs	r3, #1
 8008602:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008608:	461a      	mov	r2, r3
 800860a:	f04f 0300 	mov.w	r3, #0
 800860e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008612:	1a84      	subs	r4, r0, r2
 8008614:	eb61 0503 	sbc.w	r5, r1, r3
 8008618:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
 800861c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008620:	2b00      	cmp	r3, #0
 8008622:	d109      	bne.n	8008638 <f_open+0x4c8>
 8008624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008626:	4618      	mov	r0, r3
 8008628:	f04f 0100 	mov.w	r1, #0
 800862c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008630:	4299      	cmp	r1, r3
 8008632:	bf08      	it	eq
 8008634:	4290      	cmpeq	r0, r2
 8008636:	d3cf      	bcc.n	80085d8 <f_open+0x468>
				}
				fp->clust = clst;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800863e:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008640:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8008644:	2b00      	cmp	r3, #0
 8008646:	d137      	bne.n	80086b8 <f_open+0x548>
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	899b      	ldrh	r3, [r3, #12]
 800864c:	b29a      	uxth	r2, r3
 800864e:	f04f 0300 	mov.w	r3, #0
 8008652:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008656:	f7f8 faf9 	bl	8000c4c <__aeabi_uldivmod>
 800865a:	4313      	orrs	r3, r2
 800865c:	d02c      	beq.n	80086b8 <f_open+0x548>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008664:	4618      	mov	r0, r3
 8008666:	f7fc fec7 	bl	80053f8 <clust2sect>
 800866a:	66b8      	str	r0, [r7, #104]	; 0x68
 800866c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800866e:	2b00      	cmp	r3, #0
 8008670:	d103      	bne.n	800867a <f_open+0x50a>
						res = FR_INT_ERR;
 8008672:	2302      	movs	r3, #2
 8008674:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8008678:	e01e      	b.n	80086b8 <f_open+0x548>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	899b      	ldrh	r3, [r3, #12]
 800867e:	b29a      	uxth	r2, r3
 8008680:	f04f 0300 	mov.w	r3, #0
 8008684:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8008688:	f7f8 fae0 	bl	8000c4c <__aeabi_uldivmod>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008692:	441a      	add	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	7858      	ldrb	r0, [r3, #1]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086a6:	2301      	movs	r3, #1
 80086a8:	f7fc f9b6 	bl	8004a18 <disk_read>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <f_open+0x548>
 80086b2:	2301      	movs	r3, #1
 80086b4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80086b8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <f_open+0x556>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80086c6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3788      	adds	r7, #136	; 0x88
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bdb0      	pop	{r4, r5, r7, pc}

080086d2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80086d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086d6:	b091      	sub	sp, #68	; 0x44
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
 80086e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f107 0214 	add.w	r2, r7, #20
 80086f2:	4611      	mov	r1, r2
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff fcbf 	bl	8008078 <validate>
 80086fa:	4603      	mov	r3, r0
 80086fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008700:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008704:	2b00      	cmp	r3, #0
 8008706:	d108      	bne.n	800871a <f_read+0x48>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800870e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008712:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <f_read+0x4e>
 800871a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800871e:	e15f      	b.n	80089e0 <f_read+0x30e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <f_read+0x60>
 800872e:	2307      	movs	r3, #7
 8008730:	e156      	b.n	80089e0 <f_read+0x30e>
	remain = fp->obj.objsize - fp->fptr;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800873e:	ebb0 0802 	subs.w	r8, r0, r2
 8008742:	eb61 0903 	sbc.w	r9, r1, r3
 8008746:	e9c7 8908 	strd	r8, r9, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	461a      	mov	r2, r3
 800874e:	f04f 0300 	mov.w	r3, #0
 8008752:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008756:	4299      	cmp	r1, r3
 8008758:	bf08      	it	eq
 800875a:	4290      	cmpeq	r0, r2
 800875c:	f080 813b 	bcs.w	80089d6 <f_read+0x304>
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008764:	e137      	b.n	80089d6 <f_read+0x304>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	899b      	ldrh	r3, [r3, #12]
 8008770:	b29a      	uxth	r2, r3
 8008772:	f04f 0300 	mov.w	r3, #0
 8008776:	f7f8 fa69 	bl	8000c4c <__aeabi_uldivmod>
 800877a:	4313      	orrs	r3, r2
 800877c:	f040 80e6 	bne.w	800894c <f_read+0x27a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	899b      	ldrh	r3, [r3, #12]
 800878a:	b29a      	uxth	r2, r3
 800878c:	f04f 0300 	mov.w	r3, #0
 8008790:	f7f8 fa5c 	bl	8000c4c <__aeabi_uldivmod>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	895b      	ldrh	r3, [r3, #10]
 800879c:	3b01      	subs	r3, #1
 800879e:	4013      	ands	r3, r2
 80087a0:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d132      	bne.n	800880e <f_read+0x13c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80087ae:	4313      	orrs	r3, r2
 80087b0:	d103      	bne.n	80087ba <f_read+0xe8>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80087b8:	e013      	b.n	80087e2 <f_read+0x110>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d007      	beq.n	80087d2 <f_read+0x100>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f7fd fbb8 	bl	8005f3e <clmt_clust>
 80087ce:	63b8      	str	r0, [r7, #56]	; 0x38
 80087d0:	e007      	b.n	80087e2 <f_read+0x110>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d8:	4619      	mov	r1, r3
 80087da:	4610      	mov	r0, r2
 80087dc:	f7fc fe2c 	bl	8005438 <get_fat>
 80087e0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80087e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d805      	bhi.n	80087f4 <f_read+0x122>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80087f0:	2302      	movs	r3, #2
 80087f2:	e0f5      	b.n	80089e0 <f_read+0x30e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fa:	d105      	bne.n	8008808 <f_read+0x136>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8008804:	2301      	movs	r3, #1
 8008806:	e0eb      	b.n	80089e0 <f_read+0x30e>
				fp->clust = clst;				/* Update current cluster */
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800880c:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008814:	4619      	mov	r1, r3
 8008816:	4610      	mov	r0, r2
 8008818:	f7fc fdee 	bl	80053f8 <clust2sect>
 800881c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d105      	bne.n	8008830 <f_read+0x15e>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800882c:	2302      	movs	r3, #2
 800882e:	e0d7      	b.n	80089e0 <f_read+0x30e>
			sect += csect;
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	4413      	add	r3, r2
 8008836:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	899b      	ldrh	r3, [r3, #12]
 800883c:	461a      	mov	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	fbb3 f3f2 	udiv	r3, r3, r2
 8008844:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	2b00      	cmp	r3, #0
 800884a:	d043      	beq.n	80088d4 <f_read+0x202>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800884c:	69fa      	ldr	r2, [r7, #28]
 800884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008850:	4413      	add	r3, r2
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	8952      	ldrh	r2, [r2, #10]
 8008856:	4293      	cmp	r3, r2
 8008858:	d905      	bls.n	8008866 <f_read+0x194>
					cc = fs->csize - csect;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	895b      	ldrh	r3, [r3, #10]
 800885e:	461a      	mov	r2, r3
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	7858      	ldrb	r0, [r3, #1]
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	69ba      	ldr	r2, [r7, #24]
 800886e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008870:	f7fc f8d2 	bl	8004a18 <disk_read>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d005      	beq.n	8008886 <f_read+0x1b4>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8008882:	2301      	movs	r3, #1
 8008884:	e0ac      	b.n	80089e0 <f_read+0x30e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800888c:	b25b      	sxtb	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	da18      	bge.n	80088c4 <f_read+0x1f2>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800889c:	429a      	cmp	r2, r3
 800889e:	d911      	bls.n	80088c4 <f_read+0x1f2>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	8992      	ldrh	r2, [r2, #12]
 80088ac:	fb02 f303 	mul.w	r3, r2, r3
 80088b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088b2:	18d0      	adds	r0, r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	899b      	ldrh	r3, [r3, #12]
 80088be:	461a      	mov	r2, r3
 80088c0:	f7fc facd 	bl	8004e5e <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	899b      	ldrh	r3, [r3, #12]
 80088c8:	461a      	mov	r2, r3
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	fb02 f303 	mul.w	r3, r2, r3
 80088d0:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 80088d2:	e065      	b.n	80089a0 <f_read+0x2ce>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d8:	69ba      	ldr	r2, [r7, #24]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d033      	beq.n	8008946 <f_read+0x274>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088e4:	b25b      	sxtb	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	da1b      	bge.n	8008922 <f_read+0x250>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	7858      	ldrb	r0, [r3, #1]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088f8:	2301      	movs	r3, #1
 80088fa:	f7fc f8ad 	bl	8004a58 <disk_write>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <f_read+0x23e>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800890c:	2301      	movs	r3, #1
 800890e:	e067      	b.n	80089e0 <f_read+0x30e>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800891a:	b2da      	uxtb	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	7858      	ldrb	r0, [r3, #1]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800892c:	2301      	movs	r3, #1
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	f7fc f872 	bl	8004a18 <disk_read>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d005      	beq.n	8008946 <f_read+0x274>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8008942:	2301      	movs	r3, #1
 8008944:	e04c      	b.n	80089e0 <f_read+0x30e>
			}
#endif
			fp->sect = sect;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	899b      	ldrh	r3, [r3, #12]
 8008950:	4618      	mov	r0, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008958:	4613      	mov	r3, r2
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	8992      	ldrh	r2, [r2, #12]
 800895e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008962:	fb02 f201 	mul.w	r2, r2, r1
 8008966:	1a9b      	subs	r3, r3, r2
 8008968:	1ac3      	subs	r3, r0, r3
 800896a:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800896c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	429a      	cmp	r2, r3
 8008972:	d901      	bls.n	8008978 <f_read+0x2a6>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f103 0654 	add.w	r6, r3, #84	; 0x54
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	899b      	ldrh	r3, [r3, #12]
 8008988:	b29a      	uxth	r2, r3
 800898a:	f04f 0300 	mov.w	r3, #0
 800898e:	f7f8 f95d 	bl	8000c4c <__aeabi_uldivmod>
 8008992:	4613      	mov	r3, r2
 8008994:	4433      	add	r3, r6
 8008996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008998:	4619      	mov	r1, r3
 800899a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800899c:	f7fc fa5f 	bl	8004e5e <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80089a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a4:	4413      	add	r3, r2
 80089a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80089ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b0:	461a      	mov	r2, r3
 80089b2:	f04f 0300 	mov.w	r3, #0
 80089b6:	1884      	adds	r4, r0, r2
 80089b8:	eb41 0503 	adc.w	r5, r1, r3
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c8:	441a      	add	r2, r3
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f47f aec4 	bne.w	8008766 <f_read+0x94>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3744      	adds	r7, #68	; 0x44
 80089e4:	46bd      	mov	sp, r7
 80089e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080089ea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80089ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ec:	b08d      	sub	sp, #52	; 0x34
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	60b9      	str	r1, [r7, #8]
 80089f4:	607a      	str	r2, [r7, #4]
 80089f6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	2200      	movs	r2, #0
 8008a00:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f107 0210 	add.w	r2, r7, #16
 8008a08:	4611      	mov	r1, r2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff fb34 	bl	8008078 <validate>
 8008a10:	4603      	mov	r3, r0
 8008a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d108      	bne.n	8008a30 <f_write+0x46>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008a28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <f_write+0x4c>
 8008a30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a34:	e1a1      	b.n	8008d7a <f_write+0x390>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a3c:	f003 0302 	and.w	r3, r3, #2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d101      	bne.n	8008a48 <f_write+0x5e>
 8008a44:	2307      	movs	r3, #7
 8008a46:	e198      	b.n	8008d7a <f_write+0x390>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	f000 8184 	beq.w	8008d5a <f_write+0x370>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	18d1      	adds	r1, r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008a62:	4613      	mov	r3, r2
 8008a64:	4299      	cmp	r1, r3
 8008a66:	f080 8178 	bcs.w	8008d5a <f_write+0x370>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008a70:	4613      	mov	r3, r2
 8008a72:	43db      	mvns	r3, r3
 8008a74:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008a76:	e170      	b.n	8008d5a <f_write+0x370>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	899b      	ldrh	r3, [r3, #12]
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	f04f 0300 	mov.w	r3, #0
 8008a88:	f7f8 f8e0 	bl	8000c4c <__aeabi_uldivmod>
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	f040 8107 	bne.w	8008ca0 <f_write+0x2b6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	899b      	ldrh	r3, [r3, #12]
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	f04f 0300 	mov.w	r3, #0
 8008aa2:	f7f8 f8d3 	bl	8000c4c <__aeabi_uldivmod>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	895b      	ldrh	r3, [r3, #10]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d146      	bne.n	8008b48 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	d10c      	bne.n	8008ade <f_write+0xf4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d11a      	bne.n	8008b06 <f_write+0x11c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7fd f931 	bl	8005d3c <create_chain>
 8008ada:	62b8      	str	r0, [r7, #40]	; 0x28
 8008adc:	e013      	b.n	8008b06 <f_write+0x11c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d007      	beq.n	8008af6 <f_write+0x10c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f7fd fa26 	bl	8005f3e <clmt_clust>
 8008af2:	62b8      	str	r0, [r7, #40]	; 0x28
 8008af4:	e007      	b.n	8008b06 <f_write+0x11c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afc:	4619      	mov	r1, r3
 8008afe:	4610      	mov	r0, r2
 8008b00:	f7fd f91c 	bl	8005d3c <create_chain>
 8008b04:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 812b 	beq.w	8008d64 <f_write+0x37a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d105      	bne.n	8008b20 <f_write+0x136>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2202      	movs	r2, #2
 8008b18:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	e12c      	b.n	8008d7a <f_write+0x390>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b26:	d105      	bne.n	8008b34 <f_write+0x14a>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8008b30:	2301      	movs	r3, #1
 8008b32:	e122      	b.n	8008d7a <f_write+0x390>
				fp->clust = clst;			/* Update current cluster */
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b38:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d102      	bne.n	8008b48 <f_write+0x15e>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b46:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b4e:	b25b      	sxtb	r3, r3
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	da1b      	bge.n	8008b8c <f_write+0x1a2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	7858      	ldrb	r0, [r3, #1]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b62:	2301      	movs	r3, #1
 8008b64:	f7fb ff78 	bl	8004a58 <disk_write>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d005      	beq.n	8008b7a <f_write+0x190>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8008b76:	2301      	movs	r3, #1
 8008b78:	e0ff      	b.n	8008d7a <f_write+0x390>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b92:	4619      	mov	r1, r3
 8008b94:	4610      	mov	r0, r2
 8008b96:	f7fc fc2f 	bl	80053f8 <clust2sect>
 8008b9a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d105      	bne.n	8008bae <f_write+0x1c4>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8008baa:	2302      	movs	r3, #2
 8008bac:	e0e5      	b.n	8008d7a <f_write+0x390>
			sect += csect;
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	899b      	ldrh	r3, [r3, #12]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bc2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d046      	beq.n	8008c58 <f_write+0x26e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	4413      	add	r3, r2
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	8952      	ldrh	r2, [r2, #10]
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d905      	bls.n	8008be4 <f_write+0x1fa>
					cc = fs->csize - csect;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	895b      	ldrh	r3, [r3, #10]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	7858      	ldrb	r0, [r3, #1]
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	69f9      	ldr	r1, [r7, #28]
 8008bee:	f7fb ff33 	bl	8004a58 <disk_write>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d005      	beq.n	8008c04 <f_write+0x21a>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8008c00:	2301      	movs	r3, #1
 8008c02:	e0ba      	b.n	8008d7a <f_write+0x390>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	6a3a      	ldr	r2, [r7, #32]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d91a      	bls.n	8008c48 <f_write+0x25e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	8992      	ldrh	r2, [r2, #12]
 8008c24:	fb02 f303 	mul.w	r3, r2, r3
 8008c28:	69fa      	ldr	r2, [r7, #28]
 8008c2a:	18d1      	adds	r1, r2, r3
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	899b      	ldrh	r3, [r3, #12]
 8008c30:	461a      	mov	r2, r3
 8008c32:	f7fc f914 	bl	8004e5e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	899b      	ldrh	r3, [r3, #12]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	fb02 f303 	mul.w	r3, r2, r3
 8008c54:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008c56:	e056      	b.n	8008d06 <f_write+0x31c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d01b      	beq.n	8008c9a <f_write+0x2b0>
				fp->fptr < fp->obj.objsize &&
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008c6e:	4299      	cmp	r1, r3
 8008c70:	bf08      	it	eq
 8008c72:	4290      	cmpeq	r0, r2
 8008c74:	d211      	bcs.n	8008c9a <f_write+0x2b0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	7858      	ldrb	r0, [r3, #1]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008c80:	2301      	movs	r3, #1
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	f7fb fec8 	bl	8004a18 <disk_read>
 8008c88:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d005      	beq.n	8008c9a <f_write+0x2b0>
					ABORT(fs, FR_DISK_ERR);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8008c96:	2301      	movs	r3, #1
 8008c98:	e06f      	b.n	8008d7a <f_write+0x390>
			}
#endif
			fp->sect = sect;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	899b      	ldrh	r3, [r3, #12]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008cac:	4613      	mov	r3, r2
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	8992      	ldrh	r2, [r2, #12]
 8008cb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cb6:	fb02 f201 	mul.w	r2, r2, r1
 8008cba:	1a9b      	subs	r3, r3, r2
 8008cbc:	1ac3      	subs	r3, r0, r3
 8008cbe:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d901      	bls.n	8008ccc <f_write+0x2e2>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f103 0654 	add.w	r6, r3, #84	; 0x54
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	899b      	ldrh	r3, [r3, #12]
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	f04f 0300 	mov.w	r3, #0
 8008ce2:	f7f7 ffb3 	bl	8000c4c <__aeabi_uldivmod>
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	4433      	add	r3, r6
 8008cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cec:	69f9      	ldr	r1, [r7, #28]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fc f8b5 	bl	8004e5e <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008cfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008d06:	69fa      	ldr	r2, [r7, #28]
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	4413      	add	r3, r2
 8008d0c:	61fb      	str	r3, [r7, #28]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	461a      	mov	r2, r3
 8008d18:	f04f 0300 	mov.w	r3, #0
 8008d1c:	1884      	adds	r4, r0, r2
 8008d1e:	eb41 0503 	adc.w	r5, r1, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008d2e:	68f9      	ldr	r1, [r7, #12]
 8008d30:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 8008d34:	428b      	cmp	r3, r1
 8008d36:	bf08      	it	eq
 8008d38:	4282      	cmpeq	r2, r0
 8008d3a:	d201      	bcs.n	8008d40 <f_write+0x356>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	68f9      	ldr	r1, [r7, #12]
 8008d42:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	441a      	add	r2, r3
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f47f ae8b 	bne.w	8008a78 <f_write+0x8e>
 8008d62:	e000      	b.n	8008d66 <f_write+0x37c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d64:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3734      	adds	r7, #52	; 0x34
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d82 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b09a      	sub	sp, #104	; 0x68
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008d90:	4611      	mov	r1, r2
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7ff f970 	bl	8008078 <validate>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008d9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f040 8105 	bne.w	8008fb2 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 80fd 	beq.w	8008fb2 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008dbe:	b25b      	sxtb	r3, r3
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	da17      	bge.n	8008df4 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008dc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dc6:	7858      	ldrb	r0, [r3, #1]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	f7fb fe40 	bl	8004a58 <disk_write>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <f_sync+0x60>
 8008dde:	2301      	movs	r3, #1
 8008de0:	e0e9      	b.n	8008fb6 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008df4:	f7fb fd70 	bl	80048d8 <get_fattime>
 8008df8:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8008dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	f040 808c 	bne.w	8008f1c <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fc fe84 	bl	8005b14 <fill_first_frag>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8008e12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10a      	bne.n	8008e30 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e20:	f04f 32ff 	mov.w	r2, #4294967295
 8008e24:	4619      	mov	r1, r3
 8008e26:	f7fc fea4 	bl	8005b72 <fill_last_frag>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 8008e30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f040 80bc 	bne.w	8008fb2 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	f107 0308 	add.w	r3, r7, #8
 8008e40:	4611      	mov	r1, r2
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fd fde6 	bl	8006a14 <load_obj_dir>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 8008e4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f040 80ad 	bne.w	8008fb2 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8008e58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	781a      	ldrb	r2, [r3, #0]
 8008e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	3304      	adds	r3, #4
 8008e66:	f042 0220 	orr.w	r2, r2, #32
 8008e6a:	b2d2      	uxtb	r2, r2
 8008e6c:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	79da      	ldrb	r2, [r3, #7]
 8008e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	3321      	adds	r3, #33	; 0x21
 8008e78:	f042 0201 	orr.w	r2, r2, #1
 8008e7c:	b2d2      	uxtb	r2, r2
 8008e7e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8008e80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f7fb ff31 	bl	8004cf6 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8008e94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008ea2:	4608      	mov	r0, r1
 8008ea4:	f7fb ff53 	bl	8004d4e <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8008ea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008eb6:	4608      	mov	r0, r1
 8008eb8:	f7fb ff49 	bl	8004d4e <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8008ebc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	330c      	adds	r3, #12
 8008ec2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fb ff16 	bl	8004cf6 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8008eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	3315      	adds	r3, #21
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8008ed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	3310      	adds	r3, #16
 8008eda:	2100      	movs	r1, #0
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fb ff0a 	bl	8004cf6 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8008ee2:	f107 0308 	add.w	r3, r7, #8
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fd fdcf 	bl	8006a8a <store_xdir>
 8008eec:	4603      	mov	r3, r0
 8008eee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008ef2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d15b      	bne.n	8008fb2 <f_sync+0x230>
							res = sync_fs(fs);
 8008efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7fc fa0b 	bl	8005318 <sync_fs>
 8008f02:	4603      	mov	r3, r0
 8008f04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8008f1a:	e04a      	b.n	8008fb2 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008f1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f22:	4619      	mov	r1, r3
 8008f24:	4610      	mov	r0, r2
 8008f26:	f7fc f9c9 	bl	80052bc <move_window>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8008f30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d13c      	bne.n	8008fb2 <f_sync+0x230>
					dir = fp->dir_ptr;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f40:	330b      	adds	r3, #11
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f46:	330b      	adds	r3, #11
 8008f48:	f042 0220 	orr.w	r2, r2, #32
 8008f4c:	b2d2      	uxtb	r2, r2
 8008f4e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6818      	ldr	r0, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008f5c:	f7fd fa28 	bl	80063b0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f62:	f103 001c 	add.w	r0, r3, #28
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	4619      	mov	r1, r3
 8008f70:	f7fb fec1 	bl	8004cf6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008f74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f76:	3316      	adds	r3, #22
 8008f78:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fb febb 	bl	8004cf6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f82:	3312      	adds	r3, #18
 8008f84:	2100      	movs	r1, #0
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fb fe9a 	bl	8004cc0 <st_word>
					fs->wflag = 1;
 8008f8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f8e:	2201      	movs	r2, #1
 8008f90:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fc f9bf 	bl	8005318 <sync_fs>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008fb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3768      	adds	r7, #104	; 0x68
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7ff fedb 	bl	8008d82 <f_sync>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d118      	bne.n	8009008 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f107 0208 	add.w	r2, r7, #8
 8008fdc:	4611      	mov	r1, r2
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7ff f84a 	bl	8008078 <validate>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10c      	bne.n	8009008 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fc f8be 	bl	8005174 <dec_lock>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d102      	bne.n	8009008 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009008:	7bfb      	ldrb	r3, [r7, #15]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b088      	sub	sp, #32
 8009016:	af00      	add	r7, sp, #0
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800901e:	2300      	movs	r3, #0
 8009020:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009026:	e01b      	b.n	8009060 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009028:	f107 0310 	add.w	r3, r7, #16
 800902c:	f107 0114 	add.w	r1, r7, #20
 8009030:	2201      	movs	r2, #1
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff fb4d 	bl	80086d2 <f_read>
		if (rc != 1) break;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d116      	bne.n	800906c <f_gets+0x5a>
		c = s[0];
 800903e:	7d3b      	ldrb	r3, [r7, #20]
 8009040:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009042:	7dfb      	ldrb	r3, [r7, #23]
 8009044:	2b0d      	cmp	r3, #13
 8009046:	d100      	bne.n	800904a <f_gets+0x38>
 8009048:	e00a      	b.n	8009060 <f_gets+0x4e>
		*p++ = c;
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	1c5a      	adds	r2, r3, #1
 800904e:	61ba      	str	r2, [r7, #24]
 8009050:	7dfa      	ldrb	r2, [r7, #23]
 8009052:	701a      	strb	r2, [r3, #0]
		n++;
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	3301      	adds	r3, #1
 8009058:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800905a:	7dfb      	ldrb	r3, [r7, #23]
 800905c:	2b0a      	cmp	r3, #10
 800905e:	d007      	beq.n	8009070 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	3b01      	subs	r3, #1
 8009064:	69fa      	ldr	r2, [r7, #28]
 8009066:	429a      	cmp	r2, r3
 8009068:	dbde      	blt.n	8009028 <f_gets+0x16>
 800906a:	e002      	b.n	8009072 <f_gets+0x60>
		if (rc != 1) break;
 800906c:	bf00      	nop
 800906e:	e000      	b.n	8009072 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8009070:	bf00      	nop
	}
	*p = 0;
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	2200      	movs	r2, #0
 8009076:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <f_gets+0x70>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	e000      	b.n	8009084 <f_gets+0x72>
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3720      	adds	r7, #32
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	2b0a      	cmp	r3, #10
 800909c:	d103      	bne.n	80090a6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800909e:	210d      	movs	r1, #13
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff fff3 	bl	800908c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	db25      	blt.n	80090fe <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	1c5a      	adds	r2, r3, #1
 80090b6:	60fa      	str	r2, [r7, #12]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	4413      	add	r3, r2
 80090bc:	78fa      	ldrb	r2, [r7, #3]
 80090be:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b3c      	cmp	r3, #60	; 0x3c
 80090c4:	dd12      	ble.n	80090ec <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f103 010c 	add.w	r1, r3, #12
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	f107 0308 	add.w	r3, r7, #8
 80090d6:	f7ff fc88 	bl	80089ea <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d101      	bne.n	80090e6 <putc_bfd+0x5a>
 80090e2:	2300      	movs	r3, #0
 80090e4:	e001      	b.n	80090ea <putc_bfd+0x5e>
 80090e6:	f04f 33ff 	mov.w	r3, #4294967295
 80090ea:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	1c5a      	adds	r2, r3, #1
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	609a      	str	r2, [r3, #8]
 80090fc:	e000      	b.n	8009100 <putc_bfd+0x74>
	if (i < 0) return;
 80090fe:	bf00      	nop
}
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	db16      	blt.n	8009144 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6818      	ldr	r0, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f103 010c 	add.w	r1, r3, #12
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	461a      	mov	r2, r3
 8009126:	f107 030c 	add.w	r3, r7, #12
 800912a:	f7ff fc5e 	bl	80089ea <f_write>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d107      	bne.n	8009144 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	4293      	cmp	r3, r2
 800913c:	d102      	bne.n	8009144 <putc_flush+0x3e>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	e001      	b.n	8009148 <putc_flush+0x42>
	return EOF;
 8009144:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	605a      	str	r2, [r3, #4]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	609a      	str	r2, [r3, #8]
}
 800916e:	bf00      	nop
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b096      	sub	sp, #88	; 0x58
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8009184:	f107 030c 	add.w	r3, r7, #12
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	4618      	mov	r0, r3
 800918c:	f7ff ffe0 	bl	8009150 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009190:	e009      	b.n	80091a6 <f_puts+0x2c>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	607a      	str	r2, [r7, #4]
 8009198:	781a      	ldrb	r2, [r3, #0]
 800919a:	f107 030c 	add.w	r3, r7, #12
 800919e:	4611      	mov	r1, r2
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7ff ff73 	bl	800908c <putc_bfd>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1f1      	bne.n	8009192 <f_puts+0x18>
	return putc_flush(&pb);
 80091ae:	f107 030c 	add.w	r3, r7, #12
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7ff ffa7 	bl	8009106 <putc_flush>
 80091b8:	4603      	mov	r3, r0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3758      	adds	r7, #88	; 0x58
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
	...

080091c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	4613      	mov	r3, r2
 80091d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80091d2:	2301      	movs	r3, #1
 80091d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80091da:	4b1f      	ldr	r3, [pc, #124]	; (8009258 <FATFS_LinkDriverEx+0x94>)
 80091dc:	7a5b      	ldrb	r3, [r3, #9]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d131      	bne.n	8009248 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80091e4:	4b1c      	ldr	r3, [pc, #112]	; (8009258 <FATFS_LinkDriverEx+0x94>)
 80091e6:	7a5b      	ldrb	r3, [r3, #9]
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	461a      	mov	r2, r3
 80091ec:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <FATFS_LinkDriverEx+0x94>)
 80091ee:	2100      	movs	r1, #0
 80091f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80091f2:	4b19      	ldr	r3, [pc, #100]	; (8009258 <FATFS_LinkDriverEx+0x94>)
 80091f4:	7a5b      	ldrb	r3, [r3, #9]
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	4a17      	ldr	r2, [pc, #92]	; (8009258 <FATFS_LinkDriverEx+0x94>)
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009202:	4b15      	ldr	r3, [pc, #84]	; (8009258 <FATFS_LinkDriverEx+0x94>)
 8009204:	7a5b      	ldrb	r3, [r3, #9]
 8009206:	b2db      	uxtb	r3, r3
 8009208:	461a      	mov	r2, r3
 800920a:	4b13      	ldr	r3, [pc, #76]	; (8009258 <FATFS_LinkDriverEx+0x94>)
 800920c:	4413      	add	r3, r2
 800920e:	79fa      	ldrb	r2, [r7, #7]
 8009210:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009212:	4b11      	ldr	r3, [pc, #68]	; (8009258 <FATFS_LinkDriverEx+0x94>)
 8009214:	7a5b      	ldrb	r3, [r3, #9]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	1c5a      	adds	r2, r3, #1
 800921a:	b2d1      	uxtb	r1, r2
 800921c:	4a0e      	ldr	r2, [pc, #56]	; (8009258 <FATFS_LinkDriverEx+0x94>)
 800921e:	7251      	strb	r1, [r2, #9]
 8009220:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009222:	7dbb      	ldrb	r3, [r7, #22]
 8009224:	3330      	adds	r3, #48	; 0x30
 8009226:	b2da      	uxtb	r2, r3
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	3301      	adds	r3, #1
 8009230:	223a      	movs	r2, #58	; 0x3a
 8009232:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	3302      	adds	r3, #2
 8009238:	222f      	movs	r2, #47	; 0x2f
 800923a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	3303      	adds	r3, #3
 8009240:	2200      	movs	r2, #0
 8009242:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009244:	2300      	movs	r3, #0
 8009246:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009248:	7dfb      	ldrb	r3, [r7, #23]
}
 800924a:	4618      	mov	r0, r3
 800924c:	371c      	adds	r7, #28
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	200006f8 	.word	0x200006f8

0800925c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009266:	2200      	movs	r2, #0
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7ff ffaa 	bl	80091c4 <FATFS_LinkDriverEx>
 8009270:	4603      	mov	r3, r0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	6039      	str	r1, [r7, #0]
 8009286:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009288:	88fb      	ldrh	r3, [r7, #6]
 800928a:	2b7f      	cmp	r3, #127	; 0x7f
 800928c:	d802      	bhi.n	8009294 <ff_convert+0x18>
		c = chr;
 800928e:	88fb      	ldrh	r3, [r7, #6]
 8009290:	81fb      	strh	r3, [r7, #14]
 8009292:	e025      	b.n	80092e0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00b      	beq.n	80092b2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800929a:	88fb      	ldrh	r3, [r7, #6]
 800929c:	2bff      	cmp	r3, #255	; 0xff
 800929e:	d805      	bhi.n	80092ac <ff_convert+0x30>
 80092a0:	88fb      	ldrh	r3, [r7, #6]
 80092a2:	3b80      	subs	r3, #128	; 0x80
 80092a4:	4a12      	ldr	r2, [pc, #72]	; (80092f0 <ff_convert+0x74>)
 80092a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092aa:	e000      	b.n	80092ae <ff_convert+0x32>
 80092ac:	2300      	movs	r3, #0
 80092ae:	81fb      	strh	r3, [r7, #14]
 80092b0:	e016      	b.n	80092e0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80092b2:	2300      	movs	r3, #0
 80092b4:	81fb      	strh	r3, [r7, #14]
 80092b6:	e009      	b.n	80092cc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80092b8:	89fb      	ldrh	r3, [r7, #14]
 80092ba:	4a0d      	ldr	r2, [pc, #52]	; (80092f0 <ff_convert+0x74>)
 80092bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092c0:	88fa      	ldrh	r2, [r7, #6]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d006      	beq.n	80092d4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80092c6:	89fb      	ldrh	r3, [r7, #14]
 80092c8:	3301      	adds	r3, #1
 80092ca:	81fb      	strh	r3, [r7, #14]
 80092cc:	89fb      	ldrh	r3, [r7, #14]
 80092ce:	2b7f      	cmp	r3, #127	; 0x7f
 80092d0:	d9f2      	bls.n	80092b8 <ff_convert+0x3c>
 80092d2:	e000      	b.n	80092d6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80092d4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80092d6:	89fb      	ldrh	r3, [r7, #14]
 80092d8:	3380      	adds	r3, #128	; 0x80
 80092da:	b29b      	uxth	r3, r3
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80092e0:	89fb      	ldrh	r3, [r7, #14]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3714      	adds	r7, #20
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	0800c7a8 	.word	0x0800c7a8

080092f4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b087      	sub	sp, #28
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	4603      	mov	r3, r0
 80092fc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80092fe:	88fb      	ldrh	r3, [r7, #6]
 8009300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009304:	d201      	bcs.n	800930a <ff_wtoupper+0x16>
 8009306:	4b3e      	ldr	r3, [pc, #248]	; (8009400 <ff_wtoupper+0x10c>)
 8009308:	e000      	b.n	800930c <ff_wtoupper+0x18>
 800930a:	4b3e      	ldr	r3, [pc, #248]	; (8009404 <ff_wtoupper+0x110>)
 800930c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	1c9a      	adds	r2, r3, #2
 8009312:	617a      	str	r2, [r7, #20]
 8009314:	881b      	ldrh	r3, [r3, #0]
 8009316:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009318:	8a7b      	ldrh	r3, [r7, #18]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d068      	beq.n	80093f0 <ff_wtoupper+0xfc>
 800931e:	88fa      	ldrh	r2, [r7, #6]
 8009320:	8a7b      	ldrh	r3, [r7, #18]
 8009322:	429a      	cmp	r2, r3
 8009324:	d364      	bcc.n	80093f0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	1c9a      	adds	r2, r3, #2
 800932a:	617a      	str	r2, [r7, #20]
 800932c:	881b      	ldrh	r3, [r3, #0]
 800932e:	823b      	strh	r3, [r7, #16]
 8009330:	8a3b      	ldrh	r3, [r7, #16]
 8009332:	0a1b      	lsrs	r3, r3, #8
 8009334:	81fb      	strh	r3, [r7, #14]
 8009336:	8a3b      	ldrh	r3, [r7, #16]
 8009338:	b2db      	uxtb	r3, r3
 800933a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800933c:	88fa      	ldrh	r2, [r7, #6]
 800933e:	8a79      	ldrh	r1, [r7, #18]
 8009340:	8a3b      	ldrh	r3, [r7, #16]
 8009342:	440b      	add	r3, r1
 8009344:	429a      	cmp	r2, r3
 8009346:	da49      	bge.n	80093dc <ff_wtoupper+0xe8>
			switch (cmd) {
 8009348:	89fb      	ldrh	r3, [r7, #14]
 800934a:	2b08      	cmp	r3, #8
 800934c:	d84f      	bhi.n	80093ee <ff_wtoupper+0xfa>
 800934e:	a201      	add	r2, pc, #4	; (adr r2, 8009354 <ff_wtoupper+0x60>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	08009379 	.word	0x08009379
 8009358:	0800938b 	.word	0x0800938b
 800935c:	080093a1 	.word	0x080093a1
 8009360:	080093a9 	.word	0x080093a9
 8009364:	080093b1 	.word	0x080093b1
 8009368:	080093b9 	.word	0x080093b9
 800936c:	080093c1 	.word	0x080093c1
 8009370:	080093c9 	.word	0x080093c9
 8009374:	080093d1 	.word	0x080093d1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009378:	88fa      	ldrh	r2, [r7, #6]
 800937a:	8a7b      	ldrh	r3, [r7, #18]
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	005b      	lsls	r3, r3, #1
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	4413      	add	r3, r2
 8009384:	881b      	ldrh	r3, [r3, #0]
 8009386:	80fb      	strh	r3, [r7, #6]
 8009388:	e027      	b.n	80093da <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800938a:	88fa      	ldrh	r2, [r7, #6]
 800938c:	8a7b      	ldrh	r3, [r7, #18]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	b29b      	uxth	r3, r3
 8009392:	f003 0301 	and.w	r3, r3, #1
 8009396:	b29b      	uxth	r3, r3
 8009398:	88fa      	ldrh	r2, [r7, #6]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	80fb      	strh	r3, [r7, #6]
 800939e:	e01c      	b.n	80093da <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80093a0:	88fb      	ldrh	r3, [r7, #6]
 80093a2:	3b10      	subs	r3, #16
 80093a4:	80fb      	strh	r3, [r7, #6]
 80093a6:	e018      	b.n	80093da <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80093a8:	88fb      	ldrh	r3, [r7, #6]
 80093aa:	3b20      	subs	r3, #32
 80093ac:	80fb      	strh	r3, [r7, #6]
 80093ae:	e014      	b.n	80093da <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80093b0:	88fb      	ldrh	r3, [r7, #6]
 80093b2:	3b30      	subs	r3, #48	; 0x30
 80093b4:	80fb      	strh	r3, [r7, #6]
 80093b6:	e010      	b.n	80093da <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80093b8:	88fb      	ldrh	r3, [r7, #6]
 80093ba:	3b1a      	subs	r3, #26
 80093bc:	80fb      	strh	r3, [r7, #6]
 80093be:	e00c      	b.n	80093da <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80093c0:	88fb      	ldrh	r3, [r7, #6]
 80093c2:	3308      	adds	r3, #8
 80093c4:	80fb      	strh	r3, [r7, #6]
 80093c6:	e008      	b.n	80093da <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80093c8:	88fb      	ldrh	r3, [r7, #6]
 80093ca:	3b50      	subs	r3, #80	; 0x50
 80093cc:	80fb      	strh	r3, [r7, #6]
 80093ce:	e004      	b.n	80093da <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80093d0:	88fb      	ldrh	r3, [r7, #6]
 80093d2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80093d6:	80fb      	strh	r3, [r7, #6]
 80093d8:	bf00      	nop
			}
			break;
 80093da:	e008      	b.n	80093ee <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80093dc:	89fb      	ldrh	r3, [r7, #14]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d195      	bne.n	800930e <ff_wtoupper+0x1a>
 80093e2:	8a3b      	ldrh	r3, [r7, #16]
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	4413      	add	r3, r2
 80093ea:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80093ec:	e78f      	b.n	800930e <ff_wtoupper+0x1a>
			break;
 80093ee:	bf00      	nop
	}

	return chr;
 80093f0:	88fb      	ldrh	r3, [r7, #6]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	371c      	adds	r7, #28
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	0800c8a8 	.word	0x0800c8a8
 8009404:	0800ca9c 	.word	0x0800ca9c

08009408 <atof>:
 8009408:	2100      	movs	r1, #0
 800940a:	f000 be93 	b.w	800a134 <strtod>
	...

08009410 <__errno>:
 8009410:	4b01      	ldr	r3, [pc, #4]	; (8009418 <__errno+0x8>)
 8009412:	6818      	ldr	r0, [r3, #0]
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	20000028 	.word	0x20000028

0800941c <__libc_init_array>:
 800941c:	b570      	push	{r4, r5, r6, lr}
 800941e:	4d0d      	ldr	r5, [pc, #52]	; (8009454 <__libc_init_array+0x38>)
 8009420:	4c0d      	ldr	r4, [pc, #52]	; (8009458 <__libc_init_array+0x3c>)
 8009422:	1b64      	subs	r4, r4, r5
 8009424:	10a4      	asrs	r4, r4, #2
 8009426:	2600      	movs	r6, #0
 8009428:	42a6      	cmp	r6, r4
 800942a:	d109      	bne.n	8009440 <__libc_init_array+0x24>
 800942c:	4d0b      	ldr	r5, [pc, #44]	; (800945c <__libc_init_array+0x40>)
 800942e:	4c0c      	ldr	r4, [pc, #48]	; (8009460 <__libc_init_array+0x44>)
 8009430:	f003 f874 	bl	800c51c <_init>
 8009434:	1b64      	subs	r4, r4, r5
 8009436:	10a4      	asrs	r4, r4, #2
 8009438:	2600      	movs	r6, #0
 800943a:	42a6      	cmp	r6, r4
 800943c:	d105      	bne.n	800944a <__libc_init_array+0x2e>
 800943e:	bd70      	pop	{r4, r5, r6, pc}
 8009440:	f855 3b04 	ldr.w	r3, [r5], #4
 8009444:	4798      	blx	r3
 8009446:	3601      	adds	r6, #1
 8009448:	e7ee      	b.n	8009428 <__libc_init_array+0xc>
 800944a:	f855 3b04 	ldr.w	r3, [r5], #4
 800944e:	4798      	blx	r3
 8009450:	3601      	adds	r6, #1
 8009452:	e7f2      	b.n	800943a <__libc_init_array+0x1e>
 8009454:	0800cf94 	.word	0x0800cf94
 8009458:	0800cf94 	.word	0x0800cf94
 800945c:	0800cf94 	.word	0x0800cf94
 8009460:	0800cf98 	.word	0x0800cf98

08009464 <memset>:
 8009464:	4402      	add	r2, r0
 8009466:	4603      	mov	r3, r0
 8009468:	4293      	cmp	r3, r2
 800946a:	d100      	bne.n	800946e <memset+0xa>
 800946c:	4770      	bx	lr
 800946e:	f803 1b01 	strb.w	r1, [r3], #1
 8009472:	e7f9      	b.n	8009468 <memset+0x4>

08009474 <iprintf>:
 8009474:	b40f      	push	{r0, r1, r2, r3}
 8009476:	4b0a      	ldr	r3, [pc, #40]	; (80094a0 <iprintf+0x2c>)
 8009478:	b513      	push	{r0, r1, r4, lr}
 800947a:	681c      	ldr	r4, [r3, #0]
 800947c:	b124      	cbz	r4, 8009488 <iprintf+0x14>
 800947e:	69a3      	ldr	r3, [r4, #24]
 8009480:	b913      	cbnz	r3, 8009488 <iprintf+0x14>
 8009482:	4620      	mov	r0, r4
 8009484:	f000 feba 	bl	800a1fc <__sinit>
 8009488:	ab05      	add	r3, sp, #20
 800948a:	9a04      	ldr	r2, [sp, #16]
 800948c:	68a1      	ldr	r1, [r4, #8]
 800948e:	9301      	str	r3, [sp, #4]
 8009490:	4620      	mov	r0, r4
 8009492:	f002 f98d 	bl	800b7b0 <_vfiprintf_r>
 8009496:	b002      	add	sp, #8
 8009498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800949c:	b004      	add	sp, #16
 800949e:	4770      	bx	lr
 80094a0:	20000028 	.word	0x20000028

080094a4 <siprintf>:
 80094a4:	b40e      	push	{r1, r2, r3}
 80094a6:	b500      	push	{lr}
 80094a8:	b09c      	sub	sp, #112	; 0x70
 80094aa:	ab1d      	add	r3, sp, #116	; 0x74
 80094ac:	9002      	str	r0, [sp, #8]
 80094ae:	9006      	str	r0, [sp, #24]
 80094b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094b4:	4809      	ldr	r0, [pc, #36]	; (80094dc <siprintf+0x38>)
 80094b6:	9107      	str	r1, [sp, #28]
 80094b8:	9104      	str	r1, [sp, #16]
 80094ba:	4909      	ldr	r1, [pc, #36]	; (80094e0 <siprintf+0x3c>)
 80094bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80094c0:	9105      	str	r1, [sp, #20]
 80094c2:	6800      	ldr	r0, [r0, #0]
 80094c4:	9301      	str	r3, [sp, #4]
 80094c6:	a902      	add	r1, sp, #8
 80094c8:	f002 f848 	bl	800b55c <_svfiprintf_r>
 80094cc:	9b02      	ldr	r3, [sp, #8]
 80094ce:	2200      	movs	r2, #0
 80094d0:	701a      	strb	r2, [r3, #0]
 80094d2:	b01c      	add	sp, #112	; 0x70
 80094d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094d8:	b003      	add	sp, #12
 80094da:	4770      	bx	lr
 80094dc:	20000028 	.word	0x20000028
 80094e0:	ffff0208 	.word	0xffff0208

080094e4 <sulp>:
 80094e4:	b570      	push	{r4, r5, r6, lr}
 80094e6:	4604      	mov	r4, r0
 80094e8:	460d      	mov	r5, r1
 80094ea:	ec45 4b10 	vmov	d0, r4, r5
 80094ee:	4616      	mov	r6, r2
 80094f0:	f001 fe20 	bl	800b134 <__ulp>
 80094f4:	ec51 0b10 	vmov	r0, r1, d0
 80094f8:	b17e      	cbz	r6, 800951a <sulp+0x36>
 80094fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80094fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009502:	2b00      	cmp	r3, #0
 8009504:	dd09      	ble.n	800951a <sulp+0x36>
 8009506:	051b      	lsls	r3, r3, #20
 8009508:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800950c:	2400      	movs	r4, #0
 800950e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009512:	4622      	mov	r2, r4
 8009514:	462b      	mov	r3, r5
 8009516:	f7f7 f88f 	bl	8000638 <__aeabi_dmul>
 800951a:	bd70      	pop	{r4, r5, r6, pc}
 800951c:	0000      	movs	r0, r0
	...

08009520 <_strtod_l>:
 8009520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009524:	b0a3      	sub	sp, #140	; 0x8c
 8009526:	461f      	mov	r7, r3
 8009528:	2300      	movs	r3, #0
 800952a:	931e      	str	r3, [sp, #120]	; 0x78
 800952c:	4ba4      	ldr	r3, [pc, #656]	; (80097c0 <_strtod_l+0x2a0>)
 800952e:	9219      	str	r2, [sp, #100]	; 0x64
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	9307      	str	r3, [sp, #28]
 8009534:	4604      	mov	r4, r0
 8009536:	4618      	mov	r0, r3
 8009538:	4688      	mov	r8, r1
 800953a:	f7f6 fe69 	bl	8000210 <strlen>
 800953e:	f04f 0a00 	mov.w	sl, #0
 8009542:	4605      	mov	r5, r0
 8009544:	f04f 0b00 	mov.w	fp, #0
 8009548:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800954c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800954e:	781a      	ldrb	r2, [r3, #0]
 8009550:	2a2b      	cmp	r2, #43	; 0x2b
 8009552:	d04c      	beq.n	80095ee <_strtod_l+0xce>
 8009554:	d839      	bhi.n	80095ca <_strtod_l+0xaa>
 8009556:	2a0d      	cmp	r2, #13
 8009558:	d832      	bhi.n	80095c0 <_strtod_l+0xa0>
 800955a:	2a08      	cmp	r2, #8
 800955c:	d832      	bhi.n	80095c4 <_strtod_l+0xa4>
 800955e:	2a00      	cmp	r2, #0
 8009560:	d03c      	beq.n	80095dc <_strtod_l+0xbc>
 8009562:	2300      	movs	r3, #0
 8009564:	930e      	str	r3, [sp, #56]	; 0x38
 8009566:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009568:	7833      	ldrb	r3, [r6, #0]
 800956a:	2b30      	cmp	r3, #48	; 0x30
 800956c:	f040 80b4 	bne.w	80096d8 <_strtod_l+0x1b8>
 8009570:	7873      	ldrb	r3, [r6, #1]
 8009572:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009576:	2b58      	cmp	r3, #88	; 0x58
 8009578:	d16c      	bne.n	8009654 <_strtod_l+0x134>
 800957a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800957c:	9301      	str	r3, [sp, #4]
 800957e:	ab1e      	add	r3, sp, #120	; 0x78
 8009580:	9702      	str	r7, [sp, #8]
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	4a8f      	ldr	r2, [pc, #572]	; (80097c4 <_strtod_l+0x2a4>)
 8009586:	ab1f      	add	r3, sp, #124	; 0x7c
 8009588:	a91d      	add	r1, sp, #116	; 0x74
 800958a:	4620      	mov	r0, r4
 800958c:	f000 ff3a 	bl	800a404 <__gethex>
 8009590:	f010 0707 	ands.w	r7, r0, #7
 8009594:	4605      	mov	r5, r0
 8009596:	d005      	beq.n	80095a4 <_strtod_l+0x84>
 8009598:	2f06      	cmp	r7, #6
 800959a:	d12a      	bne.n	80095f2 <_strtod_l+0xd2>
 800959c:	3601      	adds	r6, #1
 800959e:	2300      	movs	r3, #0
 80095a0:	961d      	str	r6, [sp, #116]	; 0x74
 80095a2:	930e      	str	r3, [sp, #56]	; 0x38
 80095a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f040 8596 	bne.w	800a0d8 <_strtod_l+0xbb8>
 80095ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095ae:	b1db      	cbz	r3, 80095e8 <_strtod_l+0xc8>
 80095b0:	4652      	mov	r2, sl
 80095b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80095b6:	ec43 2b10 	vmov	d0, r2, r3
 80095ba:	b023      	add	sp, #140	; 0x8c
 80095bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c0:	2a20      	cmp	r2, #32
 80095c2:	d1ce      	bne.n	8009562 <_strtod_l+0x42>
 80095c4:	3301      	adds	r3, #1
 80095c6:	931d      	str	r3, [sp, #116]	; 0x74
 80095c8:	e7c0      	b.n	800954c <_strtod_l+0x2c>
 80095ca:	2a2d      	cmp	r2, #45	; 0x2d
 80095cc:	d1c9      	bne.n	8009562 <_strtod_l+0x42>
 80095ce:	2201      	movs	r2, #1
 80095d0:	920e      	str	r2, [sp, #56]	; 0x38
 80095d2:	1c5a      	adds	r2, r3, #1
 80095d4:	921d      	str	r2, [sp, #116]	; 0x74
 80095d6:	785b      	ldrb	r3, [r3, #1]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1c4      	bne.n	8009566 <_strtod_l+0x46>
 80095dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095de:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f040 8576 	bne.w	800a0d4 <_strtod_l+0xbb4>
 80095e8:	4652      	mov	r2, sl
 80095ea:	465b      	mov	r3, fp
 80095ec:	e7e3      	b.n	80095b6 <_strtod_l+0x96>
 80095ee:	2200      	movs	r2, #0
 80095f0:	e7ee      	b.n	80095d0 <_strtod_l+0xb0>
 80095f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80095f4:	b13a      	cbz	r2, 8009606 <_strtod_l+0xe6>
 80095f6:	2135      	movs	r1, #53	; 0x35
 80095f8:	a820      	add	r0, sp, #128	; 0x80
 80095fa:	f001 fea6 	bl	800b34a <__copybits>
 80095fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009600:	4620      	mov	r0, r4
 8009602:	f001 fa6b 	bl	800aadc <_Bfree>
 8009606:	3f01      	subs	r7, #1
 8009608:	2f05      	cmp	r7, #5
 800960a:	d807      	bhi.n	800961c <_strtod_l+0xfc>
 800960c:	e8df f007 	tbb	[pc, r7]
 8009610:	1d180b0e 	.word	0x1d180b0e
 8009614:	030e      	.short	0x030e
 8009616:	f04f 0b00 	mov.w	fp, #0
 800961a:	46da      	mov	sl, fp
 800961c:	0728      	lsls	r0, r5, #28
 800961e:	d5c1      	bpl.n	80095a4 <_strtod_l+0x84>
 8009620:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009624:	e7be      	b.n	80095a4 <_strtod_l+0x84>
 8009626:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800962a:	e7f7      	b.n	800961c <_strtod_l+0xfc>
 800962c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009630:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009632:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009636:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800963a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800963e:	e7ed      	b.n	800961c <_strtod_l+0xfc>
 8009640:	f8df b184 	ldr.w	fp, [pc, #388]	; 80097c8 <_strtod_l+0x2a8>
 8009644:	f04f 0a00 	mov.w	sl, #0
 8009648:	e7e8      	b.n	800961c <_strtod_l+0xfc>
 800964a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800964e:	f04f 3aff 	mov.w	sl, #4294967295
 8009652:	e7e3      	b.n	800961c <_strtod_l+0xfc>
 8009654:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009656:	1c5a      	adds	r2, r3, #1
 8009658:	921d      	str	r2, [sp, #116]	; 0x74
 800965a:	785b      	ldrb	r3, [r3, #1]
 800965c:	2b30      	cmp	r3, #48	; 0x30
 800965e:	d0f9      	beq.n	8009654 <_strtod_l+0x134>
 8009660:	2b00      	cmp	r3, #0
 8009662:	d09f      	beq.n	80095a4 <_strtod_l+0x84>
 8009664:	2301      	movs	r3, #1
 8009666:	f04f 0900 	mov.w	r9, #0
 800966a:	9304      	str	r3, [sp, #16]
 800966c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800966e:	930a      	str	r3, [sp, #40]	; 0x28
 8009670:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009674:	464f      	mov	r7, r9
 8009676:	220a      	movs	r2, #10
 8009678:	981d      	ldr	r0, [sp, #116]	; 0x74
 800967a:	7806      	ldrb	r6, [r0, #0]
 800967c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009680:	b2d9      	uxtb	r1, r3
 8009682:	2909      	cmp	r1, #9
 8009684:	d92a      	bls.n	80096dc <_strtod_l+0x1bc>
 8009686:	9907      	ldr	r1, [sp, #28]
 8009688:	462a      	mov	r2, r5
 800968a:	f002 fbb0 	bl	800bdee <strncmp>
 800968e:	b398      	cbz	r0, 80096f8 <_strtod_l+0x1d8>
 8009690:	2000      	movs	r0, #0
 8009692:	4633      	mov	r3, r6
 8009694:	463d      	mov	r5, r7
 8009696:	9007      	str	r0, [sp, #28]
 8009698:	4602      	mov	r2, r0
 800969a:	2b65      	cmp	r3, #101	; 0x65
 800969c:	d001      	beq.n	80096a2 <_strtod_l+0x182>
 800969e:	2b45      	cmp	r3, #69	; 0x45
 80096a0:	d118      	bne.n	80096d4 <_strtod_l+0x1b4>
 80096a2:	b91d      	cbnz	r5, 80096ac <_strtod_l+0x18c>
 80096a4:	9b04      	ldr	r3, [sp, #16]
 80096a6:	4303      	orrs	r3, r0
 80096a8:	d098      	beq.n	80095dc <_strtod_l+0xbc>
 80096aa:	2500      	movs	r5, #0
 80096ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80096b0:	f108 0301 	add.w	r3, r8, #1
 80096b4:	931d      	str	r3, [sp, #116]	; 0x74
 80096b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80096ba:	2b2b      	cmp	r3, #43	; 0x2b
 80096bc:	d075      	beq.n	80097aa <_strtod_l+0x28a>
 80096be:	2b2d      	cmp	r3, #45	; 0x2d
 80096c0:	d07b      	beq.n	80097ba <_strtod_l+0x29a>
 80096c2:	f04f 0c00 	mov.w	ip, #0
 80096c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80096ca:	2909      	cmp	r1, #9
 80096cc:	f240 8082 	bls.w	80097d4 <_strtod_l+0x2b4>
 80096d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80096d4:	2600      	movs	r6, #0
 80096d6:	e09d      	b.n	8009814 <_strtod_l+0x2f4>
 80096d8:	2300      	movs	r3, #0
 80096da:	e7c4      	b.n	8009666 <_strtod_l+0x146>
 80096dc:	2f08      	cmp	r7, #8
 80096de:	bfd8      	it	le
 80096e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80096e2:	f100 0001 	add.w	r0, r0, #1
 80096e6:	bfda      	itte	le
 80096e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80096ec:	9309      	strle	r3, [sp, #36]	; 0x24
 80096ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 80096f2:	3701      	adds	r7, #1
 80096f4:	901d      	str	r0, [sp, #116]	; 0x74
 80096f6:	e7bf      	b.n	8009678 <_strtod_l+0x158>
 80096f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80096fa:	195a      	adds	r2, r3, r5
 80096fc:	921d      	str	r2, [sp, #116]	; 0x74
 80096fe:	5d5b      	ldrb	r3, [r3, r5]
 8009700:	2f00      	cmp	r7, #0
 8009702:	d037      	beq.n	8009774 <_strtod_l+0x254>
 8009704:	9007      	str	r0, [sp, #28]
 8009706:	463d      	mov	r5, r7
 8009708:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800970c:	2a09      	cmp	r2, #9
 800970e:	d912      	bls.n	8009736 <_strtod_l+0x216>
 8009710:	2201      	movs	r2, #1
 8009712:	e7c2      	b.n	800969a <_strtod_l+0x17a>
 8009714:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009716:	1c5a      	adds	r2, r3, #1
 8009718:	921d      	str	r2, [sp, #116]	; 0x74
 800971a:	785b      	ldrb	r3, [r3, #1]
 800971c:	3001      	adds	r0, #1
 800971e:	2b30      	cmp	r3, #48	; 0x30
 8009720:	d0f8      	beq.n	8009714 <_strtod_l+0x1f4>
 8009722:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009726:	2a08      	cmp	r2, #8
 8009728:	f200 84db 	bhi.w	800a0e2 <_strtod_l+0xbc2>
 800972c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800972e:	9007      	str	r0, [sp, #28]
 8009730:	2000      	movs	r0, #0
 8009732:	920a      	str	r2, [sp, #40]	; 0x28
 8009734:	4605      	mov	r5, r0
 8009736:	3b30      	subs	r3, #48	; 0x30
 8009738:	f100 0201 	add.w	r2, r0, #1
 800973c:	d014      	beq.n	8009768 <_strtod_l+0x248>
 800973e:	9907      	ldr	r1, [sp, #28]
 8009740:	4411      	add	r1, r2
 8009742:	9107      	str	r1, [sp, #28]
 8009744:	462a      	mov	r2, r5
 8009746:	eb00 0e05 	add.w	lr, r0, r5
 800974a:	210a      	movs	r1, #10
 800974c:	4572      	cmp	r2, lr
 800974e:	d113      	bne.n	8009778 <_strtod_l+0x258>
 8009750:	182a      	adds	r2, r5, r0
 8009752:	2a08      	cmp	r2, #8
 8009754:	f105 0501 	add.w	r5, r5, #1
 8009758:	4405      	add	r5, r0
 800975a:	dc1c      	bgt.n	8009796 <_strtod_l+0x276>
 800975c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800975e:	220a      	movs	r2, #10
 8009760:	fb02 3301 	mla	r3, r2, r1, r3
 8009764:	9309      	str	r3, [sp, #36]	; 0x24
 8009766:	2200      	movs	r2, #0
 8009768:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800976a:	1c59      	adds	r1, r3, #1
 800976c:	911d      	str	r1, [sp, #116]	; 0x74
 800976e:	785b      	ldrb	r3, [r3, #1]
 8009770:	4610      	mov	r0, r2
 8009772:	e7c9      	b.n	8009708 <_strtod_l+0x1e8>
 8009774:	4638      	mov	r0, r7
 8009776:	e7d2      	b.n	800971e <_strtod_l+0x1fe>
 8009778:	2a08      	cmp	r2, #8
 800977a:	dc04      	bgt.n	8009786 <_strtod_l+0x266>
 800977c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800977e:	434e      	muls	r6, r1
 8009780:	9609      	str	r6, [sp, #36]	; 0x24
 8009782:	3201      	adds	r2, #1
 8009784:	e7e2      	b.n	800974c <_strtod_l+0x22c>
 8009786:	f102 0c01 	add.w	ip, r2, #1
 800978a:	f1bc 0f10 	cmp.w	ip, #16
 800978e:	bfd8      	it	le
 8009790:	fb01 f909 	mulle.w	r9, r1, r9
 8009794:	e7f5      	b.n	8009782 <_strtod_l+0x262>
 8009796:	2d10      	cmp	r5, #16
 8009798:	bfdc      	itt	le
 800979a:	220a      	movle	r2, #10
 800979c:	fb02 3909 	mlale	r9, r2, r9, r3
 80097a0:	e7e1      	b.n	8009766 <_strtod_l+0x246>
 80097a2:	2300      	movs	r3, #0
 80097a4:	9307      	str	r3, [sp, #28]
 80097a6:	2201      	movs	r2, #1
 80097a8:	e77c      	b.n	80096a4 <_strtod_l+0x184>
 80097aa:	f04f 0c00 	mov.w	ip, #0
 80097ae:	f108 0302 	add.w	r3, r8, #2
 80097b2:	931d      	str	r3, [sp, #116]	; 0x74
 80097b4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80097b8:	e785      	b.n	80096c6 <_strtod_l+0x1a6>
 80097ba:	f04f 0c01 	mov.w	ip, #1
 80097be:	e7f6      	b.n	80097ae <_strtod_l+0x28e>
 80097c0:	0800cc94 	.word	0x0800cc94
 80097c4:	0800cb68 	.word	0x0800cb68
 80097c8:	7ff00000 	.word	0x7ff00000
 80097cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097ce:	1c59      	adds	r1, r3, #1
 80097d0:	911d      	str	r1, [sp, #116]	; 0x74
 80097d2:	785b      	ldrb	r3, [r3, #1]
 80097d4:	2b30      	cmp	r3, #48	; 0x30
 80097d6:	d0f9      	beq.n	80097cc <_strtod_l+0x2ac>
 80097d8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80097dc:	2908      	cmp	r1, #8
 80097de:	f63f af79 	bhi.w	80096d4 <_strtod_l+0x1b4>
 80097e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80097e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097e8:	9308      	str	r3, [sp, #32]
 80097ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097ec:	1c59      	adds	r1, r3, #1
 80097ee:	911d      	str	r1, [sp, #116]	; 0x74
 80097f0:	785b      	ldrb	r3, [r3, #1]
 80097f2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80097f6:	2e09      	cmp	r6, #9
 80097f8:	d937      	bls.n	800986a <_strtod_l+0x34a>
 80097fa:	9e08      	ldr	r6, [sp, #32]
 80097fc:	1b89      	subs	r1, r1, r6
 80097fe:	2908      	cmp	r1, #8
 8009800:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009804:	dc02      	bgt.n	800980c <_strtod_l+0x2ec>
 8009806:	4576      	cmp	r6, lr
 8009808:	bfa8      	it	ge
 800980a:	4676      	movge	r6, lr
 800980c:	f1bc 0f00 	cmp.w	ip, #0
 8009810:	d000      	beq.n	8009814 <_strtod_l+0x2f4>
 8009812:	4276      	negs	r6, r6
 8009814:	2d00      	cmp	r5, #0
 8009816:	d14f      	bne.n	80098b8 <_strtod_l+0x398>
 8009818:	9904      	ldr	r1, [sp, #16]
 800981a:	4301      	orrs	r1, r0
 800981c:	f47f aec2 	bne.w	80095a4 <_strtod_l+0x84>
 8009820:	2a00      	cmp	r2, #0
 8009822:	f47f aedb 	bne.w	80095dc <_strtod_l+0xbc>
 8009826:	2b69      	cmp	r3, #105	; 0x69
 8009828:	d027      	beq.n	800987a <_strtod_l+0x35a>
 800982a:	dc24      	bgt.n	8009876 <_strtod_l+0x356>
 800982c:	2b49      	cmp	r3, #73	; 0x49
 800982e:	d024      	beq.n	800987a <_strtod_l+0x35a>
 8009830:	2b4e      	cmp	r3, #78	; 0x4e
 8009832:	f47f aed3 	bne.w	80095dc <_strtod_l+0xbc>
 8009836:	499e      	ldr	r1, [pc, #632]	; (8009ab0 <_strtod_l+0x590>)
 8009838:	a81d      	add	r0, sp, #116	; 0x74
 800983a:	f001 f83b 	bl	800a8b4 <__match>
 800983e:	2800      	cmp	r0, #0
 8009840:	f43f aecc 	beq.w	80095dc <_strtod_l+0xbc>
 8009844:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b28      	cmp	r3, #40	; 0x28
 800984a:	d12d      	bne.n	80098a8 <_strtod_l+0x388>
 800984c:	4999      	ldr	r1, [pc, #612]	; (8009ab4 <_strtod_l+0x594>)
 800984e:	aa20      	add	r2, sp, #128	; 0x80
 8009850:	a81d      	add	r0, sp, #116	; 0x74
 8009852:	f001 f843 	bl	800a8dc <__hexnan>
 8009856:	2805      	cmp	r0, #5
 8009858:	d126      	bne.n	80098a8 <_strtod_l+0x388>
 800985a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800985c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009860:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009864:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009868:	e69c      	b.n	80095a4 <_strtod_l+0x84>
 800986a:	210a      	movs	r1, #10
 800986c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009870:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009874:	e7b9      	b.n	80097ea <_strtod_l+0x2ca>
 8009876:	2b6e      	cmp	r3, #110	; 0x6e
 8009878:	e7db      	b.n	8009832 <_strtod_l+0x312>
 800987a:	498f      	ldr	r1, [pc, #572]	; (8009ab8 <_strtod_l+0x598>)
 800987c:	a81d      	add	r0, sp, #116	; 0x74
 800987e:	f001 f819 	bl	800a8b4 <__match>
 8009882:	2800      	cmp	r0, #0
 8009884:	f43f aeaa 	beq.w	80095dc <_strtod_l+0xbc>
 8009888:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800988a:	498c      	ldr	r1, [pc, #560]	; (8009abc <_strtod_l+0x59c>)
 800988c:	3b01      	subs	r3, #1
 800988e:	a81d      	add	r0, sp, #116	; 0x74
 8009890:	931d      	str	r3, [sp, #116]	; 0x74
 8009892:	f001 f80f 	bl	800a8b4 <__match>
 8009896:	b910      	cbnz	r0, 800989e <_strtod_l+0x37e>
 8009898:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800989a:	3301      	adds	r3, #1
 800989c:	931d      	str	r3, [sp, #116]	; 0x74
 800989e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009acc <_strtod_l+0x5ac>
 80098a2:	f04f 0a00 	mov.w	sl, #0
 80098a6:	e67d      	b.n	80095a4 <_strtod_l+0x84>
 80098a8:	4885      	ldr	r0, [pc, #532]	; (8009ac0 <_strtod_l+0x5a0>)
 80098aa:	f002 fa45 	bl	800bd38 <nan>
 80098ae:	ed8d 0b04 	vstr	d0, [sp, #16]
 80098b2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80098b6:	e675      	b.n	80095a4 <_strtod_l+0x84>
 80098b8:	9b07      	ldr	r3, [sp, #28]
 80098ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098bc:	1af3      	subs	r3, r6, r3
 80098be:	2f00      	cmp	r7, #0
 80098c0:	bf08      	it	eq
 80098c2:	462f      	moveq	r7, r5
 80098c4:	2d10      	cmp	r5, #16
 80098c6:	9308      	str	r3, [sp, #32]
 80098c8:	46a8      	mov	r8, r5
 80098ca:	bfa8      	it	ge
 80098cc:	f04f 0810 	movge.w	r8, #16
 80098d0:	f7f6 fe38 	bl	8000544 <__aeabi_ui2d>
 80098d4:	2d09      	cmp	r5, #9
 80098d6:	4682      	mov	sl, r0
 80098d8:	468b      	mov	fp, r1
 80098da:	dd13      	ble.n	8009904 <_strtod_l+0x3e4>
 80098dc:	4b79      	ldr	r3, [pc, #484]	; (8009ac4 <_strtod_l+0x5a4>)
 80098de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80098e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80098e6:	f7f6 fea7 	bl	8000638 <__aeabi_dmul>
 80098ea:	4682      	mov	sl, r0
 80098ec:	4648      	mov	r0, r9
 80098ee:	468b      	mov	fp, r1
 80098f0:	f7f6 fe28 	bl	8000544 <__aeabi_ui2d>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4650      	mov	r0, sl
 80098fa:	4659      	mov	r1, fp
 80098fc:	f7f6 fce6 	bl	80002cc <__adddf3>
 8009900:	4682      	mov	sl, r0
 8009902:	468b      	mov	fp, r1
 8009904:	2d0f      	cmp	r5, #15
 8009906:	dc38      	bgt.n	800997a <_strtod_l+0x45a>
 8009908:	9b08      	ldr	r3, [sp, #32]
 800990a:	2b00      	cmp	r3, #0
 800990c:	f43f ae4a 	beq.w	80095a4 <_strtod_l+0x84>
 8009910:	dd24      	ble.n	800995c <_strtod_l+0x43c>
 8009912:	2b16      	cmp	r3, #22
 8009914:	dc0b      	bgt.n	800992e <_strtod_l+0x40e>
 8009916:	4d6b      	ldr	r5, [pc, #428]	; (8009ac4 <_strtod_l+0x5a4>)
 8009918:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800991c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009920:	4652      	mov	r2, sl
 8009922:	465b      	mov	r3, fp
 8009924:	f7f6 fe88 	bl	8000638 <__aeabi_dmul>
 8009928:	4682      	mov	sl, r0
 800992a:	468b      	mov	fp, r1
 800992c:	e63a      	b.n	80095a4 <_strtod_l+0x84>
 800992e:	9a08      	ldr	r2, [sp, #32]
 8009930:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009934:	4293      	cmp	r3, r2
 8009936:	db20      	blt.n	800997a <_strtod_l+0x45a>
 8009938:	4c62      	ldr	r4, [pc, #392]	; (8009ac4 <_strtod_l+0x5a4>)
 800993a:	f1c5 050f 	rsb	r5, r5, #15
 800993e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009942:	4652      	mov	r2, sl
 8009944:	465b      	mov	r3, fp
 8009946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800994a:	f7f6 fe75 	bl	8000638 <__aeabi_dmul>
 800994e:	9b08      	ldr	r3, [sp, #32]
 8009950:	1b5d      	subs	r5, r3, r5
 8009952:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009956:	e9d4 2300 	ldrd	r2, r3, [r4]
 800995a:	e7e3      	b.n	8009924 <_strtod_l+0x404>
 800995c:	9b08      	ldr	r3, [sp, #32]
 800995e:	3316      	adds	r3, #22
 8009960:	db0b      	blt.n	800997a <_strtod_l+0x45a>
 8009962:	9b07      	ldr	r3, [sp, #28]
 8009964:	4a57      	ldr	r2, [pc, #348]	; (8009ac4 <_strtod_l+0x5a4>)
 8009966:	1b9e      	subs	r6, r3, r6
 8009968:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800996c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009970:	4650      	mov	r0, sl
 8009972:	4659      	mov	r1, fp
 8009974:	f7f6 ff8a 	bl	800088c <__aeabi_ddiv>
 8009978:	e7d6      	b.n	8009928 <_strtod_l+0x408>
 800997a:	9b08      	ldr	r3, [sp, #32]
 800997c:	eba5 0808 	sub.w	r8, r5, r8
 8009980:	4498      	add	r8, r3
 8009982:	f1b8 0f00 	cmp.w	r8, #0
 8009986:	dd71      	ble.n	8009a6c <_strtod_l+0x54c>
 8009988:	f018 030f 	ands.w	r3, r8, #15
 800998c:	d00a      	beq.n	80099a4 <_strtod_l+0x484>
 800998e:	494d      	ldr	r1, [pc, #308]	; (8009ac4 <_strtod_l+0x5a4>)
 8009990:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009994:	4652      	mov	r2, sl
 8009996:	465b      	mov	r3, fp
 8009998:	e9d1 0100 	ldrd	r0, r1, [r1]
 800999c:	f7f6 fe4c 	bl	8000638 <__aeabi_dmul>
 80099a0:	4682      	mov	sl, r0
 80099a2:	468b      	mov	fp, r1
 80099a4:	f038 080f 	bics.w	r8, r8, #15
 80099a8:	d04d      	beq.n	8009a46 <_strtod_l+0x526>
 80099aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80099ae:	dd22      	ble.n	80099f6 <_strtod_l+0x4d6>
 80099b0:	2500      	movs	r5, #0
 80099b2:	462e      	mov	r6, r5
 80099b4:	9509      	str	r5, [sp, #36]	; 0x24
 80099b6:	9507      	str	r5, [sp, #28]
 80099b8:	2322      	movs	r3, #34	; 0x22
 80099ba:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009acc <_strtod_l+0x5ac>
 80099be:	6023      	str	r3, [r4, #0]
 80099c0:	f04f 0a00 	mov.w	sl, #0
 80099c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f43f adec 	beq.w	80095a4 <_strtod_l+0x84>
 80099cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80099ce:	4620      	mov	r0, r4
 80099d0:	f001 f884 	bl	800aadc <_Bfree>
 80099d4:	9907      	ldr	r1, [sp, #28]
 80099d6:	4620      	mov	r0, r4
 80099d8:	f001 f880 	bl	800aadc <_Bfree>
 80099dc:	4631      	mov	r1, r6
 80099de:	4620      	mov	r0, r4
 80099e0:	f001 f87c 	bl	800aadc <_Bfree>
 80099e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099e6:	4620      	mov	r0, r4
 80099e8:	f001 f878 	bl	800aadc <_Bfree>
 80099ec:	4629      	mov	r1, r5
 80099ee:	4620      	mov	r0, r4
 80099f0:	f001 f874 	bl	800aadc <_Bfree>
 80099f4:	e5d6      	b.n	80095a4 <_strtod_l+0x84>
 80099f6:	2300      	movs	r3, #0
 80099f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80099fc:	4650      	mov	r0, sl
 80099fe:	4659      	mov	r1, fp
 8009a00:	4699      	mov	r9, r3
 8009a02:	f1b8 0f01 	cmp.w	r8, #1
 8009a06:	dc21      	bgt.n	8009a4c <_strtod_l+0x52c>
 8009a08:	b10b      	cbz	r3, 8009a0e <_strtod_l+0x4ee>
 8009a0a:	4682      	mov	sl, r0
 8009a0c:	468b      	mov	fp, r1
 8009a0e:	4b2e      	ldr	r3, [pc, #184]	; (8009ac8 <_strtod_l+0x5a8>)
 8009a10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009a14:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009a18:	4652      	mov	r2, sl
 8009a1a:	465b      	mov	r3, fp
 8009a1c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009a20:	f7f6 fe0a 	bl	8000638 <__aeabi_dmul>
 8009a24:	4b29      	ldr	r3, [pc, #164]	; (8009acc <_strtod_l+0x5ac>)
 8009a26:	460a      	mov	r2, r1
 8009a28:	400b      	ands	r3, r1
 8009a2a:	4929      	ldr	r1, [pc, #164]	; (8009ad0 <_strtod_l+0x5b0>)
 8009a2c:	428b      	cmp	r3, r1
 8009a2e:	4682      	mov	sl, r0
 8009a30:	d8be      	bhi.n	80099b0 <_strtod_l+0x490>
 8009a32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009a36:	428b      	cmp	r3, r1
 8009a38:	bf86      	itte	hi
 8009a3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009ad4 <_strtod_l+0x5b4>
 8009a3e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009a46:	2300      	movs	r3, #0
 8009a48:	9304      	str	r3, [sp, #16]
 8009a4a:	e081      	b.n	8009b50 <_strtod_l+0x630>
 8009a4c:	f018 0f01 	tst.w	r8, #1
 8009a50:	d007      	beq.n	8009a62 <_strtod_l+0x542>
 8009a52:	4b1d      	ldr	r3, [pc, #116]	; (8009ac8 <_strtod_l+0x5a8>)
 8009a54:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5c:	f7f6 fdec 	bl	8000638 <__aeabi_dmul>
 8009a60:	2301      	movs	r3, #1
 8009a62:	f109 0901 	add.w	r9, r9, #1
 8009a66:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009a6a:	e7ca      	b.n	8009a02 <_strtod_l+0x4e2>
 8009a6c:	d0eb      	beq.n	8009a46 <_strtod_l+0x526>
 8009a6e:	f1c8 0800 	rsb	r8, r8, #0
 8009a72:	f018 020f 	ands.w	r2, r8, #15
 8009a76:	d00a      	beq.n	8009a8e <_strtod_l+0x56e>
 8009a78:	4b12      	ldr	r3, [pc, #72]	; (8009ac4 <_strtod_l+0x5a4>)
 8009a7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a7e:	4650      	mov	r0, sl
 8009a80:	4659      	mov	r1, fp
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	f7f6 ff01 	bl	800088c <__aeabi_ddiv>
 8009a8a:	4682      	mov	sl, r0
 8009a8c:	468b      	mov	fp, r1
 8009a8e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009a92:	d0d8      	beq.n	8009a46 <_strtod_l+0x526>
 8009a94:	f1b8 0f1f 	cmp.w	r8, #31
 8009a98:	dd1e      	ble.n	8009ad8 <_strtod_l+0x5b8>
 8009a9a:	2500      	movs	r5, #0
 8009a9c:	462e      	mov	r6, r5
 8009a9e:	9509      	str	r5, [sp, #36]	; 0x24
 8009aa0:	9507      	str	r5, [sp, #28]
 8009aa2:	2322      	movs	r3, #34	; 0x22
 8009aa4:	f04f 0a00 	mov.w	sl, #0
 8009aa8:	f04f 0b00 	mov.w	fp, #0
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	e789      	b.n	80099c4 <_strtod_l+0x4a4>
 8009ab0:	0800cb65 	.word	0x0800cb65
 8009ab4:	0800cb7c 	.word	0x0800cb7c
 8009ab8:	0800cb5c 	.word	0x0800cb5c
 8009abc:	0800cb5f 	.word	0x0800cb5f
 8009ac0:	0800ce8a 	.word	0x0800ce8a
 8009ac4:	0800cd48 	.word	0x0800cd48
 8009ac8:	0800cd20 	.word	0x0800cd20
 8009acc:	7ff00000 	.word	0x7ff00000
 8009ad0:	7ca00000 	.word	0x7ca00000
 8009ad4:	7fefffff 	.word	0x7fefffff
 8009ad8:	f018 0310 	ands.w	r3, r8, #16
 8009adc:	bf18      	it	ne
 8009ade:	236a      	movne	r3, #106	; 0x6a
 8009ae0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009e98 <_strtod_l+0x978>
 8009ae4:	9304      	str	r3, [sp, #16]
 8009ae6:	4650      	mov	r0, sl
 8009ae8:	4659      	mov	r1, fp
 8009aea:	2300      	movs	r3, #0
 8009aec:	f018 0f01 	tst.w	r8, #1
 8009af0:	d004      	beq.n	8009afc <_strtod_l+0x5dc>
 8009af2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009af6:	f7f6 fd9f 	bl	8000638 <__aeabi_dmul>
 8009afa:	2301      	movs	r3, #1
 8009afc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009b00:	f109 0908 	add.w	r9, r9, #8
 8009b04:	d1f2      	bne.n	8009aec <_strtod_l+0x5cc>
 8009b06:	b10b      	cbz	r3, 8009b0c <_strtod_l+0x5ec>
 8009b08:	4682      	mov	sl, r0
 8009b0a:	468b      	mov	fp, r1
 8009b0c:	9b04      	ldr	r3, [sp, #16]
 8009b0e:	b1bb      	cbz	r3, 8009b40 <_strtod_l+0x620>
 8009b10:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009b14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	4659      	mov	r1, fp
 8009b1c:	dd10      	ble.n	8009b40 <_strtod_l+0x620>
 8009b1e:	2b1f      	cmp	r3, #31
 8009b20:	f340 8128 	ble.w	8009d74 <_strtod_l+0x854>
 8009b24:	2b34      	cmp	r3, #52	; 0x34
 8009b26:	bfde      	ittt	le
 8009b28:	3b20      	suble	r3, #32
 8009b2a:	f04f 32ff 	movle.w	r2, #4294967295
 8009b2e:	fa02 f303 	lslle.w	r3, r2, r3
 8009b32:	f04f 0a00 	mov.w	sl, #0
 8009b36:	bfcc      	ite	gt
 8009b38:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009b3c:	ea03 0b01 	andle.w	fp, r3, r1
 8009b40:	2200      	movs	r2, #0
 8009b42:	2300      	movs	r3, #0
 8009b44:	4650      	mov	r0, sl
 8009b46:	4659      	mov	r1, fp
 8009b48:	f7f6 ffde 	bl	8000b08 <__aeabi_dcmpeq>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d1a4      	bne.n	8009a9a <_strtod_l+0x57a>
 8009b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009b56:	462b      	mov	r3, r5
 8009b58:	463a      	mov	r2, r7
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f001 f82a 	bl	800abb4 <__s2b>
 8009b60:	9009      	str	r0, [sp, #36]	; 0x24
 8009b62:	2800      	cmp	r0, #0
 8009b64:	f43f af24 	beq.w	80099b0 <_strtod_l+0x490>
 8009b68:	9b07      	ldr	r3, [sp, #28]
 8009b6a:	1b9e      	subs	r6, r3, r6
 8009b6c:	9b08      	ldr	r3, [sp, #32]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	bfb4      	ite	lt
 8009b72:	4633      	movlt	r3, r6
 8009b74:	2300      	movge	r3, #0
 8009b76:	9310      	str	r3, [sp, #64]	; 0x40
 8009b78:	9b08      	ldr	r3, [sp, #32]
 8009b7a:	2500      	movs	r5, #0
 8009b7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009b80:	9318      	str	r3, [sp, #96]	; 0x60
 8009b82:	462e      	mov	r6, r5
 8009b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b86:	4620      	mov	r0, r4
 8009b88:	6859      	ldr	r1, [r3, #4]
 8009b8a:	f000 ff67 	bl	800aa5c <_Balloc>
 8009b8e:	9007      	str	r0, [sp, #28]
 8009b90:	2800      	cmp	r0, #0
 8009b92:	f43f af11 	beq.w	80099b8 <_strtod_l+0x498>
 8009b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b98:	691a      	ldr	r2, [r3, #16]
 8009b9a:	3202      	adds	r2, #2
 8009b9c:	f103 010c 	add.w	r1, r3, #12
 8009ba0:	0092      	lsls	r2, r2, #2
 8009ba2:	300c      	adds	r0, #12
 8009ba4:	f000 ff4b 	bl	800aa3e <memcpy>
 8009ba8:	ec4b ab10 	vmov	d0, sl, fp
 8009bac:	aa20      	add	r2, sp, #128	; 0x80
 8009bae:	a91f      	add	r1, sp, #124	; 0x7c
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009bb6:	f001 fb39 	bl	800b22c <__d2b>
 8009bba:	901e      	str	r0, [sp, #120]	; 0x78
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	f43f aefb 	beq.w	80099b8 <_strtod_l+0x498>
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	f001 f88f 	bl	800ace8 <__i2b>
 8009bca:	4606      	mov	r6, r0
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	f43f aef3 	beq.w	80099b8 <_strtod_l+0x498>
 8009bd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009bd4:	9904      	ldr	r1, [sp, #16]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	bfab      	itete	ge
 8009bda:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009bdc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009bde:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009be0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009be4:	bfac      	ite	ge
 8009be6:	eb03 0902 	addge.w	r9, r3, r2
 8009bea:	1ad7      	sublt	r7, r2, r3
 8009bec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009bee:	eba3 0801 	sub.w	r8, r3, r1
 8009bf2:	4490      	add	r8, r2
 8009bf4:	4ba3      	ldr	r3, [pc, #652]	; (8009e84 <_strtod_l+0x964>)
 8009bf6:	f108 38ff 	add.w	r8, r8, #4294967295
 8009bfa:	4598      	cmp	r8, r3
 8009bfc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009c00:	f280 80cc 	bge.w	8009d9c <_strtod_l+0x87c>
 8009c04:	eba3 0308 	sub.w	r3, r3, r8
 8009c08:	2b1f      	cmp	r3, #31
 8009c0a:	eba2 0203 	sub.w	r2, r2, r3
 8009c0e:	f04f 0101 	mov.w	r1, #1
 8009c12:	f300 80b6 	bgt.w	8009d82 <_strtod_l+0x862>
 8009c16:	fa01 f303 	lsl.w	r3, r1, r3
 8009c1a:	9311      	str	r3, [sp, #68]	; 0x44
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	930c      	str	r3, [sp, #48]	; 0x30
 8009c20:	eb09 0802 	add.w	r8, r9, r2
 8009c24:	9b04      	ldr	r3, [sp, #16]
 8009c26:	45c1      	cmp	r9, r8
 8009c28:	4417      	add	r7, r2
 8009c2a:	441f      	add	r7, r3
 8009c2c:	464b      	mov	r3, r9
 8009c2e:	bfa8      	it	ge
 8009c30:	4643      	movge	r3, r8
 8009c32:	42bb      	cmp	r3, r7
 8009c34:	bfa8      	it	ge
 8009c36:	463b      	movge	r3, r7
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	bfc2      	ittt	gt
 8009c3c:	eba8 0803 	subgt.w	r8, r8, r3
 8009c40:	1aff      	subgt	r7, r7, r3
 8009c42:	eba9 0903 	subgt.w	r9, r9, r3
 8009c46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	dd17      	ble.n	8009c7c <_strtod_l+0x75c>
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	461a      	mov	r2, r3
 8009c50:	4620      	mov	r0, r4
 8009c52:	f001 f905 	bl	800ae60 <__pow5mult>
 8009c56:	4606      	mov	r6, r0
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	f43f aead 	beq.w	80099b8 <_strtod_l+0x498>
 8009c5e:	4601      	mov	r1, r0
 8009c60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009c62:	4620      	mov	r0, r4
 8009c64:	f001 f856 	bl	800ad14 <__multiply>
 8009c68:	900f      	str	r0, [sp, #60]	; 0x3c
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	f43f aea4 	beq.w	80099b8 <_strtod_l+0x498>
 8009c70:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009c72:	4620      	mov	r0, r4
 8009c74:	f000 ff32 	bl	800aadc <_Bfree>
 8009c78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c7a:	931e      	str	r3, [sp, #120]	; 0x78
 8009c7c:	f1b8 0f00 	cmp.w	r8, #0
 8009c80:	f300 8091 	bgt.w	8009da6 <_strtod_l+0x886>
 8009c84:	9b08      	ldr	r3, [sp, #32]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	dd08      	ble.n	8009c9c <_strtod_l+0x77c>
 8009c8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009c8c:	9907      	ldr	r1, [sp, #28]
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f001 f8e6 	bl	800ae60 <__pow5mult>
 8009c94:	9007      	str	r0, [sp, #28]
 8009c96:	2800      	cmp	r0, #0
 8009c98:	f43f ae8e 	beq.w	80099b8 <_strtod_l+0x498>
 8009c9c:	2f00      	cmp	r7, #0
 8009c9e:	dd08      	ble.n	8009cb2 <_strtod_l+0x792>
 8009ca0:	9907      	ldr	r1, [sp, #28]
 8009ca2:	463a      	mov	r2, r7
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f001 f935 	bl	800af14 <__lshift>
 8009caa:	9007      	str	r0, [sp, #28]
 8009cac:	2800      	cmp	r0, #0
 8009cae:	f43f ae83 	beq.w	80099b8 <_strtod_l+0x498>
 8009cb2:	f1b9 0f00 	cmp.w	r9, #0
 8009cb6:	dd08      	ble.n	8009cca <_strtod_l+0x7aa>
 8009cb8:	4631      	mov	r1, r6
 8009cba:	464a      	mov	r2, r9
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f001 f929 	bl	800af14 <__lshift>
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	f43f ae77 	beq.w	80099b8 <_strtod_l+0x498>
 8009cca:	9a07      	ldr	r2, [sp, #28]
 8009ccc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f001 f9a8 	bl	800b024 <__mdiff>
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	f43f ae6e 	beq.w	80099b8 <_strtod_l+0x498>
 8009cdc:	68c3      	ldr	r3, [r0, #12]
 8009cde:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60c3      	str	r3, [r0, #12]
 8009ce4:	4631      	mov	r1, r6
 8009ce6:	f001 f981 	bl	800afec <__mcmp>
 8009cea:	2800      	cmp	r0, #0
 8009cec:	da65      	bge.n	8009dba <_strtod_l+0x89a>
 8009cee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cf0:	ea53 030a 	orrs.w	r3, r3, sl
 8009cf4:	f040 8087 	bne.w	8009e06 <_strtod_l+0x8e6>
 8009cf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f040 8082 	bne.w	8009e06 <_strtod_l+0x8e6>
 8009d02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d06:	0d1b      	lsrs	r3, r3, #20
 8009d08:	051b      	lsls	r3, r3, #20
 8009d0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009d0e:	d97a      	bls.n	8009e06 <_strtod_l+0x8e6>
 8009d10:	696b      	ldr	r3, [r5, #20]
 8009d12:	b913      	cbnz	r3, 8009d1a <_strtod_l+0x7fa>
 8009d14:	692b      	ldr	r3, [r5, #16]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	dd75      	ble.n	8009e06 <_strtod_l+0x8e6>
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f001 f8f8 	bl	800af14 <__lshift>
 8009d24:	4631      	mov	r1, r6
 8009d26:	4605      	mov	r5, r0
 8009d28:	f001 f960 	bl	800afec <__mcmp>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	dd6a      	ble.n	8009e06 <_strtod_l+0x8e6>
 8009d30:	9904      	ldr	r1, [sp, #16]
 8009d32:	4a55      	ldr	r2, [pc, #340]	; (8009e88 <_strtod_l+0x968>)
 8009d34:	465b      	mov	r3, fp
 8009d36:	2900      	cmp	r1, #0
 8009d38:	f000 8085 	beq.w	8009e46 <_strtod_l+0x926>
 8009d3c:	ea02 010b 	and.w	r1, r2, fp
 8009d40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009d44:	dc7f      	bgt.n	8009e46 <_strtod_l+0x926>
 8009d46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009d4a:	f77f aeaa 	ble.w	8009aa2 <_strtod_l+0x582>
 8009d4e:	4a4f      	ldr	r2, [pc, #316]	; (8009e8c <_strtod_l+0x96c>)
 8009d50:	2300      	movs	r3, #0
 8009d52:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009d56:	4650      	mov	r0, sl
 8009d58:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009d5c:	4659      	mov	r1, fp
 8009d5e:	f7f6 fc6b 	bl	8000638 <__aeabi_dmul>
 8009d62:	460b      	mov	r3, r1
 8009d64:	4303      	orrs	r3, r0
 8009d66:	bf08      	it	eq
 8009d68:	2322      	moveq	r3, #34	; 0x22
 8009d6a:	4682      	mov	sl, r0
 8009d6c:	468b      	mov	fp, r1
 8009d6e:	bf08      	it	eq
 8009d70:	6023      	streq	r3, [r4, #0]
 8009d72:	e62b      	b.n	80099cc <_strtod_l+0x4ac>
 8009d74:	f04f 32ff 	mov.w	r2, #4294967295
 8009d78:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7c:	ea03 0a0a 	and.w	sl, r3, sl
 8009d80:	e6de      	b.n	8009b40 <_strtod_l+0x620>
 8009d82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009d86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009d8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009d8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009d92:	fa01 f308 	lsl.w	r3, r1, r8
 8009d96:	930c      	str	r3, [sp, #48]	; 0x30
 8009d98:	9111      	str	r1, [sp, #68]	; 0x44
 8009d9a:	e741      	b.n	8009c20 <_strtod_l+0x700>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	930c      	str	r3, [sp, #48]	; 0x30
 8009da0:	2301      	movs	r3, #1
 8009da2:	9311      	str	r3, [sp, #68]	; 0x44
 8009da4:	e73c      	b.n	8009c20 <_strtod_l+0x700>
 8009da6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009da8:	4642      	mov	r2, r8
 8009daa:	4620      	mov	r0, r4
 8009dac:	f001 f8b2 	bl	800af14 <__lshift>
 8009db0:	901e      	str	r0, [sp, #120]	; 0x78
 8009db2:	2800      	cmp	r0, #0
 8009db4:	f47f af66 	bne.w	8009c84 <_strtod_l+0x764>
 8009db8:	e5fe      	b.n	80099b8 <_strtod_l+0x498>
 8009dba:	465f      	mov	r7, fp
 8009dbc:	d16e      	bne.n	8009e9c <_strtod_l+0x97c>
 8009dbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009dc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009dc4:	b342      	cbz	r2, 8009e18 <_strtod_l+0x8f8>
 8009dc6:	4a32      	ldr	r2, [pc, #200]	; (8009e90 <_strtod_l+0x970>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d128      	bne.n	8009e1e <_strtod_l+0x8fe>
 8009dcc:	9b04      	ldr	r3, [sp, #16]
 8009dce:	4650      	mov	r0, sl
 8009dd0:	b1eb      	cbz	r3, 8009e0e <_strtod_l+0x8ee>
 8009dd2:	4a2d      	ldr	r2, [pc, #180]	; (8009e88 <_strtod_l+0x968>)
 8009dd4:	403a      	ands	r2, r7
 8009dd6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009dda:	f04f 31ff 	mov.w	r1, #4294967295
 8009dde:	d819      	bhi.n	8009e14 <_strtod_l+0x8f4>
 8009de0:	0d12      	lsrs	r2, r2, #20
 8009de2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009de6:	fa01 f303 	lsl.w	r3, r1, r3
 8009dea:	4298      	cmp	r0, r3
 8009dec:	d117      	bne.n	8009e1e <_strtod_l+0x8fe>
 8009dee:	4b29      	ldr	r3, [pc, #164]	; (8009e94 <_strtod_l+0x974>)
 8009df0:	429f      	cmp	r7, r3
 8009df2:	d102      	bne.n	8009dfa <_strtod_l+0x8da>
 8009df4:	3001      	adds	r0, #1
 8009df6:	f43f addf 	beq.w	80099b8 <_strtod_l+0x498>
 8009dfa:	4b23      	ldr	r3, [pc, #140]	; (8009e88 <_strtod_l+0x968>)
 8009dfc:	403b      	ands	r3, r7
 8009dfe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009e02:	f04f 0a00 	mov.w	sl, #0
 8009e06:	9b04      	ldr	r3, [sp, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1a0      	bne.n	8009d4e <_strtod_l+0x82e>
 8009e0c:	e5de      	b.n	80099cc <_strtod_l+0x4ac>
 8009e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e12:	e7ea      	b.n	8009dea <_strtod_l+0x8ca>
 8009e14:	460b      	mov	r3, r1
 8009e16:	e7e8      	b.n	8009dea <_strtod_l+0x8ca>
 8009e18:	ea53 030a 	orrs.w	r3, r3, sl
 8009e1c:	d088      	beq.n	8009d30 <_strtod_l+0x810>
 8009e1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e20:	b1db      	cbz	r3, 8009e5a <_strtod_l+0x93a>
 8009e22:	423b      	tst	r3, r7
 8009e24:	d0ef      	beq.n	8009e06 <_strtod_l+0x8e6>
 8009e26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e28:	9a04      	ldr	r2, [sp, #16]
 8009e2a:	4650      	mov	r0, sl
 8009e2c:	4659      	mov	r1, fp
 8009e2e:	b1c3      	cbz	r3, 8009e62 <_strtod_l+0x942>
 8009e30:	f7ff fb58 	bl	80094e4 <sulp>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e3c:	f7f6 fa46 	bl	80002cc <__adddf3>
 8009e40:	4682      	mov	sl, r0
 8009e42:	468b      	mov	fp, r1
 8009e44:	e7df      	b.n	8009e06 <_strtod_l+0x8e6>
 8009e46:	4013      	ands	r3, r2
 8009e48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009e4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e54:	f04f 3aff 	mov.w	sl, #4294967295
 8009e58:	e7d5      	b.n	8009e06 <_strtod_l+0x8e6>
 8009e5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e5c:	ea13 0f0a 	tst.w	r3, sl
 8009e60:	e7e0      	b.n	8009e24 <_strtod_l+0x904>
 8009e62:	f7ff fb3f 	bl	80094e4 <sulp>
 8009e66:	4602      	mov	r2, r0
 8009e68:	460b      	mov	r3, r1
 8009e6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e6e:	f7f6 fa2b 	bl	80002c8 <__aeabi_dsub>
 8009e72:	2200      	movs	r2, #0
 8009e74:	2300      	movs	r3, #0
 8009e76:	4682      	mov	sl, r0
 8009e78:	468b      	mov	fp, r1
 8009e7a:	f7f6 fe45 	bl	8000b08 <__aeabi_dcmpeq>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	d0c1      	beq.n	8009e06 <_strtod_l+0x8e6>
 8009e82:	e60e      	b.n	8009aa2 <_strtod_l+0x582>
 8009e84:	fffffc02 	.word	0xfffffc02
 8009e88:	7ff00000 	.word	0x7ff00000
 8009e8c:	39500000 	.word	0x39500000
 8009e90:	000fffff 	.word	0x000fffff
 8009e94:	7fefffff 	.word	0x7fefffff
 8009e98:	0800cb90 	.word	0x0800cb90
 8009e9c:	4631      	mov	r1, r6
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	f001 fa20 	bl	800b2e4 <__ratio>
 8009ea4:	ec59 8b10 	vmov	r8, r9, d0
 8009ea8:	ee10 0a10 	vmov	r0, s0
 8009eac:	2200      	movs	r2, #0
 8009eae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	f7f6 fe3c 	bl	8000b30 <__aeabi_dcmple>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d07c      	beq.n	8009fb6 <_strtod_l+0xa96>
 8009ebc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d04c      	beq.n	8009f5c <_strtod_l+0xa3c>
 8009ec2:	4b95      	ldr	r3, [pc, #596]	; (800a118 <_strtod_l+0xbf8>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009eca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a118 <_strtod_l+0xbf8>
 8009ece:	f04f 0800 	mov.w	r8, #0
 8009ed2:	4b92      	ldr	r3, [pc, #584]	; (800a11c <_strtod_l+0xbfc>)
 8009ed4:	403b      	ands	r3, r7
 8009ed6:	9311      	str	r3, [sp, #68]	; 0x44
 8009ed8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009eda:	4b91      	ldr	r3, [pc, #580]	; (800a120 <_strtod_l+0xc00>)
 8009edc:	429a      	cmp	r2, r3
 8009ede:	f040 80b2 	bne.w	800a046 <_strtod_l+0xb26>
 8009ee2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009eea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009eee:	ec4b ab10 	vmov	d0, sl, fp
 8009ef2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009ef6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009efa:	f001 f91b 	bl	800b134 <__ulp>
 8009efe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f02:	ec53 2b10 	vmov	r2, r3, d0
 8009f06:	f7f6 fb97 	bl	8000638 <__aeabi_dmul>
 8009f0a:	4652      	mov	r2, sl
 8009f0c:	465b      	mov	r3, fp
 8009f0e:	f7f6 f9dd 	bl	80002cc <__adddf3>
 8009f12:	460b      	mov	r3, r1
 8009f14:	4981      	ldr	r1, [pc, #516]	; (800a11c <_strtod_l+0xbfc>)
 8009f16:	4a83      	ldr	r2, [pc, #524]	; (800a124 <_strtod_l+0xc04>)
 8009f18:	4019      	ands	r1, r3
 8009f1a:	4291      	cmp	r1, r2
 8009f1c:	4682      	mov	sl, r0
 8009f1e:	d95e      	bls.n	8009fde <_strtod_l+0xabe>
 8009f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f22:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d103      	bne.n	8009f32 <_strtod_l+0xa12>
 8009f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	f43f ad43 	beq.w	80099b8 <_strtod_l+0x498>
 8009f32:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a130 <_strtod_l+0xc10>
 8009f36:	f04f 3aff 	mov.w	sl, #4294967295
 8009f3a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 fdcd 	bl	800aadc <_Bfree>
 8009f42:	9907      	ldr	r1, [sp, #28]
 8009f44:	4620      	mov	r0, r4
 8009f46:	f000 fdc9 	bl	800aadc <_Bfree>
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f000 fdc5 	bl	800aadc <_Bfree>
 8009f52:	4629      	mov	r1, r5
 8009f54:	4620      	mov	r0, r4
 8009f56:	f000 fdc1 	bl	800aadc <_Bfree>
 8009f5a:	e613      	b.n	8009b84 <_strtod_l+0x664>
 8009f5c:	f1ba 0f00 	cmp.w	sl, #0
 8009f60:	d11b      	bne.n	8009f9a <_strtod_l+0xa7a>
 8009f62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f66:	b9f3      	cbnz	r3, 8009fa6 <_strtod_l+0xa86>
 8009f68:	4b6b      	ldr	r3, [pc, #428]	; (800a118 <_strtod_l+0xbf8>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	4640      	mov	r0, r8
 8009f6e:	4649      	mov	r1, r9
 8009f70:	f7f6 fdd4 	bl	8000b1c <__aeabi_dcmplt>
 8009f74:	b9d0      	cbnz	r0, 8009fac <_strtod_l+0xa8c>
 8009f76:	4640      	mov	r0, r8
 8009f78:	4649      	mov	r1, r9
 8009f7a:	4b6b      	ldr	r3, [pc, #428]	; (800a128 <_strtod_l+0xc08>)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f7f6 fb5b 	bl	8000638 <__aeabi_dmul>
 8009f82:	4680      	mov	r8, r0
 8009f84:	4689      	mov	r9, r1
 8009f86:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009f8a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009f8e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009f90:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009f94:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009f98:	e79b      	b.n	8009ed2 <_strtod_l+0x9b2>
 8009f9a:	f1ba 0f01 	cmp.w	sl, #1
 8009f9e:	d102      	bne.n	8009fa6 <_strtod_l+0xa86>
 8009fa0:	2f00      	cmp	r7, #0
 8009fa2:	f43f ad7e 	beq.w	8009aa2 <_strtod_l+0x582>
 8009fa6:	4b61      	ldr	r3, [pc, #388]	; (800a12c <_strtod_l+0xc0c>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	e78c      	b.n	8009ec6 <_strtod_l+0x9a6>
 8009fac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a128 <_strtod_l+0xc08>
 8009fb0:	f04f 0800 	mov.w	r8, #0
 8009fb4:	e7e7      	b.n	8009f86 <_strtod_l+0xa66>
 8009fb6:	4b5c      	ldr	r3, [pc, #368]	; (800a128 <_strtod_l+0xc08>)
 8009fb8:	4640      	mov	r0, r8
 8009fba:	4649      	mov	r1, r9
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f7f6 fb3b 	bl	8000638 <__aeabi_dmul>
 8009fc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fc4:	4680      	mov	r8, r0
 8009fc6:	4689      	mov	r9, r1
 8009fc8:	b933      	cbnz	r3, 8009fd8 <_strtod_l+0xab8>
 8009fca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fce:	9012      	str	r0, [sp, #72]	; 0x48
 8009fd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8009fd2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009fd6:	e7dd      	b.n	8009f94 <_strtod_l+0xa74>
 8009fd8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009fdc:	e7f9      	b.n	8009fd2 <_strtod_l+0xab2>
 8009fde:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009fe2:	9b04      	ldr	r3, [sp, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1a8      	bne.n	8009f3a <_strtod_l+0xa1a>
 8009fe8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009fec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009fee:	0d1b      	lsrs	r3, r3, #20
 8009ff0:	051b      	lsls	r3, r3, #20
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d1a1      	bne.n	8009f3a <_strtod_l+0xa1a>
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	4649      	mov	r1, r9
 8009ffa:	f7f6 fe3f 	bl	8000c7c <__aeabi_d2lz>
 8009ffe:	f7f6 faed 	bl	80005dc <__aeabi_l2d>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	4640      	mov	r0, r8
 800a008:	4649      	mov	r1, r9
 800a00a:	f7f6 f95d 	bl	80002c8 <__aeabi_dsub>
 800a00e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a010:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a014:	ea43 030a 	orr.w	r3, r3, sl
 800a018:	4313      	orrs	r3, r2
 800a01a:	4680      	mov	r8, r0
 800a01c:	4689      	mov	r9, r1
 800a01e:	d053      	beq.n	800a0c8 <_strtod_l+0xba8>
 800a020:	a335      	add	r3, pc, #212	; (adr r3, 800a0f8 <_strtod_l+0xbd8>)
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	f7f6 fd79 	bl	8000b1c <__aeabi_dcmplt>
 800a02a:	2800      	cmp	r0, #0
 800a02c:	f47f acce 	bne.w	80099cc <_strtod_l+0x4ac>
 800a030:	a333      	add	r3, pc, #204	; (adr r3, 800a100 <_strtod_l+0xbe0>)
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	4640      	mov	r0, r8
 800a038:	4649      	mov	r1, r9
 800a03a:	f7f6 fd8d 	bl	8000b58 <__aeabi_dcmpgt>
 800a03e:	2800      	cmp	r0, #0
 800a040:	f43f af7b 	beq.w	8009f3a <_strtod_l+0xa1a>
 800a044:	e4c2      	b.n	80099cc <_strtod_l+0x4ac>
 800a046:	9b04      	ldr	r3, [sp, #16]
 800a048:	b333      	cbz	r3, 800a098 <_strtod_l+0xb78>
 800a04a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a04c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a050:	d822      	bhi.n	800a098 <_strtod_l+0xb78>
 800a052:	a32d      	add	r3, pc, #180	; (adr r3, 800a108 <_strtod_l+0xbe8>)
 800a054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a058:	4640      	mov	r0, r8
 800a05a:	4649      	mov	r1, r9
 800a05c:	f7f6 fd68 	bl	8000b30 <__aeabi_dcmple>
 800a060:	b1a0      	cbz	r0, 800a08c <_strtod_l+0xb6c>
 800a062:	4649      	mov	r1, r9
 800a064:	4640      	mov	r0, r8
 800a066:	f7f6 fd81 	bl	8000b6c <__aeabi_d2uiz>
 800a06a:	2801      	cmp	r0, #1
 800a06c:	bf38      	it	cc
 800a06e:	2001      	movcc	r0, #1
 800a070:	f7f6 fa68 	bl	8000544 <__aeabi_ui2d>
 800a074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a076:	4680      	mov	r8, r0
 800a078:	4689      	mov	r9, r1
 800a07a:	bb13      	cbnz	r3, 800a0c2 <_strtod_l+0xba2>
 800a07c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a080:	9014      	str	r0, [sp, #80]	; 0x50
 800a082:	9315      	str	r3, [sp, #84]	; 0x54
 800a084:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a088:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a08c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a08e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a090:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a094:	1a9b      	subs	r3, r3, r2
 800a096:	930d      	str	r3, [sp, #52]	; 0x34
 800a098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a09c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a0a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a0a4:	f001 f846 	bl	800b134 <__ulp>
 800a0a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0ac:	ec53 2b10 	vmov	r2, r3, d0
 800a0b0:	f7f6 fac2 	bl	8000638 <__aeabi_dmul>
 800a0b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a0b8:	f7f6 f908 	bl	80002cc <__adddf3>
 800a0bc:	4682      	mov	sl, r0
 800a0be:	468b      	mov	fp, r1
 800a0c0:	e78f      	b.n	8009fe2 <_strtod_l+0xac2>
 800a0c2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a0c6:	e7dd      	b.n	800a084 <_strtod_l+0xb64>
 800a0c8:	a311      	add	r3, pc, #68	; (adr r3, 800a110 <_strtod_l+0xbf0>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	f7f6 fd25 	bl	8000b1c <__aeabi_dcmplt>
 800a0d2:	e7b4      	b.n	800a03e <_strtod_l+0xb1e>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	930e      	str	r3, [sp, #56]	; 0x38
 800a0d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a0da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a0dc:	6013      	str	r3, [r2, #0]
 800a0de:	f7ff ba65 	b.w	80095ac <_strtod_l+0x8c>
 800a0e2:	2b65      	cmp	r3, #101	; 0x65
 800a0e4:	f43f ab5d 	beq.w	80097a2 <_strtod_l+0x282>
 800a0e8:	2b45      	cmp	r3, #69	; 0x45
 800a0ea:	f43f ab5a 	beq.w	80097a2 <_strtod_l+0x282>
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f7ff bb92 	b.w	8009818 <_strtod_l+0x2f8>
 800a0f4:	f3af 8000 	nop.w
 800a0f8:	94a03595 	.word	0x94a03595
 800a0fc:	3fdfffff 	.word	0x3fdfffff
 800a100:	35afe535 	.word	0x35afe535
 800a104:	3fe00000 	.word	0x3fe00000
 800a108:	ffc00000 	.word	0xffc00000
 800a10c:	41dfffff 	.word	0x41dfffff
 800a110:	94a03595 	.word	0x94a03595
 800a114:	3fcfffff 	.word	0x3fcfffff
 800a118:	3ff00000 	.word	0x3ff00000
 800a11c:	7ff00000 	.word	0x7ff00000
 800a120:	7fe00000 	.word	0x7fe00000
 800a124:	7c9fffff 	.word	0x7c9fffff
 800a128:	3fe00000 	.word	0x3fe00000
 800a12c:	bff00000 	.word	0xbff00000
 800a130:	7fefffff 	.word	0x7fefffff

0800a134 <strtod>:
 800a134:	460a      	mov	r2, r1
 800a136:	4601      	mov	r1, r0
 800a138:	4802      	ldr	r0, [pc, #8]	; (800a144 <strtod+0x10>)
 800a13a:	4b03      	ldr	r3, [pc, #12]	; (800a148 <strtod+0x14>)
 800a13c:	6800      	ldr	r0, [r0, #0]
 800a13e:	f7ff b9ef 	b.w	8009520 <_strtod_l>
 800a142:	bf00      	nop
 800a144:	20000028 	.word	0x20000028
 800a148:	20000090 	.word	0x20000090

0800a14c <std>:
 800a14c:	2300      	movs	r3, #0
 800a14e:	b510      	push	{r4, lr}
 800a150:	4604      	mov	r4, r0
 800a152:	e9c0 3300 	strd	r3, r3, [r0]
 800a156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a15a:	6083      	str	r3, [r0, #8]
 800a15c:	8181      	strh	r1, [r0, #12]
 800a15e:	6643      	str	r3, [r0, #100]	; 0x64
 800a160:	81c2      	strh	r2, [r0, #14]
 800a162:	6183      	str	r3, [r0, #24]
 800a164:	4619      	mov	r1, r3
 800a166:	2208      	movs	r2, #8
 800a168:	305c      	adds	r0, #92	; 0x5c
 800a16a:	f7ff f97b 	bl	8009464 <memset>
 800a16e:	4b05      	ldr	r3, [pc, #20]	; (800a184 <std+0x38>)
 800a170:	6263      	str	r3, [r4, #36]	; 0x24
 800a172:	4b05      	ldr	r3, [pc, #20]	; (800a188 <std+0x3c>)
 800a174:	62a3      	str	r3, [r4, #40]	; 0x28
 800a176:	4b05      	ldr	r3, [pc, #20]	; (800a18c <std+0x40>)
 800a178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a17a:	4b05      	ldr	r3, [pc, #20]	; (800a190 <std+0x44>)
 800a17c:	6224      	str	r4, [r4, #32]
 800a17e:	6323      	str	r3, [r4, #48]	; 0x30
 800a180:	bd10      	pop	{r4, pc}
 800a182:	bf00      	nop
 800a184:	0800bd69 	.word	0x0800bd69
 800a188:	0800bd8b 	.word	0x0800bd8b
 800a18c:	0800bdc3 	.word	0x0800bdc3
 800a190:	0800bde7 	.word	0x0800bde7

0800a194 <_cleanup_r>:
 800a194:	4901      	ldr	r1, [pc, #4]	; (800a19c <_cleanup_r+0x8>)
 800a196:	f000 b8af 	b.w	800a2f8 <_fwalk_reent>
 800a19a:	bf00      	nop
 800a19c:	0800c13d 	.word	0x0800c13d

0800a1a0 <__sfmoreglue>:
 800a1a0:	b570      	push	{r4, r5, r6, lr}
 800a1a2:	1e4a      	subs	r2, r1, #1
 800a1a4:	2568      	movs	r5, #104	; 0x68
 800a1a6:	4355      	muls	r5, r2
 800a1a8:	460e      	mov	r6, r1
 800a1aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1ae:	f001 f91f 	bl	800b3f0 <_malloc_r>
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	b140      	cbz	r0, 800a1c8 <__sfmoreglue+0x28>
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	e9c0 1600 	strd	r1, r6, [r0]
 800a1bc:	300c      	adds	r0, #12
 800a1be:	60a0      	str	r0, [r4, #8]
 800a1c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1c4:	f7ff f94e 	bl	8009464 <memset>
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	bd70      	pop	{r4, r5, r6, pc}

0800a1cc <__sfp_lock_acquire>:
 800a1cc:	4801      	ldr	r0, [pc, #4]	; (800a1d4 <__sfp_lock_acquire+0x8>)
 800a1ce:	f000 bc22 	b.w	800aa16 <__retarget_lock_acquire_recursive>
 800a1d2:	bf00      	nop
 800a1d4:	20005d74 	.word	0x20005d74

0800a1d8 <__sfp_lock_release>:
 800a1d8:	4801      	ldr	r0, [pc, #4]	; (800a1e0 <__sfp_lock_release+0x8>)
 800a1da:	f000 bc1d 	b.w	800aa18 <__retarget_lock_release_recursive>
 800a1de:	bf00      	nop
 800a1e0:	20005d74 	.word	0x20005d74

0800a1e4 <__sinit_lock_acquire>:
 800a1e4:	4801      	ldr	r0, [pc, #4]	; (800a1ec <__sinit_lock_acquire+0x8>)
 800a1e6:	f000 bc16 	b.w	800aa16 <__retarget_lock_acquire_recursive>
 800a1ea:	bf00      	nop
 800a1ec:	20005d6f 	.word	0x20005d6f

0800a1f0 <__sinit_lock_release>:
 800a1f0:	4801      	ldr	r0, [pc, #4]	; (800a1f8 <__sinit_lock_release+0x8>)
 800a1f2:	f000 bc11 	b.w	800aa18 <__retarget_lock_release_recursive>
 800a1f6:	bf00      	nop
 800a1f8:	20005d6f 	.word	0x20005d6f

0800a1fc <__sinit>:
 800a1fc:	b510      	push	{r4, lr}
 800a1fe:	4604      	mov	r4, r0
 800a200:	f7ff fff0 	bl	800a1e4 <__sinit_lock_acquire>
 800a204:	69a3      	ldr	r3, [r4, #24]
 800a206:	b11b      	cbz	r3, 800a210 <__sinit+0x14>
 800a208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a20c:	f7ff bff0 	b.w	800a1f0 <__sinit_lock_release>
 800a210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a214:	6523      	str	r3, [r4, #80]	; 0x50
 800a216:	4b13      	ldr	r3, [pc, #76]	; (800a264 <__sinit+0x68>)
 800a218:	4a13      	ldr	r2, [pc, #76]	; (800a268 <__sinit+0x6c>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a21e:	42a3      	cmp	r3, r4
 800a220:	bf04      	itt	eq
 800a222:	2301      	moveq	r3, #1
 800a224:	61a3      	streq	r3, [r4, #24]
 800a226:	4620      	mov	r0, r4
 800a228:	f000 f820 	bl	800a26c <__sfp>
 800a22c:	6060      	str	r0, [r4, #4]
 800a22e:	4620      	mov	r0, r4
 800a230:	f000 f81c 	bl	800a26c <__sfp>
 800a234:	60a0      	str	r0, [r4, #8]
 800a236:	4620      	mov	r0, r4
 800a238:	f000 f818 	bl	800a26c <__sfp>
 800a23c:	2200      	movs	r2, #0
 800a23e:	60e0      	str	r0, [r4, #12]
 800a240:	2104      	movs	r1, #4
 800a242:	6860      	ldr	r0, [r4, #4]
 800a244:	f7ff ff82 	bl	800a14c <std>
 800a248:	68a0      	ldr	r0, [r4, #8]
 800a24a:	2201      	movs	r2, #1
 800a24c:	2109      	movs	r1, #9
 800a24e:	f7ff ff7d 	bl	800a14c <std>
 800a252:	68e0      	ldr	r0, [r4, #12]
 800a254:	2202      	movs	r2, #2
 800a256:	2112      	movs	r1, #18
 800a258:	f7ff ff78 	bl	800a14c <std>
 800a25c:	2301      	movs	r3, #1
 800a25e:	61a3      	str	r3, [r4, #24]
 800a260:	e7d2      	b.n	800a208 <__sinit+0xc>
 800a262:	bf00      	nop
 800a264:	0800cb58 	.word	0x0800cb58
 800a268:	0800a195 	.word	0x0800a195

0800a26c <__sfp>:
 800a26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26e:	4607      	mov	r7, r0
 800a270:	f7ff ffac 	bl	800a1cc <__sfp_lock_acquire>
 800a274:	4b1e      	ldr	r3, [pc, #120]	; (800a2f0 <__sfp+0x84>)
 800a276:	681e      	ldr	r6, [r3, #0]
 800a278:	69b3      	ldr	r3, [r6, #24]
 800a27a:	b913      	cbnz	r3, 800a282 <__sfp+0x16>
 800a27c:	4630      	mov	r0, r6
 800a27e:	f7ff ffbd 	bl	800a1fc <__sinit>
 800a282:	3648      	adds	r6, #72	; 0x48
 800a284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a288:	3b01      	subs	r3, #1
 800a28a:	d503      	bpl.n	800a294 <__sfp+0x28>
 800a28c:	6833      	ldr	r3, [r6, #0]
 800a28e:	b30b      	cbz	r3, 800a2d4 <__sfp+0x68>
 800a290:	6836      	ldr	r6, [r6, #0]
 800a292:	e7f7      	b.n	800a284 <__sfp+0x18>
 800a294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a298:	b9d5      	cbnz	r5, 800a2d0 <__sfp+0x64>
 800a29a:	4b16      	ldr	r3, [pc, #88]	; (800a2f4 <__sfp+0x88>)
 800a29c:	60e3      	str	r3, [r4, #12]
 800a29e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2a2:	6665      	str	r5, [r4, #100]	; 0x64
 800a2a4:	f000 fbb6 	bl	800aa14 <__retarget_lock_init_recursive>
 800a2a8:	f7ff ff96 	bl	800a1d8 <__sfp_lock_release>
 800a2ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2b4:	6025      	str	r5, [r4, #0]
 800a2b6:	61a5      	str	r5, [r4, #24]
 800a2b8:	2208      	movs	r2, #8
 800a2ba:	4629      	mov	r1, r5
 800a2bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2c0:	f7ff f8d0 	bl	8009464 <memset>
 800a2c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2d0:	3468      	adds	r4, #104	; 0x68
 800a2d2:	e7d9      	b.n	800a288 <__sfp+0x1c>
 800a2d4:	2104      	movs	r1, #4
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	f7ff ff62 	bl	800a1a0 <__sfmoreglue>
 800a2dc:	4604      	mov	r4, r0
 800a2de:	6030      	str	r0, [r6, #0]
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d1d5      	bne.n	800a290 <__sfp+0x24>
 800a2e4:	f7ff ff78 	bl	800a1d8 <__sfp_lock_release>
 800a2e8:	230c      	movs	r3, #12
 800a2ea:	603b      	str	r3, [r7, #0]
 800a2ec:	e7ee      	b.n	800a2cc <__sfp+0x60>
 800a2ee:	bf00      	nop
 800a2f0:	0800cb58 	.word	0x0800cb58
 800a2f4:	ffff0001 	.word	0xffff0001

0800a2f8 <_fwalk_reent>:
 800a2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	4688      	mov	r8, r1
 800a300:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a304:	2700      	movs	r7, #0
 800a306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a30a:	f1b9 0901 	subs.w	r9, r9, #1
 800a30e:	d505      	bpl.n	800a31c <_fwalk_reent+0x24>
 800a310:	6824      	ldr	r4, [r4, #0]
 800a312:	2c00      	cmp	r4, #0
 800a314:	d1f7      	bne.n	800a306 <_fwalk_reent+0xe>
 800a316:	4638      	mov	r0, r7
 800a318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a31c:	89ab      	ldrh	r3, [r5, #12]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d907      	bls.n	800a332 <_fwalk_reent+0x3a>
 800a322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a326:	3301      	adds	r3, #1
 800a328:	d003      	beq.n	800a332 <_fwalk_reent+0x3a>
 800a32a:	4629      	mov	r1, r5
 800a32c:	4630      	mov	r0, r6
 800a32e:	47c0      	blx	r8
 800a330:	4307      	orrs	r7, r0
 800a332:	3568      	adds	r5, #104	; 0x68
 800a334:	e7e9      	b.n	800a30a <_fwalk_reent+0x12>

0800a336 <rshift>:
 800a336:	6903      	ldr	r3, [r0, #16]
 800a338:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a33c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a340:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a344:	f100 0414 	add.w	r4, r0, #20
 800a348:	dd45      	ble.n	800a3d6 <rshift+0xa0>
 800a34a:	f011 011f 	ands.w	r1, r1, #31
 800a34e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a352:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a356:	d10c      	bne.n	800a372 <rshift+0x3c>
 800a358:	f100 0710 	add.w	r7, r0, #16
 800a35c:	4629      	mov	r1, r5
 800a35e:	42b1      	cmp	r1, r6
 800a360:	d334      	bcc.n	800a3cc <rshift+0x96>
 800a362:	1a9b      	subs	r3, r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	1eea      	subs	r2, r5, #3
 800a368:	4296      	cmp	r6, r2
 800a36a:	bf38      	it	cc
 800a36c:	2300      	movcc	r3, #0
 800a36e:	4423      	add	r3, r4
 800a370:	e015      	b.n	800a39e <rshift+0x68>
 800a372:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a376:	f1c1 0820 	rsb	r8, r1, #32
 800a37a:	40cf      	lsrs	r7, r1
 800a37c:	f105 0e04 	add.w	lr, r5, #4
 800a380:	46a1      	mov	r9, r4
 800a382:	4576      	cmp	r6, lr
 800a384:	46f4      	mov	ip, lr
 800a386:	d815      	bhi.n	800a3b4 <rshift+0x7e>
 800a388:	1a9b      	subs	r3, r3, r2
 800a38a:	009a      	lsls	r2, r3, #2
 800a38c:	3a04      	subs	r2, #4
 800a38e:	3501      	adds	r5, #1
 800a390:	42ae      	cmp	r6, r5
 800a392:	bf38      	it	cc
 800a394:	2200      	movcc	r2, #0
 800a396:	18a3      	adds	r3, r4, r2
 800a398:	50a7      	str	r7, [r4, r2]
 800a39a:	b107      	cbz	r7, 800a39e <rshift+0x68>
 800a39c:	3304      	adds	r3, #4
 800a39e:	1b1a      	subs	r2, r3, r4
 800a3a0:	42a3      	cmp	r3, r4
 800a3a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a3a6:	bf08      	it	eq
 800a3a8:	2300      	moveq	r3, #0
 800a3aa:	6102      	str	r2, [r0, #16]
 800a3ac:	bf08      	it	eq
 800a3ae:	6143      	streq	r3, [r0, #20]
 800a3b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3b4:	f8dc c000 	ldr.w	ip, [ip]
 800a3b8:	fa0c fc08 	lsl.w	ip, ip, r8
 800a3bc:	ea4c 0707 	orr.w	r7, ip, r7
 800a3c0:	f849 7b04 	str.w	r7, [r9], #4
 800a3c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3c8:	40cf      	lsrs	r7, r1
 800a3ca:	e7da      	b.n	800a382 <rshift+0x4c>
 800a3cc:	f851 cb04 	ldr.w	ip, [r1], #4
 800a3d0:	f847 cf04 	str.w	ip, [r7, #4]!
 800a3d4:	e7c3      	b.n	800a35e <rshift+0x28>
 800a3d6:	4623      	mov	r3, r4
 800a3d8:	e7e1      	b.n	800a39e <rshift+0x68>

0800a3da <__hexdig_fun>:
 800a3da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a3de:	2b09      	cmp	r3, #9
 800a3e0:	d802      	bhi.n	800a3e8 <__hexdig_fun+0xe>
 800a3e2:	3820      	subs	r0, #32
 800a3e4:	b2c0      	uxtb	r0, r0
 800a3e6:	4770      	bx	lr
 800a3e8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a3ec:	2b05      	cmp	r3, #5
 800a3ee:	d801      	bhi.n	800a3f4 <__hexdig_fun+0x1a>
 800a3f0:	3847      	subs	r0, #71	; 0x47
 800a3f2:	e7f7      	b.n	800a3e4 <__hexdig_fun+0xa>
 800a3f4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a3f8:	2b05      	cmp	r3, #5
 800a3fa:	d801      	bhi.n	800a400 <__hexdig_fun+0x26>
 800a3fc:	3827      	subs	r0, #39	; 0x27
 800a3fe:	e7f1      	b.n	800a3e4 <__hexdig_fun+0xa>
 800a400:	2000      	movs	r0, #0
 800a402:	4770      	bx	lr

0800a404 <__gethex>:
 800a404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a408:	ed2d 8b02 	vpush	{d8}
 800a40c:	b089      	sub	sp, #36	; 0x24
 800a40e:	ee08 0a10 	vmov	s16, r0
 800a412:	9304      	str	r3, [sp, #16]
 800a414:	4bbc      	ldr	r3, [pc, #752]	; (800a708 <__gethex+0x304>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	9301      	str	r3, [sp, #4]
 800a41a:	4618      	mov	r0, r3
 800a41c:	468b      	mov	fp, r1
 800a41e:	4690      	mov	r8, r2
 800a420:	f7f5 fef6 	bl	8000210 <strlen>
 800a424:	9b01      	ldr	r3, [sp, #4]
 800a426:	f8db 2000 	ldr.w	r2, [fp]
 800a42a:	4403      	add	r3, r0
 800a42c:	4682      	mov	sl, r0
 800a42e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a432:	9305      	str	r3, [sp, #20]
 800a434:	1c93      	adds	r3, r2, #2
 800a436:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a43a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a43e:	32fe      	adds	r2, #254	; 0xfe
 800a440:	18d1      	adds	r1, r2, r3
 800a442:	461f      	mov	r7, r3
 800a444:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a448:	9100      	str	r1, [sp, #0]
 800a44a:	2830      	cmp	r0, #48	; 0x30
 800a44c:	d0f8      	beq.n	800a440 <__gethex+0x3c>
 800a44e:	f7ff ffc4 	bl	800a3da <__hexdig_fun>
 800a452:	4604      	mov	r4, r0
 800a454:	2800      	cmp	r0, #0
 800a456:	d13a      	bne.n	800a4ce <__gethex+0xca>
 800a458:	9901      	ldr	r1, [sp, #4]
 800a45a:	4652      	mov	r2, sl
 800a45c:	4638      	mov	r0, r7
 800a45e:	f001 fcc6 	bl	800bdee <strncmp>
 800a462:	4605      	mov	r5, r0
 800a464:	2800      	cmp	r0, #0
 800a466:	d168      	bne.n	800a53a <__gethex+0x136>
 800a468:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a46c:	eb07 060a 	add.w	r6, r7, sl
 800a470:	f7ff ffb3 	bl	800a3da <__hexdig_fun>
 800a474:	2800      	cmp	r0, #0
 800a476:	d062      	beq.n	800a53e <__gethex+0x13a>
 800a478:	4633      	mov	r3, r6
 800a47a:	7818      	ldrb	r0, [r3, #0]
 800a47c:	2830      	cmp	r0, #48	; 0x30
 800a47e:	461f      	mov	r7, r3
 800a480:	f103 0301 	add.w	r3, r3, #1
 800a484:	d0f9      	beq.n	800a47a <__gethex+0x76>
 800a486:	f7ff ffa8 	bl	800a3da <__hexdig_fun>
 800a48a:	2301      	movs	r3, #1
 800a48c:	fab0 f480 	clz	r4, r0
 800a490:	0964      	lsrs	r4, r4, #5
 800a492:	4635      	mov	r5, r6
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	463a      	mov	r2, r7
 800a498:	4616      	mov	r6, r2
 800a49a:	3201      	adds	r2, #1
 800a49c:	7830      	ldrb	r0, [r6, #0]
 800a49e:	f7ff ff9c 	bl	800a3da <__hexdig_fun>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d1f8      	bne.n	800a498 <__gethex+0x94>
 800a4a6:	9901      	ldr	r1, [sp, #4]
 800a4a8:	4652      	mov	r2, sl
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f001 fc9f 	bl	800bdee <strncmp>
 800a4b0:	b980      	cbnz	r0, 800a4d4 <__gethex+0xd0>
 800a4b2:	b94d      	cbnz	r5, 800a4c8 <__gethex+0xc4>
 800a4b4:	eb06 050a 	add.w	r5, r6, sl
 800a4b8:	462a      	mov	r2, r5
 800a4ba:	4616      	mov	r6, r2
 800a4bc:	3201      	adds	r2, #1
 800a4be:	7830      	ldrb	r0, [r6, #0]
 800a4c0:	f7ff ff8b 	bl	800a3da <__hexdig_fun>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d1f8      	bne.n	800a4ba <__gethex+0xb6>
 800a4c8:	1bad      	subs	r5, r5, r6
 800a4ca:	00ad      	lsls	r5, r5, #2
 800a4cc:	e004      	b.n	800a4d8 <__gethex+0xd4>
 800a4ce:	2400      	movs	r4, #0
 800a4d0:	4625      	mov	r5, r4
 800a4d2:	e7e0      	b.n	800a496 <__gethex+0x92>
 800a4d4:	2d00      	cmp	r5, #0
 800a4d6:	d1f7      	bne.n	800a4c8 <__gethex+0xc4>
 800a4d8:	7833      	ldrb	r3, [r6, #0]
 800a4da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a4de:	2b50      	cmp	r3, #80	; 0x50
 800a4e0:	d13b      	bne.n	800a55a <__gethex+0x156>
 800a4e2:	7873      	ldrb	r3, [r6, #1]
 800a4e4:	2b2b      	cmp	r3, #43	; 0x2b
 800a4e6:	d02c      	beq.n	800a542 <__gethex+0x13e>
 800a4e8:	2b2d      	cmp	r3, #45	; 0x2d
 800a4ea:	d02e      	beq.n	800a54a <__gethex+0x146>
 800a4ec:	1c71      	adds	r1, r6, #1
 800a4ee:	f04f 0900 	mov.w	r9, #0
 800a4f2:	7808      	ldrb	r0, [r1, #0]
 800a4f4:	f7ff ff71 	bl	800a3da <__hexdig_fun>
 800a4f8:	1e43      	subs	r3, r0, #1
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b18      	cmp	r3, #24
 800a4fe:	d82c      	bhi.n	800a55a <__gethex+0x156>
 800a500:	f1a0 0210 	sub.w	r2, r0, #16
 800a504:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a508:	f7ff ff67 	bl	800a3da <__hexdig_fun>
 800a50c:	1e43      	subs	r3, r0, #1
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b18      	cmp	r3, #24
 800a512:	d91d      	bls.n	800a550 <__gethex+0x14c>
 800a514:	f1b9 0f00 	cmp.w	r9, #0
 800a518:	d000      	beq.n	800a51c <__gethex+0x118>
 800a51a:	4252      	negs	r2, r2
 800a51c:	4415      	add	r5, r2
 800a51e:	f8cb 1000 	str.w	r1, [fp]
 800a522:	b1e4      	cbz	r4, 800a55e <__gethex+0x15a>
 800a524:	9b00      	ldr	r3, [sp, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	bf14      	ite	ne
 800a52a:	2700      	movne	r7, #0
 800a52c:	2706      	moveq	r7, #6
 800a52e:	4638      	mov	r0, r7
 800a530:	b009      	add	sp, #36	; 0x24
 800a532:	ecbd 8b02 	vpop	{d8}
 800a536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53a:	463e      	mov	r6, r7
 800a53c:	4625      	mov	r5, r4
 800a53e:	2401      	movs	r4, #1
 800a540:	e7ca      	b.n	800a4d8 <__gethex+0xd4>
 800a542:	f04f 0900 	mov.w	r9, #0
 800a546:	1cb1      	adds	r1, r6, #2
 800a548:	e7d3      	b.n	800a4f2 <__gethex+0xee>
 800a54a:	f04f 0901 	mov.w	r9, #1
 800a54e:	e7fa      	b.n	800a546 <__gethex+0x142>
 800a550:	230a      	movs	r3, #10
 800a552:	fb03 0202 	mla	r2, r3, r2, r0
 800a556:	3a10      	subs	r2, #16
 800a558:	e7d4      	b.n	800a504 <__gethex+0x100>
 800a55a:	4631      	mov	r1, r6
 800a55c:	e7df      	b.n	800a51e <__gethex+0x11a>
 800a55e:	1bf3      	subs	r3, r6, r7
 800a560:	3b01      	subs	r3, #1
 800a562:	4621      	mov	r1, r4
 800a564:	2b07      	cmp	r3, #7
 800a566:	dc0b      	bgt.n	800a580 <__gethex+0x17c>
 800a568:	ee18 0a10 	vmov	r0, s16
 800a56c:	f000 fa76 	bl	800aa5c <_Balloc>
 800a570:	4604      	mov	r4, r0
 800a572:	b940      	cbnz	r0, 800a586 <__gethex+0x182>
 800a574:	4b65      	ldr	r3, [pc, #404]	; (800a70c <__gethex+0x308>)
 800a576:	4602      	mov	r2, r0
 800a578:	21de      	movs	r1, #222	; 0xde
 800a57a:	4865      	ldr	r0, [pc, #404]	; (800a710 <__gethex+0x30c>)
 800a57c:	f001 fd2a 	bl	800bfd4 <__assert_func>
 800a580:	3101      	adds	r1, #1
 800a582:	105b      	asrs	r3, r3, #1
 800a584:	e7ee      	b.n	800a564 <__gethex+0x160>
 800a586:	f100 0914 	add.w	r9, r0, #20
 800a58a:	f04f 0b00 	mov.w	fp, #0
 800a58e:	f1ca 0301 	rsb	r3, sl, #1
 800a592:	f8cd 9008 	str.w	r9, [sp, #8]
 800a596:	f8cd b000 	str.w	fp, [sp]
 800a59a:	9306      	str	r3, [sp, #24]
 800a59c:	42b7      	cmp	r7, r6
 800a59e:	d340      	bcc.n	800a622 <__gethex+0x21e>
 800a5a0:	9802      	ldr	r0, [sp, #8]
 800a5a2:	9b00      	ldr	r3, [sp, #0]
 800a5a4:	f840 3b04 	str.w	r3, [r0], #4
 800a5a8:	eba0 0009 	sub.w	r0, r0, r9
 800a5ac:	1080      	asrs	r0, r0, #2
 800a5ae:	0146      	lsls	r6, r0, #5
 800a5b0:	6120      	str	r0, [r4, #16]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 fb48 	bl	800ac48 <__hi0bits>
 800a5b8:	1a30      	subs	r0, r6, r0
 800a5ba:	f8d8 6000 	ldr.w	r6, [r8]
 800a5be:	42b0      	cmp	r0, r6
 800a5c0:	dd63      	ble.n	800a68a <__gethex+0x286>
 800a5c2:	1b87      	subs	r7, r0, r6
 800a5c4:	4639      	mov	r1, r7
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f000 fee2 	bl	800b390 <__any_on>
 800a5cc:	4682      	mov	sl, r0
 800a5ce:	b1a8      	cbz	r0, 800a5fc <__gethex+0x1f8>
 800a5d0:	1e7b      	subs	r3, r7, #1
 800a5d2:	1159      	asrs	r1, r3, #5
 800a5d4:	f003 021f 	and.w	r2, r3, #31
 800a5d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a5dc:	f04f 0a01 	mov.w	sl, #1
 800a5e0:	fa0a f202 	lsl.w	r2, sl, r2
 800a5e4:	420a      	tst	r2, r1
 800a5e6:	d009      	beq.n	800a5fc <__gethex+0x1f8>
 800a5e8:	4553      	cmp	r3, sl
 800a5ea:	dd05      	ble.n	800a5f8 <__gethex+0x1f4>
 800a5ec:	1eb9      	subs	r1, r7, #2
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f000 fece 	bl	800b390 <__any_on>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d145      	bne.n	800a684 <__gethex+0x280>
 800a5f8:	f04f 0a02 	mov.w	sl, #2
 800a5fc:	4639      	mov	r1, r7
 800a5fe:	4620      	mov	r0, r4
 800a600:	f7ff fe99 	bl	800a336 <rshift>
 800a604:	443d      	add	r5, r7
 800a606:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a60a:	42ab      	cmp	r3, r5
 800a60c:	da4c      	bge.n	800a6a8 <__gethex+0x2a4>
 800a60e:	ee18 0a10 	vmov	r0, s16
 800a612:	4621      	mov	r1, r4
 800a614:	f000 fa62 	bl	800aadc <_Bfree>
 800a618:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a61a:	2300      	movs	r3, #0
 800a61c:	6013      	str	r3, [r2, #0]
 800a61e:	27a3      	movs	r7, #163	; 0xa3
 800a620:	e785      	b.n	800a52e <__gethex+0x12a>
 800a622:	1e73      	subs	r3, r6, #1
 800a624:	9a05      	ldr	r2, [sp, #20]
 800a626:	9303      	str	r3, [sp, #12]
 800a628:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d019      	beq.n	800a664 <__gethex+0x260>
 800a630:	f1bb 0f20 	cmp.w	fp, #32
 800a634:	d107      	bne.n	800a646 <__gethex+0x242>
 800a636:	9b02      	ldr	r3, [sp, #8]
 800a638:	9a00      	ldr	r2, [sp, #0]
 800a63a:	f843 2b04 	str.w	r2, [r3], #4
 800a63e:	9302      	str	r3, [sp, #8]
 800a640:	2300      	movs	r3, #0
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	469b      	mov	fp, r3
 800a646:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a64a:	f7ff fec6 	bl	800a3da <__hexdig_fun>
 800a64e:	9b00      	ldr	r3, [sp, #0]
 800a650:	f000 000f 	and.w	r0, r0, #15
 800a654:	fa00 f00b 	lsl.w	r0, r0, fp
 800a658:	4303      	orrs	r3, r0
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	f10b 0b04 	add.w	fp, fp, #4
 800a660:	9b03      	ldr	r3, [sp, #12]
 800a662:	e00d      	b.n	800a680 <__gethex+0x27c>
 800a664:	9b03      	ldr	r3, [sp, #12]
 800a666:	9a06      	ldr	r2, [sp, #24]
 800a668:	4413      	add	r3, r2
 800a66a:	42bb      	cmp	r3, r7
 800a66c:	d3e0      	bcc.n	800a630 <__gethex+0x22c>
 800a66e:	4618      	mov	r0, r3
 800a670:	9901      	ldr	r1, [sp, #4]
 800a672:	9307      	str	r3, [sp, #28]
 800a674:	4652      	mov	r2, sl
 800a676:	f001 fbba 	bl	800bdee <strncmp>
 800a67a:	9b07      	ldr	r3, [sp, #28]
 800a67c:	2800      	cmp	r0, #0
 800a67e:	d1d7      	bne.n	800a630 <__gethex+0x22c>
 800a680:	461e      	mov	r6, r3
 800a682:	e78b      	b.n	800a59c <__gethex+0x198>
 800a684:	f04f 0a03 	mov.w	sl, #3
 800a688:	e7b8      	b.n	800a5fc <__gethex+0x1f8>
 800a68a:	da0a      	bge.n	800a6a2 <__gethex+0x29e>
 800a68c:	1a37      	subs	r7, r6, r0
 800a68e:	4621      	mov	r1, r4
 800a690:	ee18 0a10 	vmov	r0, s16
 800a694:	463a      	mov	r2, r7
 800a696:	f000 fc3d 	bl	800af14 <__lshift>
 800a69a:	1bed      	subs	r5, r5, r7
 800a69c:	4604      	mov	r4, r0
 800a69e:	f100 0914 	add.w	r9, r0, #20
 800a6a2:	f04f 0a00 	mov.w	sl, #0
 800a6a6:	e7ae      	b.n	800a606 <__gethex+0x202>
 800a6a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a6ac:	42a8      	cmp	r0, r5
 800a6ae:	dd72      	ble.n	800a796 <__gethex+0x392>
 800a6b0:	1b45      	subs	r5, r0, r5
 800a6b2:	42ae      	cmp	r6, r5
 800a6b4:	dc36      	bgt.n	800a724 <__gethex+0x320>
 800a6b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d02a      	beq.n	800a714 <__gethex+0x310>
 800a6be:	2b03      	cmp	r3, #3
 800a6c0:	d02c      	beq.n	800a71c <__gethex+0x318>
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d115      	bne.n	800a6f2 <__gethex+0x2ee>
 800a6c6:	42ae      	cmp	r6, r5
 800a6c8:	d113      	bne.n	800a6f2 <__gethex+0x2ee>
 800a6ca:	2e01      	cmp	r6, #1
 800a6cc:	d10b      	bne.n	800a6e6 <__gethex+0x2e2>
 800a6ce:	9a04      	ldr	r2, [sp, #16]
 800a6d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	6123      	str	r3, [r4, #16]
 800a6da:	f8c9 3000 	str.w	r3, [r9]
 800a6de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6e0:	2762      	movs	r7, #98	; 0x62
 800a6e2:	601c      	str	r4, [r3, #0]
 800a6e4:	e723      	b.n	800a52e <__gethex+0x12a>
 800a6e6:	1e71      	subs	r1, r6, #1
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f000 fe51 	bl	800b390 <__any_on>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d1ed      	bne.n	800a6ce <__gethex+0x2ca>
 800a6f2:	ee18 0a10 	vmov	r0, s16
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	f000 f9f0 	bl	800aadc <_Bfree>
 800a6fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6fe:	2300      	movs	r3, #0
 800a700:	6013      	str	r3, [r2, #0]
 800a702:	2750      	movs	r7, #80	; 0x50
 800a704:	e713      	b.n	800a52e <__gethex+0x12a>
 800a706:	bf00      	nop
 800a708:	0800cc94 	.word	0x0800cc94
 800a70c:	0800cc18 	.word	0x0800cc18
 800a710:	0800cc29 	.word	0x0800cc29
 800a714:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1eb      	bne.n	800a6f2 <__gethex+0x2ee>
 800a71a:	e7d8      	b.n	800a6ce <__gethex+0x2ca>
 800a71c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1d5      	bne.n	800a6ce <__gethex+0x2ca>
 800a722:	e7e6      	b.n	800a6f2 <__gethex+0x2ee>
 800a724:	1e6f      	subs	r7, r5, #1
 800a726:	f1ba 0f00 	cmp.w	sl, #0
 800a72a:	d131      	bne.n	800a790 <__gethex+0x38c>
 800a72c:	b127      	cbz	r7, 800a738 <__gethex+0x334>
 800a72e:	4639      	mov	r1, r7
 800a730:	4620      	mov	r0, r4
 800a732:	f000 fe2d 	bl	800b390 <__any_on>
 800a736:	4682      	mov	sl, r0
 800a738:	117b      	asrs	r3, r7, #5
 800a73a:	2101      	movs	r1, #1
 800a73c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a740:	f007 071f 	and.w	r7, r7, #31
 800a744:	fa01 f707 	lsl.w	r7, r1, r7
 800a748:	421f      	tst	r7, r3
 800a74a:	4629      	mov	r1, r5
 800a74c:	4620      	mov	r0, r4
 800a74e:	bf18      	it	ne
 800a750:	f04a 0a02 	orrne.w	sl, sl, #2
 800a754:	1b76      	subs	r6, r6, r5
 800a756:	f7ff fdee 	bl	800a336 <rshift>
 800a75a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a75e:	2702      	movs	r7, #2
 800a760:	f1ba 0f00 	cmp.w	sl, #0
 800a764:	d048      	beq.n	800a7f8 <__gethex+0x3f4>
 800a766:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	d015      	beq.n	800a79a <__gethex+0x396>
 800a76e:	2b03      	cmp	r3, #3
 800a770:	d017      	beq.n	800a7a2 <__gethex+0x39e>
 800a772:	2b01      	cmp	r3, #1
 800a774:	d109      	bne.n	800a78a <__gethex+0x386>
 800a776:	f01a 0f02 	tst.w	sl, #2
 800a77a:	d006      	beq.n	800a78a <__gethex+0x386>
 800a77c:	f8d9 0000 	ldr.w	r0, [r9]
 800a780:	ea4a 0a00 	orr.w	sl, sl, r0
 800a784:	f01a 0f01 	tst.w	sl, #1
 800a788:	d10e      	bne.n	800a7a8 <__gethex+0x3a4>
 800a78a:	f047 0710 	orr.w	r7, r7, #16
 800a78e:	e033      	b.n	800a7f8 <__gethex+0x3f4>
 800a790:	f04f 0a01 	mov.w	sl, #1
 800a794:	e7d0      	b.n	800a738 <__gethex+0x334>
 800a796:	2701      	movs	r7, #1
 800a798:	e7e2      	b.n	800a760 <__gethex+0x35c>
 800a79a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a79c:	f1c3 0301 	rsb	r3, r3, #1
 800a7a0:	9315      	str	r3, [sp, #84]	; 0x54
 800a7a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d0f0      	beq.n	800a78a <__gethex+0x386>
 800a7a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7ac:	f104 0314 	add.w	r3, r4, #20
 800a7b0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7b4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a7b8:	f04f 0c00 	mov.w	ip, #0
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a7c6:	d01c      	beq.n	800a802 <__gethex+0x3fe>
 800a7c8:	3201      	adds	r2, #1
 800a7ca:	6002      	str	r2, [r0, #0]
 800a7cc:	2f02      	cmp	r7, #2
 800a7ce:	f104 0314 	add.w	r3, r4, #20
 800a7d2:	d13f      	bne.n	800a854 <__gethex+0x450>
 800a7d4:	f8d8 2000 	ldr.w	r2, [r8]
 800a7d8:	3a01      	subs	r2, #1
 800a7da:	42b2      	cmp	r2, r6
 800a7dc:	d10a      	bne.n	800a7f4 <__gethex+0x3f0>
 800a7de:	1171      	asrs	r1, r6, #5
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7e6:	f006 061f 	and.w	r6, r6, #31
 800a7ea:	fa02 f606 	lsl.w	r6, r2, r6
 800a7ee:	421e      	tst	r6, r3
 800a7f0:	bf18      	it	ne
 800a7f2:	4617      	movne	r7, r2
 800a7f4:	f047 0720 	orr.w	r7, r7, #32
 800a7f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7fa:	601c      	str	r4, [r3, #0]
 800a7fc:	9b04      	ldr	r3, [sp, #16]
 800a7fe:	601d      	str	r5, [r3, #0]
 800a800:	e695      	b.n	800a52e <__gethex+0x12a>
 800a802:	4299      	cmp	r1, r3
 800a804:	f843 cc04 	str.w	ip, [r3, #-4]
 800a808:	d8d8      	bhi.n	800a7bc <__gethex+0x3b8>
 800a80a:	68a3      	ldr	r3, [r4, #8]
 800a80c:	459b      	cmp	fp, r3
 800a80e:	db19      	blt.n	800a844 <__gethex+0x440>
 800a810:	6861      	ldr	r1, [r4, #4]
 800a812:	ee18 0a10 	vmov	r0, s16
 800a816:	3101      	adds	r1, #1
 800a818:	f000 f920 	bl	800aa5c <_Balloc>
 800a81c:	4681      	mov	r9, r0
 800a81e:	b918      	cbnz	r0, 800a828 <__gethex+0x424>
 800a820:	4b1a      	ldr	r3, [pc, #104]	; (800a88c <__gethex+0x488>)
 800a822:	4602      	mov	r2, r0
 800a824:	2184      	movs	r1, #132	; 0x84
 800a826:	e6a8      	b.n	800a57a <__gethex+0x176>
 800a828:	6922      	ldr	r2, [r4, #16]
 800a82a:	3202      	adds	r2, #2
 800a82c:	f104 010c 	add.w	r1, r4, #12
 800a830:	0092      	lsls	r2, r2, #2
 800a832:	300c      	adds	r0, #12
 800a834:	f000 f903 	bl	800aa3e <memcpy>
 800a838:	4621      	mov	r1, r4
 800a83a:	ee18 0a10 	vmov	r0, s16
 800a83e:	f000 f94d 	bl	800aadc <_Bfree>
 800a842:	464c      	mov	r4, r9
 800a844:	6923      	ldr	r3, [r4, #16]
 800a846:	1c5a      	adds	r2, r3, #1
 800a848:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a84c:	6122      	str	r2, [r4, #16]
 800a84e:	2201      	movs	r2, #1
 800a850:	615a      	str	r2, [r3, #20]
 800a852:	e7bb      	b.n	800a7cc <__gethex+0x3c8>
 800a854:	6922      	ldr	r2, [r4, #16]
 800a856:	455a      	cmp	r2, fp
 800a858:	dd0b      	ble.n	800a872 <__gethex+0x46e>
 800a85a:	2101      	movs	r1, #1
 800a85c:	4620      	mov	r0, r4
 800a85e:	f7ff fd6a 	bl	800a336 <rshift>
 800a862:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a866:	3501      	adds	r5, #1
 800a868:	42ab      	cmp	r3, r5
 800a86a:	f6ff aed0 	blt.w	800a60e <__gethex+0x20a>
 800a86e:	2701      	movs	r7, #1
 800a870:	e7c0      	b.n	800a7f4 <__gethex+0x3f0>
 800a872:	f016 061f 	ands.w	r6, r6, #31
 800a876:	d0fa      	beq.n	800a86e <__gethex+0x46a>
 800a878:	449a      	add	sl, r3
 800a87a:	f1c6 0620 	rsb	r6, r6, #32
 800a87e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a882:	f000 f9e1 	bl	800ac48 <__hi0bits>
 800a886:	42b0      	cmp	r0, r6
 800a888:	dbe7      	blt.n	800a85a <__gethex+0x456>
 800a88a:	e7f0      	b.n	800a86e <__gethex+0x46a>
 800a88c:	0800cc18 	.word	0x0800cc18

0800a890 <L_shift>:
 800a890:	f1c2 0208 	rsb	r2, r2, #8
 800a894:	0092      	lsls	r2, r2, #2
 800a896:	b570      	push	{r4, r5, r6, lr}
 800a898:	f1c2 0620 	rsb	r6, r2, #32
 800a89c:	6843      	ldr	r3, [r0, #4]
 800a89e:	6804      	ldr	r4, [r0, #0]
 800a8a0:	fa03 f506 	lsl.w	r5, r3, r6
 800a8a4:	432c      	orrs	r4, r5
 800a8a6:	40d3      	lsrs	r3, r2
 800a8a8:	6004      	str	r4, [r0, #0]
 800a8aa:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8ae:	4288      	cmp	r0, r1
 800a8b0:	d3f4      	bcc.n	800a89c <L_shift+0xc>
 800a8b2:	bd70      	pop	{r4, r5, r6, pc}

0800a8b4 <__match>:
 800a8b4:	b530      	push	{r4, r5, lr}
 800a8b6:	6803      	ldr	r3, [r0, #0]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8be:	b914      	cbnz	r4, 800a8c6 <__match+0x12>
 800a8c0:	6003      	str	r3, [r0, #0]
 800a8c2:	2001      	movs	r0, #1
 800a8c4:	bd30      	pop	{r4, r5, pc}
 800a8c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a8ce:	2d19      	cmp	r5, #25
 800a8d0:	bf98      	it	ls
 800a8d2:	3220      	addls	r2, #32
 800a8d4:	42a2      	cmp	r2, r4
 800a8d6:	d0f0      	beq.n	800a8ba <__match+0x6>
 800a8d8:	2000      	movs	r0, #0
 800a8da:	e7f3      	b.n	800a8c4 <__match+0x10>

0800a8dc <__hexnan>:
 800a8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e0:	680b      	ldr	r3, [r1, #0]
 800a8e2:	6801      	ldr	r1, [r0, #0]
 800a8e4:	115e      	asrs	r6, r3, #5
 800a8e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8ea:	f013 031f 	ands.w	r3, r3, #31
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	bf18      	it	ne
 800a8f2:	3604      	addne	r6, #4
 800a8f4:	2500      	movs	r5, #0
 800a8f6:	1f37      	subs	r7, r6, #4
 800a8f8:	4682      	mov	sl, r0
 800a8fa:	4690      	mov	r8, r2
 800a8fc:	9301      	str	r3, [sp, #4]
 800a8fe:	f846 5c04 	str.w	r5, [r6, #-4]
 800a902:	46b9      	mov	r9, r7
 800a904:	463c      	mov	r4, r7
 800a906:	9502      	str	r5, [sp, #8]
 800a908:	46ab      	mov	fp, r5
 800a90a:	784a      	ldrb	r2, [r1, #1]
 800a90c:	1c4b      	adds	r3, r1, #1
 800a90e:	9303      	str	r3, [sp, #12]
 800a910:	b342      	cbz	r2, 800a964 <__hexnan+0x88>
 800a912:	4610      	mov	r0, r2
 800a914:	9105      	str	r1, [sp, #20]
 800a916:	9204      	str	r2, [sp, #16]
 800a918:	f7ff fd5f 	bl	800a3da <__hexdig_fun>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d14f      	bne.n	800a9c0 <__hexnan+0xe4>
 800a920:	9a04      	ldr	r2, [sp, #16]
 800a922:	9905      	ldr	r1, [sp, #20]
 800a924:	2a20      	cmp	r2, #32
 800a926:	d818      	bhi.n	800a95a <__hexnan+0x7e>
 800a928:	9b02      	ldr	r3, [sp, #8]
 800a92a:	459b      	cmp	fp, r3
 800a92c:	dd13      	ble.n	800a956 <__hexnan+0x7a>
 800a92e:	454c      	cmp	r4, r9
 800a930:	d206      	bcs.n	800a940 <__hexnan+0x64>
 800a932:	2d07      	cmp	r5, #7
 800a934:	dc04      	bgt.n	800a940 <__hexnan+0x64>
 800a936:	462a      	mov	r2, r5
 800a938:	4649      	mov	r1, r9
 800a93a:	4620      	mov	r0, r4
 800a93c:	f7ff ffa8 	bl	800a890 <L_shift>
 800a940:	4544      	cmp	r4, r8
 800a942:	d950      	bls.n	800a9e6 <__hexnan+0x10a>
 800a944:	2300      	movs	r3, #0
 800a946:	f1a4 0904 	sub.w	r9, r4, #4
 800a94a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a94e:	f8cd b008 	str.w	fp, [sp, #8]
 800a952:	464c      	mov	r4, r9
 800a954:	461d      	mov	r5, r3
 800a956:	9903      	ldr	r1, [sp, #12]
 800a958:	e7d7      	b.n	800a90a <__hexnan+0x2e>
 800a95a:	2a29      	cmp	r2, #41	; 0x29
 800a95c:	d156      	bne.n	800aa0c <__hexnan+0x130>
 800a95e:	3102      	adds	r1, #2
 800a960:	f8ca 1000 	str.w	r1, [sl]
 800a964:	f1bb 0f00 	cmp.w	fp, #0
 800a968:	d050      	beq.n	800aa0c <__hexnan+0x130>
 800a96a:	454c      	cmp	r4, r9
 800a96c:	d206      	bcs.n	800a97c <__hexnan+0xa0>
 800a96e:	2d07      	cmp	r5, #7
 800a970:	dc04      	bgt.n	800a97c <__hexnan+0xa0>
 800a972:	462a      	mov	r2, r5
 800a974:	4649      	mov	r1, r9
 800a976:	4620      	mov	r0, r4
 800a978:	f7ff ff8a 	bl	800a890 <L_shift>
 800a97c:	4544      	cmp	r4, r8
 800a97e:	d934      	bls.n	800a9ea <__hexnan+0x10e>
 800a980:	f1a8 0204 	sub.w	r2, r8, #4
 800a984:	4623      	mov	r3, r4
 800a986:	f853 1b04 	ldr.w	r1, [r3], #4
 800a98a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a98e:	429f      	cmp	r7, r3
 800a990:	d2f9      	bcs.n	800a986 <__hexnan+0xaa>
 800a992:	1b3b      	subs	r3, r7, r4
 800a994:	f023 0303 	bic.w	r3, r3, #3
 800a998:	3304      	adds	r3, #4
 800a99a:	3401      	adds	r4, #1
 800a99c:	3e03      	subs	r6, #3
 800a99e:	42b4      	cmp	r4, r6
 800a9a0:	bf88      	it	hi
 800a9a2:	2304      	movhi	r3, #4
 800a9a4:	4443      	add	r3, r8
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f843 2b04 	str.w	r2, [r3], #4
 800a9ac:	429f      	cmp	r7, r3
 800a9ae:	d2fb      	bcs.n	800a9a8 <__hexnan+0xcc>
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	b91b      	cbnz	r3, 800a9bc <__hexnan+0xe0>
 800a9b4:	4547      	cmp	r7, r8
 800a9b6:	d127      	bne.n	800aa08 <__hexnan+0x12c>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	603b      	str	r3, [r7, #0]
 800a9bc:	2005      	movs	r0, #5
 800a9be:	e026      	b.n	800aa0e <__hexnan+0x132>
 800a9c0:	3501      	adds	r5, #1
 800a9c2:	2d08      	cmp	r5, #8
 800a9c4:	f10b 0b01 	add.w	fp, fp, #1
 800a9c8:	dd06      	ble.n	800a9d8 <__hexnan+0xfc>
 800a9ca:	4544      	cmp	r4, r8
 800a9cc:	d9c3      	bls.n	800a956 <__hexnan+0x7a>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9d4:	2501      	movs	r5, #1
 800a9d6:	3c04      	subs	r4, #4
 800a9d8:	6822      	ldr	r2, [r4, #0]
 800a9da:	f000 000f 	and.w	r0, r0, #15
 800a9de:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a9e2:	6022      	str	r2, [r4, #0]
 800a9e4:	e7b7      	b.n	800a956 <__hexnan+0x7a>
 800a9e6:	2508      	movs	r5, #8
 800a9e8:	e7b5      	b.n	800a956 <__hexnan+0x7a>
 800a9ea:	9b01      	ldr	r3, [sp, #4]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d0df      	beq.n	800a9b0 <__hexnan+0xd4>
 800a9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f4:	f1c3 0320 	rsb	r3, r3, #32
 800a9f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa00:	401a      	ands	r2, r3
 800aa02:	f846 2c04 	str.w	r2, [r6, #-4]
 800aa06:	e7d3      	b.n	800a9b0 <__hexnan+0xd4>
 800aa08:	3f04      	subs	r7, #4
 800aa0a:	e7d1      	b.n	800a9b0 <__hexnan+0xd4>
 800aa0c:	2004      	movs	r0, #4
 800aa0e:	b007      	add	sp, #28
 800aa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa14 <__retarget_lock_init_recursive>:
 800aa14:	4770      	bx	lr

0800aa16 <__retarget_lock_acquire_recursive>:
 800aa16:	4770      	bx	lr

0800aa18 <__retarget_lock_release_recursive>:
 800aa18:	4770      	bx	lr

0800aa1a <__ascii_mbtowc>:
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	b901      	cbnz	r1, 800aa20 <__ascii_mbtowc+0x6>
 800aa1e:	a901      	add	r1, sp, #4
 800aa20:	b142      	cbz	r2, 800aa34 <__ascii_mbtowc+0x1a>
 800aa22:	b14b      	cbz	r3, 800aa38 <__ascii_mbtowc+0x1e>
 800aa24:	7813      	ldrb	r3, [r2, #0]
 800aa26:	600b      	str	r3, [r1, #0]
 800aa28:	7812      	ldrb	r2, [r2, #0]
 800aa2a:	1e10      	subs	r0, r2, #0
 800aa2c:	bf18      	it	ne
 800aa2e:	2001      	movne	r0, #1
 800aa30:	b002      	add	sp, #8
 800aa32:	4770      	bx	lr
 800aa34:	4610      	mov	r0, r2
 800aa36:	e7fb      	b.n	800aa30 <__ascii_mbtowc+0x16>
 800aa38:	f06f 0001 	mvn.w	r0, #1
 800aa3c:	e7f8      	b.n	800aa30 <__ascii_mbtowc+0x16>

0800aa3e <memcpy>:
 800aa3e:	440a      	add	r2, r1
 800aa40:	4291      	cmp	r1, r2
 800aa42:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa46:	d100      	bne.n	800aa4a <memcpy+0xc>
 800aa48:	4770      	bx	lr
 800aa4a:	b510      	push	{r4, lr}
 800aa4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa54:	4291      	cmp	r1, r2
 800aa56:	d1f9      	bne.n	800aa4c <memcpy+0xe>
 800aa58:	bd10      	pop	{r4, pc}
	...

0800aa5c <_Balloc>:
 800aa5c:	b570      	push	{r4, r5, r6, lr}
 800aa5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa60:	4604      	mov	r4, r0
 800aa62:	460d      	mov	r5, r1
 800aa64:	b976      	cbnz	r6, 800aa84 <_Balloc+0x28>
 800aa66:	2010      	movs	r0, #16
 800aa68:	f001 fc2c 	bl	800c2c4 <malloc>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	6260      	str	r0, [r4, #36]	; 0x24
 800aa70:	b920      	cbnz	r0, 800aa7c <_Balloc+0x20>
 800aa72:	4b18      	ldr	r3, [pc, #96]	; (800aad4 <_Balloc+0x78>)
 800aa74:	4818      	ldr	r0, [pc, #96]	; (800aad8 <_Balloc+0x7c>)
 800aa76:	2166      	movs	r1, #102	; 0x66
 800aa78:	f001 faac 	bl	800bfd4 <__assert_func>
 800aa7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa80:	6006      	str	r6, [r0, #0]
 800aa82:	60c6      	str	r6, [r0, #12]
 800aa84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa86:	68f3      	ldr	r3, [r6, #12]
 800aa88:	b183      	cbz	r3, 800aaac <_Balloc+0x50>
 800aa8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa92:	b9b8      	cbnz	r0, 800aac4 <_Balloc+0x68>
 800aa94:	2101      	movs	r1, #1
 800aa96:	fa01 f605 	lsl.w	r6, r1, r5
 800aa9a:	1d72      	adds	r2, r6, #5
 800aa9c:	0092      	lsls	r2, r2, #2
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f000 fc97 	bl	800b3d2 <_calloc_r>
 800aaa4:	b160      	cbz	r0, 800aac0 <_Balloc+0x64>
 800aaa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aaaa:	e00e      	b.n	800aaca <_Balloc+0x6e>
 800aaac:	2221      	movs	r2, #33	; 0x21
 800aaae:	2104      	movs	r1, #4
 800aab0:	4620      	mov	r0, r4
 800aab2:	f000 fc8e 	bl	800b3d2 <_calloc_r>
 800aab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aab8:	60f0      	str	r0, [r6, #12]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1e4      	bne.n	800aa8a <_Balloc+0x2e>
 800aac0:	2000      	movs	r0, #0
 800aac2:	bd70      	pop	{r4, r5, r6, pc}
 800aac4:	6802      	ldr	r2, [r0, #0]
 800aac6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aaca:	2300      	movs	r3, #0
 800aacc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aad0:	e7f7      	b.n	800aac2 <_Balloc+0x66>
 800aad2:	bf00      	nop
 800aad4:	0800cca8 	.word	0x0800cca8
 800aad8:	0800ccbf 	.word	0x0800ccbf

0800aadc <_Bfree>:
 800aadc:	b570      	push	{r4, r5, r6, lr}
 800aade:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aae0:	4605      	mov	r5, r0
 800aae2:	460c      	mov	r4, r1
 800aae4:	b976      	cbnz	r6, 800ab04 <_Bfree+0x28>
 800aae6:	2010      	movs	r0, #16
 800aae8:	f001 fbec 	bl	800c2c4 <malloc>
 800aaec:	4602      	mov	r2, r0
 800aaee:	6268      	str	r0, [r5, #36]	; 0x24
 800aaf0:	b920      	cbnz	r0, 800aafc <_Bfree+0x20>
 800aaf2:	4b09      	ldr	r3, [pc, #36]	; (800ab18 <_Bfree+0x3c>)
 800aaf4:	4809      	ldr	r0, [pc, #36]	; (800ab1c <_Bfree+0x40>)
 800aaf6:	218a      	movs	r1, #138	; 0x8a
 800aaf8:	f001 fa6c 	bl	800bfd4 <__assert_func>
 800aafc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab00:	6006      	str	r6, [r0, #0]
 800ab02:	60c6      	str	r6, [r0, #12]
 800ab04:	b13c      	cbz	r4, 800ab16 <_Bfree+0x3a>
 800ab06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab08:	6862      	ldr	r2, [r4, #4]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab10:	6021      	str	r1, [r4, #0]
 800ab12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab16:	bd70      	pop	{r4, r5, r6, pc}
 800ab18:	0800cca8 	.word	0x0800cca8
 800ab1c:	0800ccbf 	.word	0x0800ccbf

0800ab20 <__multadd>:
 800ab20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab24:	690e      	ldr	r6, [r1, #16]
 800ab26:	4607      	mov	r7, r0
 800ab28:	4698      	mov	r8, r3
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	f101 0014 	add.w	r0, r1, #20
 800ab30:	2300      	movs	r3, #0
 800ab32:	6805      	ldr	r5, [r0, #0]
 800ab34:	b2a9      	uxth	r1, r5
 800ab36:	fb02 8101 	mla	r1, r2, r1, r8
 800ab3a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ab3e:	0c2d      	lsrs	r5, r5, #16
 800ab40:	fb02 c505 	mla	r5, r2, r5, ip
 800ab44:	b289      	uxth	r1, r1
 800ab46:	3301      	adds	r3, #1
 800ab48:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ab4c:	429e      	cmp	r6, r3
 800ab4e:	f840 1b04 	str.w	r1, [r0], #4
 800ab52:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ab56:	dcec      	bgt.n	800ab32 <__multadd+0x12>
 800ab58:	f1b8 0f00 	cmp.w	r8, #0
 800ab5c:	d022      	beq.n	800aba4 <__multadd+0x84>
 800ab5e:	68a3      	ldr	r3, [r4, #8]
 800ab60:	42b3      	cmp	r3, r6
 800ab62:	dc19      	bgt.n	800ab98 <__multadd+0x78>
 800ab64:	6861      	ldr	r1, [r4, #4]
 800ab66:	4638      	mov	r0, r7
 800ab68:	3101      	adds	r1, #1
 800ab6a:	f7ff ff77 	bl	800aa5c <_Balloc>
 800ab6e:	4605      	mov	r5, r0
 800ab70:	b928      	cbnz	r0, 800ab7e <__multadd+0x5e>
 800ab72:	4602      	mov	r2, r0
 800ab74:	4b0d      	ldr	r3, [pc, #52]	; (800abac <__multadd+0x8c>)
 800ab76:	480e      	ldr	r0, [pc, #56]	; (800abb0 <__multadd+0x90>)
 800ab78:	21b5      	movs	r1, #181	; 0xb5
 800ab7a:	f001 fa2b 	bl	800bfd4 <__assert_func>
 800ab7e:	6922      	ldr	r2, [r4, #16]
 800ab80:	3202      	adds	r2, #2
 800ab82:	f104 010c 	add.w	r1, r4, #12
 800ab86:	0092      	lsls	r2, r2, #2
 800ab88:	300c      	adds	r0, #12
 800ab8a:	f7ff ff58 	bl	800aa3e <memcpy>
 800ab8e:	4621      	mov	r1, r4
 800ab90:	4638      	mov	r0, r7
 800ab92:	f7ff ffa3 	bl	800aadc <_Bfree>
 800ab96:	462c      	mov	r4, r5
 800ab98:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ab9c:	3601      	adds	r6, #1
 800ab9e:	f8c3 8014 	str.w	r8, [r3, #20]
 800aba2:	6126      	str	r6, [r4, #16]
 800aba4:	4620      	mov	r0, r4
 800aba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abaa:	bf00      	nop
 800abac:	0800cc18 	.word	0x0800cc18
 800abb0:	0800ccbf 	.word	0x0800ccbf

0800abb4 <__s2b>:
 800abb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abb8:	460c      	mov	r4, r1
 800abba:	4615      	mov	r5, r2
 800abbc:	461f      	mov	r7, r3
 800abbe:	2209      	movs	r2, #9
 800abc0:	3308      	adds	r3, #8
 800abc2:	4606      	mov	r6, r0
 800abc4:	fb93 f3f2 	sdiv	r3, r3, r2
 800abc8:	2100      	movs	r1, #0
 800abca:	2201      	movs	r2, #1
 800abcc:	429a      	cmp	r2, r3
 800abce:	db09      	blt.n	800abe4 <__s2b+0x30>
 800abd0:	4630      	mov	r0, r6
 800abd2:	f7ff ff43 	bl	800aa5c <_Balloc>
 800abd6:	b940      	cbnz	r0, 800abea <__s2b+0x36>
 800abd8:	4602      	mov	r2, r0
 800abda:	4b19      	ldr	r3, [pc, #100]	; (800ac40 <__s2b+0x8c>)
 800abdc:	4819      	ldr	r0, [pc, #100]	; (800ac44 <__s2b+0x90>)
 800abde:	21ce      	movs	r1, #206	; 0xce
 800abe0:	f001 f9f8 	bl	800bfd4 <__assert_func>
 800abe4:	0052      	lsls	r2, r2, #1
 800abe6:	3101      	adds	r1, #1
 800abe8:	e7f0      	b.n	800abcc <__s2b+0x18>
 800abea:	9b08      	ldr	r3, [sp, #32]
 800abec:	6143      	str	r3, [r0, #20]
 800abee:	2d09      	cmp	r5, #9
 800abf0:	f04f 0301 	mov.w	r3, #1
 800abf4:	6103      	str	r3, [r0, #16]
 800abf6:	dd16      	ble.n	800ac26 <__s2b+0x72>
 800abf8:	f104 0909 	add.w	r9, r4, #9
 800abfc:	46c8      	mov	r8, r9
 800abfe:	442c      	add	r4, r5
 800ac00:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac04:	4601      	mov	r1, r0
 800ac06:	3b30      	subs	r3, #48	; 0x30
 800ac08:	220a      	movs	r2, #10
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	f7ff ff88 	bl	800ab20 <__multadd>
 800ac10:	45a0      	cmp	r8, r4
 800ac12:	d1f5      	bne.n	800ac00 <__s2b+0x4c>
 800ac14:	f1a5 0408 	sub.w	r4, r5, #8
 800ac18:	444c      	add	r4, r9
 800ac1a:	1b2d      	subs	r5, r5, r4
 800ac1c:	1963      	adds	r3, r4, r5
 800ac1e:	42bb      	cmp	r3, r7
 800ac20:	db04      	blt.n	800ac2c <__s2b+0x78>
 800ac22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac26:	340a      	adds	r4, #10
 800ac28:	2509      	movs	r5, #9
 800ac2a:	e7f6      	b.n	800ac1a <__s2b+0x66>
 800ac2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac30:	4601      	mov	r1, r0
 800ac32:	3b30      	subs	r3, #48	; 0x30
 800ac34:	220a      	movs	r2, #10
 800ac36:	4630      	mov	r0, r6
 800ac38:	f7ff ff72 	bl	800ab20 <__multadd>
 800ac3c:	e7ee      	b.n	800ac1c <__s2b+0x68>
 800ac3e:	bf00      	nop
 800ac40:	0800cc18 	.word	0x0800cc18
 800ac44:	0800ccbf 	.word	0x0800ccbf

0800ac48 <__hi0bits>:
 800ac48:	0c03      	lsrs	r3, r0, #16
 800ac4a:	041b      	lsls	r3, r3, #16
 800ac4c:	b9d3      	cbnz	r3, 800ac84 <__hi0bits+0x3c>
 800ac4e:	0400      	lsls	r0, r0, #16
 800ac50:	2310      	movs	r3, #16
 800ac52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ac56:	bf04      	itt	eq
 800ac58:	0200      	lsleq	r0, r0, #8
 800ac5a:	3308      	addeq	r3, #8
 800ac5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ac60:	bf04      	itt	eq
 800ac62:	0100      	lsleq	r0, r0, #4
 800ac64:	3304      	addeq	r3, #4
 800ac66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ac6a:	bf04      	itt	eq
 800ac6c:	0080      	lsleq	r0, r0, #2
 800ac6e:	3302      	addeq	r3, #2
 800ac70:	2800      	cmp	r0, #0
 800ac72:	db05      	blt.n	800ac80 <__hi0bits+0x38>
 800ac74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac78:	f103 0301 	add.w	r3, r3, #1
 800ac7c:	bf08      	it	eq
 800ac7e:	2320      	moveq	r3, #32
 800ac80:	4618      	mov	r0, r3
 800ac82:	4770      	bx	lr
 800ac84:	2300      	movs	r3, #0
 800ac86:	e7e4      	b.n	800ac52 <__hi0bits+0xa>

0800ac88 <__lo0bits>:
 800ac88:	6803      	ldr	r3, [r0, #0]
 800ac8a:	f013 0207 	ands.w	r2, r3, #7
 800ac8e:	4601      	mov	r1, r0
 800ac90:	d00b      	beq.n	800acaa <__lo0bits+0x22>
 800ac92:	07da      	lsls	r2, r3, #31
 800ac94:	d424      	bmi.n	800ace0 <__lo0bits+0x58>
 800ac96:	0798      	lsls	r0, r3, #30
 800ac98:	bf49      	itett	mi
 800ac9a:	085b      	lsrmi	r3, r3, #1
 800ac9c:	089b      	lsrpl	r3, r3, #2
 800ac9e:	2001      	movmi	r0, #1
 800aca0:	600b      	strmi	r3, [r1, #0]
 800aca2:	bf5c      	itt	pl
 800aca4:	600b      	strpl	r3, [r1, #0]
 800aca6:	2002      	movpl	r0, #2
 800aca8:	4770      	bx	lr
 800acaa:	b298      	uxth	r0, r3
 800acac:	b9b0      	cbnz	r0, 800acdc <__lo0bits+0x54>
 800acae:	0c1b      	lsrs	r3, r3, #16
 800acb0:	2010      	movs	r0, #16
 800acb2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800acb6:	bf04      	itt	eq
 800acb8:	0a1b      	lsreq	r3, r3, #8
 800acba:	3008      	addeq	r0, #8
 800acbc:	071a      	lsls	r2, r3, #28
 800acbe:	bf04      	itt	eq
 800acc0:	091b      	lsreq	r3, r3, #4
 800acc2:	3004      	addeq	r0, #4
 800acc4:	079a      	lsls	r2, r3, #30
 800acc6:	bf04      	itt	eq
 800acc8:	089b      	lsreq	r3, r3, #2
 800acca:	3002      	addeq	r0, #2
 800accc:	07da      	lsls	r2, r3, #31
 800acce:	d403      	bmi.n	800acd8 <__lo0bits+0x50>
 800acd0:	085b      	lsrs	r3, r3, #1
 800acd2:	f100 0001 	add.w	r0, r0, #1
 800acd6:	d005      	beq.n	800ace4 <__lo0bits+0x5c>
 800acd8:	600b      	str	r3, [r1, #0]
 800acda:	4770      	bx	lr
 800acdc:	4610      	mov	r0, r2
 800acde:	e7e8      	b.n	800acb2 <__lo0bits+0x2a>
 800ace0:	2000      	movs	r0, #0
 800ace2:	4770      	bx	lr
 800ace4:	2020      	movs	r0, #32
 800ace6:	4770      	bx	lr

0800ace8 <__i2b>:
 800ace8:	b510      	push	{r4, lr}
 800acea:	460c      	mov	r4, r1
 800acec:	2101      	movs	r1, #1
 800acee:	f7ff feb5 	bl	800aa5c <_Balloc>
 800acf2:	4602      	mov	r2, r0
 800acf4:	b928      	cbnz	r0, 800ad02 <__i2b+0x1a>
 800acf6:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <__i2b+0x24>)
 800acf8:	4805      	ldr	r0, [pc, #20]	; (800ad10 <__i2b+0x28>)
 800acfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800acfe:	f001 f969 	bl	800bfd4 <__assert_func>
 800ad02:	2301      	movs	r3, #1
 800ad04:	6144      	str	r4, [r0, #20]
 800ad06:	6103      	str	r3, [r0, #16]
 800ad08:	bd10      	pop	{r4, pc}
 800ad0a:	bf00      	nop
 800ad0c:	0800cc18 	.word	0x0800cc18
 800ad10:	0800ccbf 	.word	0x0800ccbf

0800ad14 <__multiply>:
 800ad14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad18:	4614      	mov	r4, r2
 800ad1a:	690a      	ldr	r2, [r1, #16]
 800ad1c:	6923      	ldr	r3, [r4, #16]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	bfb8      	it	lt
 800ad22:	460b      	movlt	r3, r1
 800ad24:	460d      	mov	r5, r1
 800ad26:	bfbc      	itt	lt
 800ad28:	4625      	movlt	r5, r4
 800ad2a:	461c      	movlt	r4, r3
 800ad2c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ad30:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ad34:	68ab      	ldr	r3, [r5, #8]
 800ad36:	6869      	ldr	r1, [r5, #4]
 800ad38:	eb0a 0709 	add.w	r7, sl, r9
 800ad3c:	42bb      	cmp	r3, r7
 800ad3e:	b085      	sub	sp, #20
 800ad40:	bfb8      	it	lt
 800ad42:	3101      	addlt	r1, #1
 800ad44:	f7ff fe8a 	bl	800aa5c <_Balloc>
 800ad48:	b930      	cbnz	r0, 800ad58 <__multiply+0x44>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	4b42      	ldr	r3, [pc, #264]	; (800ae58 <__multiply+0x144>)
 800ad4e:	4843      	ldr	r0, [pc, #268]	; (800ae5c <__multiply+0x148>)
 800ad50:	f240 115d 	movw	r1, #349	; 0x15d
 800ad54:	f001 f93e 	bl	800bfd4 <__assert_func>
 800ad58:	f100 0614 	add.w	r6, r0, #20
 800ad5c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ad60:	4633      	mov	r3, r6
 800ad62:	2200      	movs	r2, #0
 800ad64:	4543      	cmp	r3, r8
 800ad66:	d31e      	bcc.n	800ada6 <__multiply+0x92>
 800ad68:	f105 0c14 	add.w	ip, r5, #20
 800ad6c:	f104 0314 	add.w	r3, r4, #20
 800ad70:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ad74:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ad78:	9202      	str	r2, [sp, #8]
 800ad7a:	ebac 0205 	sub.w	r2, ip, r5
 800ad7e:	3a15      	subs	r2, #21
 800ad80:	f022 0203 	bic.w	r2, r2, #3
 800ad84:	3204      	adds	r2, #4
 800ad86:	f105 0115 	add.w	r1, r5, #21
 800ad8a:	458c      	cmp	ip, r1
 800ad8c:	bf38      	it	cc
 800ad8e:	2204      	movcc	r2, #4
 800ad90:	9201      	str	r2, [sp, #4]
 800ad92:	9a02      	ldr	r2, [sp, #8]
 800ad94:	9303      	str	r3, [sp, #12]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d808      	bhi.n	800adac <__multiply+0x98>
 800ad9a:	2f00      	cmp	r7, #0
 800ad9c:	dc55      	bgt.n	800ae4a <__multiply+0x136>
 800ad9e:	6107      	str	r7, [r0, #16]
 800ada0:	b005      	add	sp, #20
 800ada2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada6:	f843 2b04 	str.w	r2, [r3], #4
 800adaa:	e7db      	b.n	800ad64 <__multiply+0x50>
 800adac:	f8b3 a000 	ldrh.w	sl, [r3]
 800adb0:	f1ba 0f00 	cmp.w	sl, #0
 800adb4:	d020      	beq.n	800adf8 <__multiply+0xe4>
 800adb6:	f105 0e14 	add.w	lr, r5, #20
 800adba:	46b1      	mov	r9, r6
 800adbc:	2200      	movs	r2, #0
 800adbe:	f85e 4b04 	ldr.w	r4, [lr], #4
 800adc2:	f8d9 b000 	ldr.w	fp, [r9]
 800adc6:	b2a1      	uxth	r1, r4
 800adc8:	fa1f fb8b 	uxth.w	fp, fp
 800adcc:	fb0a b101 	mla	r1, sl, r1, fp
 800add0:	4411      	add	r1, r2
 800add2:	f8d9 2000 	ldr.w	r2, [r9]
 800add6:	0c24      	lsrs	r4, r4, #16
 800add8:	0c12      	lsrs	r2, r2, #16
 800adda:	fb0a 2404 	mla	r4, sl, r4, r2
 800adde:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ade2:	b289      	uxth	r1, r1
 800ade4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ade8:	45f4      	cmp	ip, lr
 800adea:	f849 1b04 	str.w	r1, [r9], #4
 800adee:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800adf2:	d8e4      	bhi.n	800adbe <__multiply+0xaa>
 800adf4:	9901      	ldr	r1, [sp, #4]
 800adf6:	5072      	str	r2, [r6, r1]
 800adf8:	9a03      	ldr	r2, [sp, #12]
 800adfa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800adfe:	3304      	adds	r3, #4
 800ae00:	f1b9 0f00 	cmp.w	r9, #0
 800ae04:	d01f      	beq.n	800ae46 <__multiply+0x132>
 800ae06:	6834      	ldr	r4, [r6, #0]
 800ae08:	f105 0114 	add.w	r1, r5, #20
 800ae0c:	46b6      	mov	lr, r6
 800ae0e:	f04f 0a00 	mov.w	sl, #0
 800ae12:	880a      	ldrh	r2, [r1, #0]
 800ae14:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ae18:	fb09 b202 	mla	r2, r9, r2, fp
 800ae1c:	4492      	add	sl, r2
 800ae1e:	b2a4      	uxth	r4, r4
 800ae20:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ae24:	f84e 4b04 	str.w	r4, [lr], #4
 800ae28:	f851 4b04 	ldr.w	r4, [r1], #4
 800ae2c:	f8be 2000 	ldrh.w	r2, [lr]
 800ae30:	0c24      	lsrs	r4, r4, #16
 800ae32:	fb09 2404 	mla	r4, r9, r4, r2
 800ae36:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ae3a:	458c      	cmp	ip, r1
 800ae3c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ae40:	d8e7      	bhi.n	800ae12 <__multiply+0xfe>
 800ae42:	9a01      	ldr	r2, [sp, #4]
 800ae44:	50b4      	str	r4, [r6, r2]
 800ae46:	3604      	adds	r6, #4
 800ae48:	e7a3      	b.n	800ad92 <__multiply+0x7e>
 800ae4a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1a5      	bne.n	800ad9e <__multiply+0x8a>
 800ae52:	3f01      	subs	r7, #1
 800ae54:	e7a1      	b.n	800ad9a <__multiply+0x86>
 800ae56:	bf00      	nop
 800ae58:	0800cc18 	.word	0x0800cc18
 800ae5c:	0800ccbf 	.word	0x0800ccbf

0800ae60 <__pow5mult>:
 800ae60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae64:	4615      	mov	r5, r2
 800ae66:	f012 0203 	ands.w	r2, r2, #3
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	460f      	mov	r7, r1
 800ae6e:	d007      	beq.n	800ae80 <__pow5mult+0x20>
 800ae70:	4c25      	ldr	r4, [pc, #148]	; (800af08 <__pow5mult+0xa8>)
 800ae72:	3a01      	subs	r2, #1
 800ae74:	2300      	movs	r3, #0
 800ae76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae7a:	f7ff fe51 	bl	800ab20 <__multadd>
 800ae7e:	4607      	mov	r7, r0
 800ae80:	10ad      	asrs	r5, r5, #2
 800ae82:	d03d      	beq.n	800af00 <__pow5mult+0xa0>
 800ae84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae86:	b97c      	cbnz	r4, 800aea8 <__pow5mult+0x48>
 800ae88:	2010      	movs	r0, #16
 800ae8a:	f001 fa1b 	bl	800c2c4 <malloc>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	6270      	str	r0, [r6, #36]	; 0x24
 800ae92:	b928      	cbnz	r0, 800aea0 <__pow5mult+0x40>
 800ae94:	4b1d      	ldr	r3, [pc, #116]	; (800af0c <__pow5mult+0xac>)
 800ae96:	481e      	ldr	r0, [pc, #120]	; (800af10 <__pow5mult+0xb0>)
 800ae98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ae9c:	f001 f89a 	bl	800bfd4 <__assert_func>
 800aea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aea4:	6004      	str	r4, [r0, #0]
 800aea6:	60c4      	str	r4, [r0, #12]
 800aea8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aeac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aeb0:	b94c      	cbnz	r4, 800aec6 <__pow5mult+0x66>
 800aeb2:	f240 2171 	movw	r1, #625	; 0x271
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	f7ff ff16 	bl	800ace8 <__i2b>
 800aebc:	2300      	movs	r3, #0
 800aebe:	f8c8 0008 	str.w	r0, [r8, #8]
 800aec2:	4604      	mov	r4, r0
 800aec4:	6003      	str	r3, [r0, #0]
 800aec6:	f04f 0900 	mov.w	r9, #0
 800aeca:	07eb      	lsls	r3, r5, #31
 800aecc:	d50a      	bpl.n	800aee4 <__pow5mult+0x84>
 800aece:	4639      	mov	r1, r7
 800aed0:	4622      	mov	r2, r4
 800aed2:	4630      	mov	r0, r6
 800aed4:	f7ff ff1e 	bl	800ad14 <__multiply>
 800aed8:	4639      	mov	r1, r7
 800aeda:	4680      	mov	r8, r0
 800aedc:	4630      	mov	r0, r6
 800aede:	f7ff fdfd 	bl	800aadc <_Bfree>
 800aee2:	4647      	mov	r7, r8
 800aee4:	106d      	asrs	r5, r5, #1
 800aee6:	d00b      	beq.n	800af00 <__pow5mult+0xa0>
 800aee8:	6820      	ldr	r0, [r4, #0]
 800aeea:	b938      	cbnz	r0, 800aefc <__pow5mult+0x9c>
 800aeec:	4622      	mov	r2, r4
 800aeee:	4621      	mov	r1, r4
 800aef0:	4630      	mov	r0, r6
 800aef2:	f7ff ff0f 	bl	800ad14 <__multiply>
 800aef6:	6020      	str	r0, [r4, #0]
 800aef8:	f8c0 9000 	str.w	r9, [r0]
 800aefc:	4604      	mov	r4, r0
 800aefe:	e7e4      	b.n	800aeca <__pow5mult+0x6a>
 800af00:	4638      	mov	r0, r7
 800af02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af06:	bf00      	nop
 800af08:	0800ce10 	.word	0x0800ce10
 800af0c:	0800cca8 	.word	0x0800cca8
 800af10:	0800ccbf 	.word	0x0800ccbf

0800af14 <__lshift>:
 800af14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af18:	460c      	mov	r4, r1
 800af1a:	6849      	ldr	r1, [r1, #4]
 800af1c:	6923      	ldr	r3, [r4, #16]
 800af1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af22:	68a3      	ldr	r3, [r4, #8]
 800af24:	4607      	mov	r7, r0
 800af26:	4691      	mov	r9, r2
 800af28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af2c:	f108 0601 	add.w	r6, r8, #1
 800af30:	42b3      	cmp	r3, r6
 800af32:	db0b      	blt.n	800af4c <__lshift+0x38>
 800af34:	4638      	mov	r0, r7
 800af36:	f7ff fd91 	bl	800aa5c <_Balloc>
 800af3a:	4605      	mov	r5, r0
 800af3c:	b948      	cbnz	r0, 800af52 <__lshift+0x3e>
 800af3e:	4602      	mov	r2, r0
 800af40:	4b28      	ldr	r3, [pc, #160]	; (800afe4 <__lshift+0xd0>)
 800af42:	4829      	ldr	r0, [pc, #164]	; (800afe8 <__lshift+0xd4>)
 800af44:	f240 11d9 	movw	r1, #473	; 0x1d9
 800af48:	f001 f844 	bl	800bfd4 <__assert_func>
 800af4c:	3101      	adds	r1, #1
 800af4e:	005b      	lsls	r3, r3, #1
 800af50:	e7ee      	b.n	800af30 <__lshift+0x1c>
 800af52:	2300      	movs	r3, #0
 800af54:	f100 0114 	add.w	r1, r0, #20
 800af58:	f100 0210 	add.w	r2, r0, #16
 800af5c:	4618      	mov	r0, r3
 800af5e:	4553      	cmp	r3, sl
 800af60:	db33      	blt.n	800afca <__lshift+0xb6>
 800af62:	6920      	ldr	r0, [r4, #16]
 800af64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af68:	f104 0314 	add.w	r3, r4, #20
 800af6c:	f019 091f 	ands.w	r9, r9, #31
 800af70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af78:	d02b      	beq.n	800afd2 <__lshift+0xbe>
 800af7a:	f1c9 0e20 	rsb	lr, r9, #32
 800af7e:	468a      	mov	sl, r1
 800af80:	2200      	movs	r2, #0
 800af82:	6818      	ldr	r0, [r3, #0]
 800af84:	fa00 f009 	lsl.w	r0, r0, r9
 800af88:	4302      	orrs	r2, r0
 800af8a:	f84a 2b04 	str.w	r2, [sl], #4
 800af8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af92:	459c      	cmp	ip, r3
 800af94:	fa22 f20e 	lsr.w	r2, r2, lr
 800af98:	d8f3      	bhi.n	800af82 <__lshift+0x6e>
 800af9a:	ebac 0304 	sub.w	r3, ip, r4
 800af9e:	3b15      	subs	r3, #21
 800afa0:	f023 0303 	bic.w	r3, r3, #3
 800afa4:	3304      	adds	r3, #4
 800afa6:	f104 0015 	add.w	r0, r4, #21
 800afaa:	4584      	cmp	ip, r0
 800afac:	bf38      	it	cc
 800afae:	2304      	movcc	r3, #4
 800afb0:	50ca      	str	r2, [r1, r3]
 800afb2:	b10a      	cbz	r2, 800afb8 <__lshift+0xa4>
 800afb4:	f108 0602 	add.w	r6, r8, #2
 800afb8:	3e01      	subs	r6, #1
 800afba:	4638      	mov	r0, r7
 800afbc:	612e      	str	r6, [r5, #16]
 800afbe:	4621      	mov	r1, r4
 800afc0:	f7ff fd8c 	bl	800aadc <_Bfree>
 800afc4:	4628      	mov	r0, r5
 800afc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afca:	f842 0f04 	str.w	r0, [r2, #4]!
 800afce:	3301      	adds	r3, #1
 800afd0:	e7c5      	b.n	800af5e <__lshift+0x4a>
 800afd2:	3904      	subs	r1, #4
 800afd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800afd8:	f841 2f04 	str.w	r2, [r1, #4]!
 800afdc:	459c      	cmp	ip, r3
 800afde:	d8f9      	bhi.n	800afd4 <__lshift+0xc0>
 800afe0:	e7ea      	b.n	800afb8 <__lshift+0xa4>
 800afe2:	bf00      	nop
 800afe4:	0800cc18 	.word	0x0800cc18
 800afe8:	0800ccbf 	.word	0x0800ccbf

0800afec <__mcmp>:
 800afec:	b530      	push	{r4, r5, lr}
 800afee:	6902      	ldr	r2, [r0, #16]
 800aff0:	690c      	ldr	r4, [r1, #16]
 800aff2:	1b12      	subs	r2, r2, r4
 800aff4:	d10e      	bne.n	800b014 <__mcmp+0x28>
 800aff6:	f100 0314 	add.w	r3, r0, #20
 800affa:	3114      	adds	r1, #20
 800affc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b000:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b004:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b008:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b00c:	42a5      	cmp	r5, r4
 800b00e:	d003      	beq.n	800b018 <__mcmp+0x2c>
 800b010:	d305      	bcc.n	800b01e <__mcmp+0x32>
 800b012:	2201      	movs	r2, #1
 800b014:	4610      	mov	r0, r2
 800b016:	bd30      	pop	{r4, r5, pc}
 800b018:	4283      	cmp	r3, r0
 800b01a:	d3f3      	bcc.n	800b004 <__mcmp+0x18>
 800b01c:	e7fa      	b.n	800b014 <__mcmp+0x28>
 800b01e:	f04f 32ff 	mov.w	r2, #4294967295
 800b022:	e7f7      	b.n	800b014 <__mcmp+0x28>

0800b024 <__mdiff>:
 800b024:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b028:	460c      	mov	r4, r1
 800b02a:	4606      	mov	r6, r0
 800b02c:	4611      	mov	r1, r2
 800b02e:	4620      	mov	r0, r4
 800b030:	4617      	mov	r7, r2
 800b032:	f7ff ffdb 	bl	800afec <__mcmp>
 800b036:	1e05      	subs	r5, r0, #0
 800b038:	d110      	bne.n	800b05c <__mdiff+0x38>
 800b03a:	4629      	mov	r1, r5
 800b03c:	4630      	mov	r0, r6
 800b03e:	f7ff fd0d 	bl	800aa5c <_Balloc>
 800b042:	b930      	cbnz	r0, 800b052 <__mdiff+0x2e>
 800b044:	4b39      	ldr	r3, [pc, #228]	; (800b12c <__mdiff+0x108>)
 800b046:	4602      	mov	r2, r0
 800b048:	f240 2132 	movw	r1, #562	; 0x232
 800b04c:	4838      	ldr	r0, [pc, #224]	; (800b130 <__mdiff+0x10c>)
 800b04e:	f000 ffc1 	bl	800bfd4 <__assert_func>
 800b052:	2301      	movs	r3, #1
 800b054:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b058:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b05c:	bfa4      	itt	ge
 800b05e:	463b      	movge	r3, r7
 800b060:	4627      	movge	r7, r4
 800b062:	4630      	mov	r0, r6
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	bfa6      	itte	ge
 800b068:	461c      	movge	r4, r3
 800b06a:	2500      	movge	r5, #0
 800b06c:	2501      	movlt	r5, #1
 800b06e:	f7ff fcf5 	bl	800aa5c <_Balloc>
 800b072:	b920      	cbnz	r0, 800b07e <__mdiff+0x5a>
 800b074:	4b2d      	ldr	r3, [pc, #180]	; (800b12c <__mdiff+0x108>)
 800b076:	4602      	mov	r2, r0
 800b078:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b07c:	e7e6      	b.n	800b04c <__mdiff+0x28>
 800b07e:	693e      	ldr	r6, [r7, #16]
 800b080:	60c5      	str	r5, [r0, #12]
 800b082:	6925      	ldr	r5, [r4, #16]
 800b084:	f107 0114 	add.w	r1, r7, #20
 800b088:	f104 0914 	add.w	r9, r4, #20
 800b08c:	f100 0e14 	add.w	lr, r0, #20
 800b090:	f107 0210 	add.w	r2, r7, #16
 800b094:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b098:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b09c:	46f2      	mov	sl, lr
 800b09e:	2700      	movs	r7, #0
 800b0a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b0a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b0a8:	fa1f f883 	uxth.w	r8, r3
 800b0ac:	fa17 f78b 	uxtah	r7, r7, fp
 800b0b0:	0c1b      	lsrs	r3, r3, #16
 800b0b2:	eba7 0808 	sub.w	r8, r7, r8
 800b0b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b0ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b0be:	fa1f f888 	uxth.w	r8, r8
 800b0c2:	141f      	asrs	r7, r3, #16
 800b0c4:	454d      	cmp	r5, r9
 800b0c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b0ca:	f84a 3b04 	str.w	r3, [sl], #4
 800b0ce:	d8e7      	bhi.n	800b0a0 <__mdiff+0x7c>
 800b0d0:	1b2b      	subs	r3, r5, r4
 800b0d2:	3b15      	subs	r3, #21
 800b0d4:	f023 0303 	bic.w	r3, r3, #3
 800b0d8:	3304      	adds	r3, #4
 800b0da:	3415      	adds	r4, #21
 800b0dc:	42a5      	cmp	r5, r4
 800b0de:	bf38      	it	cc
 800b0e0:	2304      	movcc	r3, #4
 800b0e2:	4419      	add	r1, r3
 800b0e4:	4473      	add	r3, lr
 800b0e6:	469e      	mov	lr, r3
 800b0e8:	460d      	mov	r5, r1
 800b0ea:	4565      	cmp	r5, ip
 800b0ec:	d30e      	bcc.n	800b10c <__mdiff+0xe8>
 800b0ee:	f10c 0203 	add.w	r2, ip, #3
 800b0f2:	1a52      	subs	r2, r2, r1
 800b0f4:	f022 0203 	bic.w	r2, r2, #3
 800b0f8:	3903      	subs	r1, #3
 800b0fa:	458c      	cmp	ip, r1
 800b0fc:	bf38      	it	cc
 800b0fe:	2200      	movcc	r2, #0
 800b100:	441a      	add	r2, r3
 800b102:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b106:	b17b      	cbz	r3, 800b128 <__mdiff+0x104>
 800b108:	6106      	str	r6, [r0, #16]
 800b10a:	e7a5      	b.n	800b058 <__mdiff+0x34>
 800b10c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b110:	fa17 f488 	uxtah	r4, r7, r8
 800b114:	1422      	asrs	r2, r4, #16
 800b116:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b11a:	b2a4      	uxth	r4, r4
 800b11c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b120:	f84e 4b04 	str.w	r4, [lr], #4
 800b124:	1417      	asrs	r7, r2, #16
 800b126:	e7e0      	b.n	800b0ea <__mdiff+0xc6>
 800b128:	3e01      	subs	r6, #1
 800b12a:	e7ea      	b.n	800b102 <__mdiff+0xde>
 800b12c:	0800cc18 	.word	0x0800cc18
 800b130:	0800ccbf 	.word	0x0800ccbf

0800b134 <__ulp>:
 800b134:	b082      	sub	sp, #8
 800b136:	ed8d 0b00 	vstr	d0, [sp]
 800b13a:	9b01      	ldr	r3, [sp, #4]
 800b13c:	4912      	ldr	r1, [pc, #72]	; (800b188 <__ulp+0x54>)
 800b13e:	4019      	ands	r1, r3
 800b140:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b144:	2900      	cmp	r1, #0
 800b146:	dd05      	ble.n	800b154 <__ulp+0x20>
 800b148:	2200      	movs	r2, #0
 800b14a:	460b      	mov	r3, r1
 800b14c:	ec43 2b10 	vmov	d0, r2, r3
 800b150:	b002      	add	sp, #8
 800b152:	4770      	bx	lr
 800b154:	4249      	negs	r1, r1
 800b156:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b15a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b15e:	f04f 0200 	mov.w	r2, #0
 800b162:	f04f 0300 	mov.w	r3, #0
 800b166:	da04      	bge.n	800b172 <__ulp+0x3e>
 800b168:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b16c:	fa41 f300 	asr.w	r3, r1, r0
 800b170:	e7ec      	b.n	800b14c <__ulp+0x18>
 800b172:	f1a0 0114 	sub.w	r1, r0, #20
 800b176:	291e      	cmp	r1, #30
 800b178:	bfda      	itte	le
 800b17a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b17e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b182:	2101      	movgt	r1, #1
 800b184:	460a      	mov	r2, r1
 800b186:	e7e1      	b.n	800b14c <__ulp+0x18>
 800b188:	7ff00000 	.word	0x7ff00000

0800b18c <__b2d>:
 800b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18e:	6905      	ldr	r5, [r0, #16]
 800b190:	f100 0714 	add.w	r7, r0, #20
 800b194:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b198:	1f2e      	subs	r6, r5, #4
 800b19a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f7ff fd52 	bl	800ac48 <__hi0bits>
 800b1a4:	f1c0 0320 	rsb	r3, r0, #32
 800b1a8:	280a      	cmp	r0, #10
 800b1aa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b228 <__b2d+0x9c>
 800b1ae:	600b      	str	r3, [r1, #0]
 800b1b0:	dc14      	bgt.n	800b1dc <__b2d+0x50>
 800b1b2:	f1c0 0e0b 	rsb	lr, r0, #11
 800b1b6:	fa24 f10e 	lsr.w	r1, r4, lr
 800b1ba:	42b7      	cmp	r7, r6
 800b1bc:	ea41 030c 	orr.w	r3, r1, ip
 800b1c0:	bf34      	ite	cc
 800b1c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b1c6:	2100      	movcs	r1, #0
 800b1c8:	3015      	adds	r0, #21
 800b1ca:	fa04 f000 	lsl.w	r0, r4, r0
 800b1ce:	fa21 f10e 	lsr.w	r1, r1, lr
 800b1d2:	ea40 0201 	orr.w	r2, r0, r1
 800b1d6:	ec43 2b10 	vmov	d0, r2, r3
 800b1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1dc:	42b7      	cmp	r7, r6
 800b1de:	bf3a      	itte	cc
 800b1e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b1e4:	f1a5 0608 	subcc.w	r6, r5, #8
 800b1e8:	2100      	movcs	r1, #0
 800b1ea:	380b      	subs	r0, #11
 800b1ec:	d017      	beq.n	800b21e <__b2d+0x92>
 800b1ee:	f1c0 0c20 	rsb	ip, r0, #32
 800b1f2:	fa04 f500 	lsl.w	r5, r4, r0
 800b1f6:	42be      	cmp	r6, r7
 800b1f8:	fa21 f40c 	lsr.w	r4, r1, ip
 800b1fc:	ea45 0504 	orr.w	r5, r5, r4
 800b200:	bf8c      	ite	hi
 800b202:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b206:	2400      	movls	r4, #0
 800b208:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b20c:	fa01 f000 	lsl.w	r0, r1, r0
 800b210:	fa24 f40c 	lsr.w	r4, r4, ip
 800b214:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b218:	ea40 0204 	orr.w	r2, r0, r4
 800b21c:	e7db      	b.n	800b1d6 <__b2d+0x4a>
 800b21e:	ea44 030c 	orr.w	r3, r4, ip
 800b222:	460a      	mov	r2, r1
 800b224:	e7d7      	b.n	800b1d6 <__b2d+0x4a>
 800b226:	bf00      	nop
 800b228:	3ff00000 	.word	0x3ff00000

0800b22c <__d2b>:
 800b22c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b230:	4689      	mov	r9, r1
 800b232:	2101      	movs	r1, #1
 800b234:	ec57 6b10 	vmov	r6, r7, d0
 800b238:	4690      	mov	r8, r2
 800b23a:	f7ff fc0f 	bl	800aa5c <_Balloc>
 800b23e:	4604      	mov	r4, r0
 800b240:	b930      	cbnz	r0, 800b250 <__d2b+0x24>
 800b242:	4602      	mov	r2, r0
 800b244:	4b25      	ldr	r3, [pc, #148]	; (800b2dc <__d2b+0xb0>)
 800b246:	4826      	ldr	r0, [pc, #152]	; (800b2e0 <__d2b+0xb4>)
 800b248:	f240 310a 	movw	r1, #778	; 0x30a
 800b24c:	f000 fec2 	bl	800bfd4 <__assert_func>
 800b250:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b254:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b258:	bb35      	cbnz	r5, 800b2a8 <__d2b+0x7c>
 800b25a:	2e00      	cmp	r6, #0
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	d028      	beq.n	800b2b2 <__d2b+0x86>
 800b260:	4668      	mov	r0, sp
 800b262:	9600      	str	r6, [sp, #0]
 800b264:	f7ff fd10 	bl	800ac88 <__lo0bits>
 800b268:	9900      	ldr	r1, [sp, #0]
 800b26a:	b300      	cbz	r0, 800b2ae <__d2b+0x82>
 800b26c:	9a01      	ldr	r2, [sp, #4]
 800b26e:	f1c0 0320 	rsb	r3, r0, #32
 800b272:	fa02 f303 	lsl.w	r3, r2, r3
 800b276:	430b      	orrs	r3, r1
 800b278:	40c2      	lsrs	r2, r0
 800b27a:	6163      	str	r3, [r4, #20]
 800b27c:	9201      	str	r2, [sp, #4]
 800b27e:	9b01      	ldr	r3, [sp, #4]
 800b280:	61a3      	str	r3, [r4, #24]
 800b282:	2b00      	cmp	r3, #0
 800b284:	bf14      	ite	ne
 800b286:	2202      	movne	r2, #2
 800b288:	2201      	moveq	r2, #1
 800b28a:	6122      	str	r2, [r4, #16]
 800b28c:	b1d5      	cbz	r5, 800b2c4 <__d2b+0x98>
 800b28e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b292:	4405      	add	r5, r0
 800b294:	f8c9 5000 	str.w	r5, [r9]
 800b298:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b29c:	f8c8 0000 	str.w	r0, [r8]
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	b003      	add	sp, #12
 800b2a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2ac:	e7d5      	b.n	800b25a <__d2b+0x2e>
 800b2ae:	6161      	str	r1, [r4, #20]
 800b2b0:	e7e5      	b.n	800b27e <__d2b+0x52>
 800b2b2:	a801      	add	r0, sp, #4
 800b2b4:	f7ff fce8 	bl	800ac88 <__lo0bits>
 800b2b8:	9b01      	ldr	r3, [sp, #4]
 800b2ba:	6163      	str	r3, [r4, #20]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	6122      	str	r2, [r4, #16]
 800b2c0:	3020      	adds	r0, #32
 800b2c2:	e7e3      	b.n	800b28c <__d2b+0x60>
 800b2c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2cc:	f8c9 0000 	str.w	r0, [r9]
 800b2d0:	6918      	ldr	r0, [r3, #16]
 800b2d2:	f7ff fcb9 	bl	800ac48 <__hi0bits>
 800b2d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2da:	e7df      	b.n	800b29c <__d2b+0x70>
 800b2dc:	0800cc18 	.word	0x0800cc18
 800b2e0:	0800ccbf 	.word	0x0800ccbf

0800b2e4 <__ratio>:
 800b2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e8:	4688      	mov	r8, r1
 800b2ea:	4669      	mov	r1, sp
 800b2ec:	4681      	mov	r9, r0
 800b2ee:	f7ff ff4d 	bl	800b18c <__b2d>
 800b2f2:	a901      	add	r1, sp, #4
 800b2f4:	4640      	mov	r0, r8
 800b2f6:	ec55 4b10 	vmov	r4, r5, d0
 800b2fa:	f7ff ff47 	bl	800b18c <__b2d>
 800b2fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b302:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b306:	eba3 0c02 	sub.w	ip, r3, r2
 800b30a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b30e:	1a9b      	subs	r3, r3, r2
 800b310:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b314:	ec51 0b10 	vmov	r0, r1, d0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	bfd6      	itet	le
 800b31c:	460a      	movle	r2, r1
 800b31e:	462a      	movgt	r2, r5
 800b320:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b324:	468b      	mov	fp, r1
 800b326:	462f      	mov	r7, r5
 800b328:	bfd4      	ite	le
 800b32a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b32e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b332:	4620      	mov	r0, r4
 800b334:	ee10 2a10 	vmov	r2, s0
 800b338:	465b      	mov	r3, fp
 800b33a:	4639      	mov	r1, r7
 800b33c:	f7f5 faa6 	bl	800088c <__aeabi_ddiv>
 800b340:	ec41 0b10 	vmov	d0, r0, r1
 800b344:	b003      	add	sp, #12
 800b346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b34a <__copybits>:
 800b34a:	3901      	subs	r1, #1
 800b34c:	b570      	push	{r4, r5, r6, lr}
 800b34e:	1149      	asrs	r1, r1, #5
 800b350:	6914      	ldr	r4, [r2, #16]
 800b352:	3101      	adds	r1, #1
 800b354:	f102 0314 	add.w	r3, r2, #20
 800b358:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b35c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b360:	1f05      	subs	r5, r0, #4
 800b362:	42a3      	cmp	r3, r4
 800b364:	d30c      	bcc.n	800b380 <__copybits+0x36>
 800b366:	1aa3      	subs	r3, r4, r2
 800b368:	3b11      	subs	r3, #17
 800b36a:	f023 0303 	bic.w	r3, r3, #3
 800b36e:	3211      	adds	r2, #17
 800b370:	42a2      	cmp	r2, r4
 800b372:	bf88      	it	hi
 800b374:	2300      	movhi	r3, #0
 800b376:	4418      	add	r0, r3
 800b378:	2300      	movs	r3, #0
 800b37a:	4288      	cmp	r0, r1
 800b37c:	d305      	bcc.n	800b38a <__copybits+0x40>
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
 800b380:	f853 6b04 	ldr.w	r6, [r3], #4
 800b384:	f845 6f04 	str.w	r6, [r5, #4]!
 800b388:	e7eb      	b.n	800b362 <__copybits+0x18>
 800b38a:	f840 3b04 	str.w	r3, [r0], #4
 800b38e:	e7f4      	b.n	800b37a <__copybits+0x30>

0800b390 <__any_on>:
 800b390:	f100 0214 	add.w	r2, r0, #20
 800b394:	6900      	ldr	r0, [r0, #16]
 800b396:	114b      	asrs	r3, r1, #5
 800b398:	4298      	cmp	r0, r3
 800b39a:	b510      	push	{r4, lr}
 800b39c:	db11      	blt.n	800b3c2 <__any_on+0x32>
 800b39e:	dd0a      	ble.n	800b3b6 <__any_on+0x26>
 800b3a0:	f011 011f 	ands.w	r1, r1, #31
 800b3a4:	d007      	beq.n	800b3b6 <__any_on+0x26>
 800b3a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3aa:	fa24 f001 	lsr.w	r0, r4, r1
 800b3ae:	fa00 f101 	lsl.w	r1, r0, r1
 800b3b2:	428c      	cmp	r4, r1
 800b3b4:	d10b      	bne.n	800b3ce <__any_on+0x3e>
 800b3b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d803      	bhi.n	800b3c6 <__any_on+0x36>
 800b3be:	2000      	movs	r0, #0
 800b3c0:	bd10      	pop	{r4, pc}
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	e7f7      	b.n	800b3b6 <__any_on+0x26>
 800b3c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3ca:	2900      	cmp	r1, #0
 800b3cc:	d0f5      	beq.n	800b3ba <__any_on+0x2a>
 800b3ce:	2001      	movs	r0, #1
 800b3d0:	e7f6      	b.n	800b3c0 <__any_on+0x30>

0800b3d2 <_calloc_r>:
 800b3d2:	b513      	push	{r0, r1, r4, lr}
 800b3d4:	434a      	muls	r2, r1
 800b3d6:	4611      	mov	r1, r2
 800b3d8:	9201      	str	r2, [sp, #4]
 800b3da:	f000 f809 	bl	800b3f0 <_malloc_r>
 800b3de:	4604      	mov	r4, r0
 800b3e0:	b118      	cbz	r0, 800b3ea <_calloc_r+0x18>
 800b3e2:	9a01      	ldr	r2, [sp, #4]
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	f7fe f83d 	bl	8009464 <memset>
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	b002      	add	sp, #8
 800b3ee:	bd10      	pop	{r4, pc}

0800b3f0 <_malloc_r>:
 800b3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f2:	1ccd      	adds	r5, r1, #3
 800b3f4:	f025 0503 	bic.w	r5, r5, #3
 800b3f8:	3508      	adds	r5, #8
 800b3fa:	2d0c      	cmp	r5, #12
 800b3fc:	bf38      	it	cc
 800b3fe:	250c      	movcc	r5, #12
 800b400:	2d00      	cmp	r5, #0
 800b402:	4606      	mov	r6, r0
 800b404:	db01      	blt.n	800b40a <_malloc_r+0x1a>
 800b406:	42a9      	cmp	r1, r5
 800b408:	d903      	bls.n	800b412 <_malloc_r+0x22>
 800b40a:	230c      	movs	r3, #12
 800b40c:	6033      	str	r3, [r6, #0]
 800b40e:	2000      	movs	r0, #0
 800b410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b412:	f000 ff79 	bl	800c308 <__malloc_lock>
 800b416:	4921      	ldr	r1, [pc, #132]	; (800b49c <_malloc_r+0xac>)
 800b418:	680a      	ldr	r2, [r1, #0]
 800b41a:	4614      	mov	r4, r2
 800b41c:	b99c      	cbnz	r4, 800b446 <_malloc_r+0x56>
 800b41e:	4f20      	ldr	r7, [pc, #128]	; (800b4a0 <_malloc_r+0xb0>)
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	b923      	cbnz	r3, 800b42e <_malloc_r+0x3e>
 800b424:	4621      	mov	r1, r4
 800b426:	4630      	mov	r0, r6
 800b428:	f000 fc8e 	bl	800bd48 <_sbrk_r>
 800b42c:	6038      	str	r0, [r7, #0]
 800b42e:	4629      	mov	r1, r5
 800b430:	4630      	mov	r0, r6
 800b432:	f000 fc89 	bl	800bd48 <_sbrk_r>
 800b436:	1c43      	adds	r3, r0, #1
 800b438:	d123      	bne.n	800b482 <_malloc_r+0x92>
 800b43a:	230c      	movs	r3, #12
 800b43c:	6033      	str	r3, [r6, #0]
 800b43e:	4630      	mov	r0, r6
 800b440:	f000 ff68 	bl	800c314 <__malloc_unlock>
 800b444:	e7e3      	b.n	800b40e <_malloc_r+0x1e>
 800b446:	6823      	ldr	r3, [r4, #0]
 800b448:	1b5b      	subs	r3, r3, r5
 800b44a:	d417      	bmi.n	800b47c <_malloc_r+0x8c>
 800b44c:	2b0b      	cmp	r3, #11
 800b44e:	d903      	bls.n	800b458 <_malloc_r+0x68>
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	441c      	add	r4, r3
 800b454:	6025      	str	r5, [r4, #0]
 800b456:	e004      	b.n	800b462 <_malloc_r+0x72>
 800b458:	6863      	ldr	r3, [r4, #4]
 800b45a:	42a2      	cmp	r2, r4
 800b45c:	bf0c      	ite	eq
 800b45e:	600b      	streq	r3, [r1, #0]
 800b460:	6053      	strne	r3, [r2, #4]
 800b462:	4630      	mov	r0, r6
 800b464:	f000 ff56 	bl	800c314 <__malloc_unlock>
 800b468:	f104 000b 	add.w	r0, r4, #11
 800b46c:	1d23      	adds	r3, r4, #4
 800b46e:	f020 0007 	bic.w	r0, r0, #7
 800b472:	1ac2      	subs	r2, r0, r3
 800b474:	d0cc      	beq.n	800b410 <_malloc_r+0x20>
 800b476:	1a1b      	subs	r3, r3, r0
 800b478:	50a3      	str	r3, [r4, r2]
 800b47a:	e7c9      	b.n	800b410 <_malloc_r+0x20>
 800b47c:	4622      	mov	r2, r4
 800b47e:	6864      	ldr	r4, [r4, #4]
 800b480:	e7cc      	b.n	800b41c <_malloc_r+0x2c>
 800b482:	1cc4      	adds	r4, r0, #3
 800b484:	f024 0403 	bic.w	r4, r4, #3
 800b488:	42a0      	cmp	r0, r4
 800b48a:	d0e3      	beq.n	800b454 <_malloc_r+0x64>
 800b48c:	1a21      	subs	r1, r4, r0
 800b48e:	4630      	mov	r0, r6
 800b490:	f000 fc5a 	bl	800bd48 <_sbrk_r>
 800b494:	3001      	adds	r0, #1
 800b496:	d1dd      	bne.n	800b454 <_malloc_r+0x64>
 800b498:	e7cf      	b.n	800b43a <_malloc_r+0x4a>
 800b49a:	bf00      	nop
 800b49c:	20000704 	.word	0x20000704
 800b4a0:	20000708 	.word	0x20000708

0800b4a4 <__ssputs_r>:
 800b4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a8:	688e      	ldr	r6, [r1, #8]
 800b4aa:	429e      	cmp	r6, r3
 800b4ac:	4682      	mov	sl, r0
 800b4ae:	460c      	mov	r4, r1
 800b4b0:	4690      	mov	r8, r2
 800b4b2:	461f      	mov	r7, r3
 800b4b4:	d838      	bhi.n	800b528 <__ssputs_r+0x84>
 800b4b6:	898a      	ldrh	r2, [r1, #12]
 800b4b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4bc:	d032      	beq.n	800b524 <__ssputs_r+0x80>
 800b4be:	6825      	ldr	r5, [r4, #0]
 800b4c0:	6909      	ldr	r1, [r1, #16]
 800b4c2:	eba5 0901 	sub.w	r9, r5, r1
 800b4c6:	6965      	ldr	r5, [r4, #20]
 800b4c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	444b      	add	r3, r9
 800b4d4:	106d      	asrs	r5, r5, #1
 800b4d6:	429d      	cmp	r5, r3
 800b4d8:	bf38      	it	cc
 800b4da:	461d      	movcc	r5, r3
 800b4dc:	0553      	lsls	r3, r2, #21
 800b4de:	d531      	bpl.n	800b544 <__ssputs_r+0xa0>
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	f7ff ff85 	bl	800b3f0 <_malloc_r>
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	b950      	cbnz	r0, 800b500 <__ssputs_r+0x5c>
 800b4ea:	230c      	movs	r3, #12
 800b4ec:	f8ca 3000 	str.w	r3, [sl]
 800b4f0:	89a3      	ldrh	r3, [r4, #12]
 800b4f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4f6:	81a3      	strh	r3, [r4, #12]
 800b4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b500:	6921      	ldr	r1, [r4, #16]
 800b502:	464a      	mov	r2, r9
 800b504:	f7ff fa9b 	bl	800aa3e <memcpy>
 800b508:	89a3      	ldrh	r3, [r4, #12]
 800b50a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b50e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b512:	81a3      	strh	r3, [r4, #12]
 800b514:	6126      	str	r6, [r4, #16]
 800b516:	6165      	str	r5, [r4, #20]
 800b518:	444e      	add	r6, r9
 800b51a:	eba5 0509 	sub.w	r5, r5, r9
 800b51e:	6026      	str	r6, [r4, #0]
 800b520:	60a5      	str	r5, [r4, #8]
 800b522:	463e      	mov	r6, r7
 800b524:	42be      	cmp	r6, r7
 800b526:	d900      	bls.n	800b52a <__ssputs_r+0x86>
 800b528:	463e      	mov	r6, r7
 800b52a:	4632      	mov	r2, r6
 800b52c:	6820      	ldr	r0, [r4, #0]
 800b52e:	4641      	mov	r1, r8
 800b530:	f000 fed0 	bl	800c2d4 <memmove>
 800b534:	68a3      	ldr	r3, [r4, #8]
 800b536:	6822      	ldr	r2, [r4, #0]
 800b538:	1b9b      	subs	r3, r3, r6
 800b53a:	4432      	add	r2, r6
 800b53c:	60a3      	str	r3, [r4, #8]
 800b53e:	6022      	str	r2, [r4, #0]
 800b540:	2000      	movs	r0, #0
 800b542:	e7db      	b.n	800b4fc <__ssputs_r+0x58>
 800b544:	462a      	mov	r2, r5
 800b546:	f000 ff3b 	bl	800c3c0 <_realloc_r>
 800b54a:	4606      	mov	r6, r0
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d1e1      	bne.n	800b514 <__ssputs_r+0x70>
 800b550:	6921      	ldr	r1, [r4, #16]
 800b552:	4650      	mov	r0, sl
 800b554:	f000 fee4 	bl	800c320 <_free_r>
 800b558:	e7c7      	b.n	800b4ea <__ssputs_r+0x46>
	...

0800b55c <_svfiprintf_r>:
 800b55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b560:	4698      	mov	r8, r3
 800b562:	898b      	ldrh	r3, [r1, #12]
 800b564:	061b      	lsls	r3, r3, #24
 800b566:	b09d      	sub	sp, #116	; 0x74
 800b568:	4607      	mov	r7, r0
 800b56a:	460d      	mov	r5, r1
 800b56c:	4614      	mov	r4, r2
 800b56e:	d50e      	bpl.n	800b58e <_svfiprintf_r+0x32>
 800b570:	690b      	ldr	r3, [r1, #16]
 800b572:	b963      	cbnz	r3, 800b58e <_svfiprintf_r+0x32>
 800b574:	2140      	movs	r1, #64	; 0x40
 800b576:	f7ff ff3b 	bl	800b3f0 <_malloc_r>
 800b57a:	6028      	str	r0, [r5, #0]
 800b57c:	6128      	str	r0, [r5, #16]
 800b57e:	b920      	cbnz	r0, 800b58a <_svfiprintf_r+0x2e>
 800b580:	230c      	movs	r3, #12
 800b582:	603b      	str	r3, [r7, #0]
 800b584:	f04f 30ff 	mov.w	r0, #4294967295
 800b588:	e0d1      	b.n	800b72e <_svfiprintf_r+0x1d2>
 800b58a:	2340      	movs	r3, #64	; 0x40
 800b58c:	616b      	str	r3, [r5, #20]
 800b58e:	2300      	movs	r3, #0
 800b590:	9309      	str	r3, [sp, #36]	; 0x24
 800b592:	2320      	movs	r3, #32
 800b594:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b598:	f8cd 800c 	str.w	r8, [sp, #12]
 800b59c:	2330      	movs	r3, #48	; 0x30
 800b59e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b748 <_svfiprintf_r+0x1ec>
 800b5a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5a6:	f04f 0901 	mov.w	r9, #1
 800b5aa:	4623      	mov	r3, r4
 800b5ac:	469a      	mov	sl, r3
 800b5ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5b2:	b10a      	cbz	r2, 800b5b8 <_svfiprintf_r+0x5c>
 800b5b4:	2a25      	cmp	r2, #37	; 0x25
 800b5b6:	d1f9      	bne.n	800b5ac <_svfiprintf_r+0x50>
 800b5b8:	ebba 0b04 	subs.w	fp, sl, r4
 800b5bc:	d00b      	beq.n	800b5d6 <_svfiprintf_r+0x7a>
 800b5be:	465b      	mov	r3, fp
 800b5c0:	4622      	mov	r2, r4
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	f7ff ff6d 	bl	800b4a4 <__ssputs_r>
 800b5ca:	3001      	adds	r0, #1
 800b5cc:	f000 80aa 	beq.w	800b724 <_svfiprintf_r+0x1c8>
 800b5d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5d2:	445a      	add	r2, fp
 800b5d4:	9209      	str	r2, [sp, #36]	; 0x24
 800b5d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f000 80a2 	beq.w	800b724 <_svfiprintf_r+0x1c8>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5ea:	f10a 0a01 	add.w	sl, sl, #1
 800b5ee:	9304      	str	r3, [sp, #16]
 800b5f0:	9307      	str	r3, [sp, #28]
 800b5f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5f6:	931a      	str	r3, [sp, #104]	; 0x68
 800b5f8:	4654      	mov	r4, sl
 800b5fa:	2205      	movs	r2, #5
 800b5fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b600:	4851      	ldr	r0, [pc, #324]	; (800b748 <_svfiprintf_r+0x1ec>)
 800b602:	f7f4 fe0d 	bl	8000220 <memchr>
 800b606:	9a04      	ldr	r2, [sp, #16]
 800b608:	b9d8      	cbnz	r0, 800b642 <_svfiprintf_r+0xe6>
 800b60a:	06d0      	lsls	r0, r2, #27
 800b60c:	bf44      	itt	mi
 800b60e:	2320      	movmi	r3, #32
 800b610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b614:	0711      	lsls	r1, r2, #28
 800b616:	bf44      	itt	mi
 800b618:	232b      	movmi	r3, #43	; 0x2b
 800b61a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b61e:	f89a 3000 	ldrb.w	r3, [sl]
 800b622:	2b2a      	cmp	r3, #42	; 0x2a
 800b624:	d015      	beq.n	800b652 <_svfiprintf_r+0xf6>
 800b626:	9a07      	ldr	r2, [sp, #28]
 800b628:	4654      	mov	r4, sl
 800b62a:	2000      	movs	r0, #0
 800b62c:	f04f 0c0a 	mov.w	ip, #10
 800b630:	4621      	mov	r1, r4
 800b632:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b636:	3b30      	subs	r3, #48	; 0x30
 800b638:	2b09      	cmp	r3, #9
 800b63a:	d94e      	bls.n	800b6da <_svfiprintf_r+0x17e>
 800b63c:	b1b0      	cbz	r0, 800b66c <_svfiprintf_r+0x110>
 800b63e:	9207      	str	r2, [sp, #28]
 800b640:	e014      	b.n	800b66c <_svfiprintf_r+0x110>
 800b642:	eba0 0308 	sub.w	r3, r0, r8
 800b646:	fa09 f303 	lsl.w	r3, r9, r3
 800b64a:	4313      	orrs	r3, r2
 800b64c:	9304      	str	r3, [sp, #16]
 800b64e:	46a2      	mov	sl, r4
 800b650:	e7d2      	b.n	800b5f8 <_svfiprintf_r+0x9c>
 800b652:	9b03      	ldr	r3, [sp, #12]
 800b654:	1d19      	adds	r1, r3, #4
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	9103      	str	r1, [sp, #12]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	bfbb      	ittet	lt
 800b65e:	425b      	neglt	r3, r3
 800b660:	f042 0202 	orrlt.w	r2, r2, #2
 800b664:	9307      	strge	r3, [sp, #28]
 800b666:	9307      	strlt	r3, [sp, #28]
 800b668:	bfb8      	it	lt
 800b66a:	9204      	strlt	r2, [sp, #16]
 800b66c:	7823      	ldrb	r3, [r4, #0]
 800b66e:	2b2e      	cmp	r3, #46	; 0x2e
 800b670:	d10c      	bne.n	800b68c <_svfiprintf_r+0x130>
 800b672:	7863      	ldrb	r3, [r4, #1]
 800b674:	2b2a      	cmp	r3, #42	; 0x2a
 800b676:	d135      	bne.n	800b6e4 <_svfiprintf_r+0x188>
 800b678:	9b03      	ldr	r3, [sp, #12]
 800b67a:	1d1a      	adds	r2, r3, #4
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	9203      	str	r2, [sp, #12]
 800b680:	2b00      	cmp	r3, #0
 800b682:	bfb8      	it	lt
 800b684:	f04f 33ff 	movlt.w	r3, #4294967295
 800b688:	3402      	adds	r4, #2
 800b68a:	9305      	str	r3, [sp, #20]
 800b68c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b758 <_svfiprintf_r+0x1fc>
 800b690:	7821      	ldrb	r1, [r4, #0]
 800b692:	2203      	movs	r2, #3
 800b694:	4650      	mov	r0, sl
 800b696:	f7f4 fdc3 	bl	8000220 <memchr>
 800b69a:	b140      	cbz	r0, 800b6ae <_svfiprintf_r+0x152>
 800b69c:	2340      	movs	r3, #64	; 0x40
 800b69e:	eba0 000a 	sub.w	r0, r0, sl
 800b6a2:	fa03 f000 	lsl.w	r0, r3, r0
 800b6a6:	9b04      	ldr	r3, [sp, #16]
 800b6a8:	4303      	orrs	r3, r0
 800b6aa:	3401      	adds	r4, #1
 800b6ac:	9304      	str	r3, [sp, #16]
 800b6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6b2:	4826      	ldr	r0, [pc, #152]	; (800b74c <_svfiprintf_r+0x1f0>)
 800b6b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6b8:	2206      	movs	r2, #6
 800b6ba:	f7f4 fdb1 	bl	8000220 <memchr>
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	d038      	beq.n	800b734 <_svfiprintf_r+0x1d8>
 800b6c2:	4b23      	ldr	r3, [pc, #140]	; (800b750 <_svfiprintf_r+0x1f4>)
 800b6c4:	bb1b      	cbnz	r3, 800b70e <_svfiprintf_r+0x1b2>
 800b6c6:	9b03      	ldr	r3, [sp, #12]
 800b6c8:	3307      	adds	r3, #7
 800b6ca:	f023 0307 	bic.w	r3, r3, #7
 800b6ce:	3308      	adds	r3, #8
 800b6d0:	9303      	str	r3, [sp, #12]
 800b6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d4:	4433      	add	r3, r6
 800b6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b6d8:	e767      	b.n	800b5aa <_svfiprintf_r+0x4e>
 800b6da:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6de:	460c      	mov	r4, r1
 800b6e0:	2001      	movs	r0, #1
 800b6e2:	e7a5      	b.n	800b630 <_svfiprintf_r+0xd4>
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	3401      	adds	r4, #1
 800b6e8:	9305      	str	r3, [sp, #20]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	f04f 0c0a 	mov.w	ip, #10
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6f6:	3a30      	subs	r2, #48	; 0x30
 800b6f8:	2a09      	cmp	r2, #9
 800b6fa:	d903      	bls.n	800b704 <_svfiprintf_r+0x1a8>
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0c5      	beq.n	800b68c <_svfiprintf_r+0x130>
 800b700:	9105      	str	r1, [sp, #20]
 800b702:	e7c3      	b.n	800b68c <_svfiprintf_r+0x130>
 800b704:	fb0c 2101 	mla	r1, ip, r1, r2
 800b708:	4604      	mov	r4, r0
 800b70a:	2301      	movs	r3, #1
 800b70c:	e7f0      	b.n	800b6f0 <_svfiprintf_r+0x194>
 800b70e:	ab03      	add	r3, sp, #12
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	462a      	mov	r2, r5
 800b714:	4b0f      	ldr	r3, [pc, #60]	; (800b754 <_svfiprintf_r+0x1f8>)
 800b716:	a904      	add	r1, sp, #16
 800b718:	4638      	mov	r0, r7
 800b71a:	f3af 8000 	nop.w
 800b71e:	1c42      	adds	r2, r0, #1
 800b720:	4606      	mov	r6, r0
 800b722:	d1d6      	bne.n	800b6d2 <_svfiprintf_r+0x176>
 800b724:	89ab      	ldrh	r3, [r5, #12]
 800b726:	065b      	lsls	r3, r3, #25
 800b728:	f53f af2c 	bmi.w	800b584 <_svfiprintf_r+0x28>
 800b72c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b72e:	b01d      	add	sp, #116	; 0x74
 800b730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b734:	ab03      	add	r3, sp, #12
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	462a      	mov	r2, r5
 800b73a:	4b06      	ldr	r3, [pc, #24]	; (800b754 <_svfiprintf_r+0x1f8>)
 800b73c:	a904      	add	r1, sp, #16
 800b73e:	4638      	mov	r0, r7
 800b740:	f000 f9d4 	bl	800baec <_printf_i>
 800b744:	e7eb      	b.n	800b71e <_svfiprintf_r+0x1c2>
 800b746:	bf00      	nop
 800b748:	0800ce1c 	.word	0x0800ce1c
 800b74c:	0800ce26 	.word	0x0800ce26
 800b750:	00000000 	.word	0x00000000
 800b754:	0800b4a5 	.word	0x0800b4a5
 800b758:	0800ce22 	.word	0x0800ce22

0800b75c <__sfputc_r>:
 800b75c:	6893      	ldr	r3, [r2, #8]
 800b75e:	3b01      	subs	r3, #1
 800b760:	2b00      	cmp	r3, #0
 800b762:	b410      	push	{r4}
 800b764:	6093      	str	r3, [r2, #8]
 800b766:	da08      	bge.n	800b77a <__sfputc_r+0x1e>
 800b768:	6994      	ldr	r4, [r2, #24]
 800b76a:	42a3      	cmp	r3, r4
 800b76c:	db01      	blt.n	800b772 <__sfputc_r+0x16>
 800b76e:	290a      	cmp	r1, #10
 800b770:	d103      	bne.n	800b77a <__sfputc_r+0x1e>
 800b772:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b776:	f000 bb4d 	b.w	800be14 <__swbuf_r>
 800b77a:	6813      	ldr	r3, [r2, #0]
 800b77c:	1c58      	adds	r0, r3, #1
 800b77e:	6010      	str	r0, [r2, #0]
 800b780:	7019      	strb	r1, [r3, #0]
 800b782:	4608      	mov	r0, r1
 800b784:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <__sfputs_r>:
 800b78a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78c:	4606      	mov	r6, r0
 800b78e:	460f      	mov	r7, r1
 800b790:	4614      	mov	r4, r2
 800b792:	18d5      	adds	r5, r2, r3
 800b794:	42ac      	cmp	r4, r5
 800b796:	d101      	bne.n	800b79c <__sfputs_r+0x12>
 800b798:	2000      	movs	r0, #0
 800b79a:	e007      	b.n	800b7ac <__sfputs_r+0x22>
 800b79c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a0:	463a      	mov	r2, r7
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	f7ff ffda 	bl	800b75c <__sfputc_r>
 800b7a8:	1c43      	adds	r3, r0, #1
 800b7aa:	d1f3      	bne.n	800b794 <__sfputs_r+0xa>
 800b7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7b0 <_vfiprintf_r>:
 800b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	460d      	mov	r5, r1
 800b7b6:	b09d      	sub	sp, #116	; 0x74
 800b7b8:	4614      	mov	r4, r2
 800b7ba:	4698      	mov	r8, r3
 800b7bc:	4606      	mov	r6, r0
 800b7be:	b118      	cbz	r0, 800b7c8 <_vfiprintf_r+0x18>
 800b7c0:	6983      	ldr	r3, [r0, #24]
 800b7c2:	b90b      	cbnz	r3, 800b7c8 <_vfiprintf_r+0x18>
 800b7c4:	f7fe fd1a 	bl	800a1fc <__sinit>
 800b7c8:	4b89      	ldr	r3, [pc, #548]	; (800b9f0 <_vfiprintf_r+0x240>)
 800b7ca:	429d      	cmp	r5, r3
 800b7cc:	d11b      	bne.n	800b806 <_vfiprintf_r+0x56>
 800b7ce:	6875      	ldr	r5, [r6, #4]
 800b7d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7d2:	07d9      	lsls	r1, r3, #31
 800b7d4:	d405      	bmi.n	800b7e2 <_vfiprintf_r+0x32>
 800b7d6:	89ab      	ldrh	r3, [r5, #12]
 800b7d8:	059a      	lsls	r2, r3, #22
 800b7da:	d402      	bmi.n	800b7e2 <_vfiprintf_r+0x32>
 800b7dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7de:	f7ff f91a 	bl	800aa16 <__retarget_lock_acquire_recursive>
 800b7e2:	89ab      	ldrh	r3, [r5, #12]
 800b7e4:	071b      	lsls	r3, r3, #28
 800b7e6:	d501      	bpl.n	800b7ec <_vfiprintf_r+0x3c>
 800b7e8:	692b      	ldr	r3, [r5, #16]
 800b7ea:	b9eb      	cbnz	r3, 800b828 <_vfiprintf_r+0x78>
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	f000 fb82 	bl	800bef8 <__swsetup_r>
 800b7f4:	b1c0      	cbz	r0, 800b828 <_vfiprintf_r+0x78>
 800b7f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7f8:	07dc      	lsls	r4, r3, #31
 800b7fa:	d50e      	bpl.n	800b81a <_vfiprintf_r+0x6a>
 800b7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b800:	b01d      	add	sp, #116	; 0x74
 800b802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b806:	4b7b      	ldr	r3, [pc, #492]	; (800b9f4 <_vfiprintf_r+0x244>)
 800b808:	429d      	cmp	r5, r3
 800b80a:	d101      	bne.n	800b810 <_vfiprintf_r+0x60>
 800b80c:	68b5      	ldr	r5, [r6, #8]
 800b80e:	e7df      	b.n	800b7d0 <_vfiprintf_r+0x20>
 800b810:	4b79      	ldr	r3, [pc, #484]	; (800b9f8 <_vfiprintf_r+0x248>)
 800b812:	429d      	cmp	r5, r3
 800b814:	bf08      	it	eq
 800b816:	68f5      	ldreq	r5, [r6, #12]
 800b818:	e7da      	b.n	800b7d0 <_vfiprintf_r+0x20>
 800b81a:	89ab      	ldrh	r3, [r5, #12]
 800b81c:	0598      	lsls	r0, r3, #22
 800b81e:	d4ed      	bmi.n	800b7fc <_vfiprintf_r+0x4c>
 800b820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b822:	f7ff f8f9 	bl	800aa18 <__retarget_lock_release_recursive>
 800b826:	e7e9      	b.n	800b7fc <_vfiprintf_r+0x4c>
 800b828:	2300      	movs	r3, #0
 800b82a:	9309      	str	r3, [sp, #36]	; 0x24
 800b82c:	2320      	movs	r3, #32
 800b82e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b832:	f8cd 800c 	str.w	r8, [sp, #12]
 800b836:	2330      	movs	r3, #48	; 0x30
 800b838:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b9fc <_vfiprintf_r+0x24c>
 800b83c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b840:	f04f 0901 	mov.w	r9, #1
 800b844:	4623      	mov	r3, r4
 800b846:	469a      	mov	sl, r3
 800b848:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b84c:	b10a      	cbz	r2, 800b852 <_vfiprintf_r+0xa2>
 800b84e:	2a25      	cmp	r2, #37	; 0x25
 800b850:	d1f9      	bne.n	800b846 <_vfiprintf_r+0x96>
 800b852:	ebba 0b04 	subs.w	fp, sl, r4
 800b856:	d00b      	beq.n	800b870 <_vfiprintf_r+0xc0>
 800b858:	465b      	mov	r3, fp
 800b85a:	4622      	mov	r2, r4
 800b85c:	4629      	mov	r1, r5
 800b85e:	4630      	mov	r0, r6
 800b860:	f7ff ff93 	bl	800b78a <__sfputs_r>
 800b864:	3001      	adds	r0, #1
 800b866:	f000 80aa 	beq.w	800b9be <_vfiprintf_r+0x20e>
 800b86a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b86c:	445a      	add	r2, fp
 800b86e:	9209      	str	r2, [sp, #36]	; 0x24
 800b870:	f89a 3000 	ldrb.w	r3, [sl]
 800b874:	2b00      	cmp	r3, #0
 800b876:	f000 80a2 	beq.w	800b9be <_vfiprintf_r+0x20e>
 800b87a:	2300      	movs	r3, #0
 800b87c:	f04f 32ff 	mov.w	r2, #4294967295
 800b880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b884:	f10a 0a01 	add.w	sl, sl, #1
 800b888:	9304      	str	r3, [sp, #16]
 800b88a:	9307      	str	r3, [sp, #28]
 800b88c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b890:	931a      	str	r3, [sp, #104]	; 0x68
 800b892:	4654      	mov	r4, sl
 800b894:	2205      	movs	r2, #5
 800b896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b89a:	4858      	ldr	r0, [pc, #352]	; (800b9fc <_vfiprintf_r+0x24c>)
 800b89c:	f7f4 fcc0 	bl	8000220 <memchr>
 800b8a0:	9a04      	ldr	r2, [sp, #16]
 800b8a2:	b9d8      	cbnz	r0, 800b8dc <_vfiprintf_r+0x12c>
 800b8a4:	06d1      	lsls	r1, r2, #27
 800b8a6:	bf44      	itt	mi
 800b8a8:	2320      	movmi	r3, #32
 800b8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8ae:	0713      	lsls	r3, r2, #28
 800b8b0:	bf44      	itt	mi
 800b8b2:	232b      	movmi	r3, #43	; 0x2b
 800b8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b8bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b8be:	d015      	beq.n	800b8ec <_vfiprintf_r+0x13c>
 800b8c0:	9a07      	ldr	r2, [sp, #28]
 800b8c2:	4654      	mov	r4, sl
 800b8c4:	2000      	movs	r0, #0
 800b8c6:	f04f 0c0a 	mov.w	ip, #10
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8d0:	3b30      	subs	r3, #48	; 0x30
 800b8d2:	2b09      	cmp	r3, #9
 800b8d4:	d94e      	bls.n	800b974 <_vfiprintf_r+0x1c4>
 800b8d6:	b1b0      	cbz	r0, 800b906 <_vfiprintf_r+0x156>
 800b8d8:	9207      	str	r2, [sp, #28]
 800b8da:	e014      	b.n	800b906 <_vfiprintf_r+0x156>
 800b8dc:	eba0 0308 	sub.w	r3, r0, r8
 800b8e0:	fa09 f303 	lsl.w	r3, r9, r3
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	9304      	str	r3, [sp, #16]
 800b8e8:	46a2      	mov	sl, r4
 800b8ea:	e7d2      	b.n	800b892 <_vfiprintf_r+0xe2>
 800b8ec:	9b03      	ldr	r3, [sp, #12]
 800b8ee:	1d19      	adds	r1, r3, #4
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	9103      	str	r1, [sp, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	bfbb      	ittet	lt
 800b8f8:	425b      	neglt	r3, r3
 800b8fa:	f042 0202 	orrlt.w	r2, r2, #2
 800b8fe:	9307      	strge	r3, [sp, #28]
 800b900:	9307      	strlt	r3, [sp, #28]
 800b902:	bfb8      	it	lt
 800b904:	9204      	strlt	r2, [sp, #16]
 800b906:	7823      	ldrb	r3, [r4, #0]
 800b908:	2b2e      	cmp	r3, #46	; 0x2e
 800b90a:	d10c      	bne.n	800b926 <_vfiprintf_r+0x176>
 800b90c:	7863      	ldrb	r3, [r4, #1]
 800b90e:	2b2a      	cmp	r3, #42	; 0x2a
 800b910:	d135      	bne.n	800b97e <_vfiprintf_r+0x1ce>
 800b912:	9b03      	ldr	r3, [sp, #12]
 800b914:	1d1a      	adds	r2, r3, #4
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	9203      	str	r2, [sp, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	bfb8      	it	lt
 800b91e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b922:	3402      	adds	r4, #2
 800b924:	9305      	str	r3, [sp, #20]
 800b926:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba0c <_vfiprintf_r+0x25c>
 800b92a:	7821      	ldrb	r1, [r4, #0]
 800b92c:	2203      	movs	r2, #3
 800b92e:	4650      	mov	r0, sl
 800b930:	f7f4 fc76 	bl	8000220 <memchr>
 800b934:	b140      	cbz	r0, 800b948 <_vfiprintf_r+0x198>
 800b936:	2340      	movs	r3, #64	; 0x40
 800b938:	eba0 000a 	sub.w	r0, r0, sl
 800b93c:	fa03 f000 	lsl.w	r0, r3, r0
 800b940:	9b04      	ldr	r3, [sp, #16]
 800b942:	4303      	orrs	r3, r0
 800b944:	3401      	adds	r4, #1
 800b946:	9304      	str	r3, [sp, #16]
 800b948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b94c:	482c      	ldr	r0, [pc, #176]	; (800ba00 <_vfiprintf_r+0x250>)
 800b94e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b952:	2206      	movs	r2, #6
 800b954:	f7f4 fc64 	bl	8000220 <memchr>
 800b958:	2800      	cmp	r0, #0
 800b95a:	d03f      	beq.n	800b9dc <_vfiprintf_r+0x22c>
 800b95c:	4b29      	ldr	r3, [pc, #164]	; (800ba04 <_vfiprintf_r+0x254>)
 800b95e:	bb1b      	cbnz	r3, 800b9a8 <_vfiprintf_r+0x1f8>
 800b960:	9b03      	ldr	r3, [sp, #12]
 800b962:	3307      	adds	r3, #7
 800b964:	f023 0307 	bic.w	r3, r3, #7
 800b968:	3308      	adds	r3, #8
 800b96a:	9303      	str	r3, [sp, #12]
 800b96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b96e:	443b      	add	r3, r7
 800b970:	9309      	str	r3, [sp, #36]	; 0x24
 800b972:	e767      	b.n	800b844 <_vfiprintf_r+0x94>
 800b974:	fb0c 3202 	mla	r2, ip, r2, r3
 800b978:	460c      	mov	r4, r1
 800b97a:	2001      	movs	r0, #1
 800b97c:	e7a5      	b.n	800b8ca <_vfiprintf_r+0x11a>
 800b97e:	2300      	movs	r3, #0
 800b980:	3401      	adds	r4, #1
 800b982:	9305      	str	r3, [sp, #20]
 800b984:	4619      	mov	r1, r3
 800b986:	f04f 0c0a 	mov.w	ip, #10
 800b98a:	4620      	mov	r0, r4
 800b98c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b990:	3a30      	subs	r2, #48	; 0x30
 800b992:	2a09      	cmp	r2, #9
 800b994:	d903      	bls.n	800b99e <_vfiprintf_r+0x1ee>
 800b996:	2b00      	cmp	r3, #0
 800b998:	d0c5      	beq.n	800b926 <_vfiprintf_r+0x176>
 800b99a:	9105      	str	r1, [sp, #20]
 800b99c:	e7c3      	b.n	800b926 <_vfiprintf_r+0x176>
 800b99e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e7f0      	b.n	800b98a <_vfiprintf_r+0x1da>
 800b9a8:	ab03      	add	r3, sp, #12
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	462a      	mov	r2, r5
 800b9ae:	4b16      	ldr	r3, [pc, #88]	; (800ba08 <_vfiprintf_r+0x258>)
 800b9b0:	a904      	add	r1, sp, #16
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f3af 8000 	nop.w
 800b9b8:	4607      	mov	r7, r0
 800b9ba:	1c78      	adds	r0, r7, #1
 800b9bc:	d1d6      	bne.n	800b96c <_vfiprintf_r+0x1bc>
 800b9be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9c0:	07d9      	lsls	r1, r3, #31
 800b9c2:	d405      	bmi.n	800b9d0 <_vfiprintf_r+0x220>
 800b9c4:	89ab      	ldrh	r3, [r5, #12]
 800b9c6:	059a      	lsls	r2, r3, #22
 800b9c8:	d402      	bmi.n	800b9d0 <_vfiprintf_r+0x220>
 800b9ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9cc:	f7ff f824 	bl	800aa18 <__retarget_lock_release_recursive>
 800b9d0:	89ab      	ldrh	r3, [r5, #12]
 800b9d2:	065b      	lsls	r3, r3, #25
 800b9d4:	f53f af12 	bmi.w	800b7fc <_vfiprintf_r+0x4c>
 800b9d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9da:	e711      	b.n	800b800 <_vfiprintf_r+0x50>
 800b9dc:	ab03      	add	r3, sp, #12
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	462a      	mov	r2, r5
 800b9e2:	4b09      	ldr	r3, [pc, #36]	; (800ba08 <_vfiprintf_r+0x258>)
 800b9e4:	a904      	add	r1, sp, #16
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	f000 f880 	bl	800baec <_printf_i>
 800b9ec:	e7e4      	b.n	800b9b8 <_vfiprintf_r+0x208>
 800b9ee:	bf00      	nop
 800b9f0:	0800cbd8 	.word	0x0800cbd8
 800b9f4:	0800cbf8 	.word	0x0800cbf8
 800b9f8:	0800cbb8 	.word	0x0800cbb8
 800b9fc:	0800ce1c 	.word	0x0800ce1c
 800ba00:	0800ce26 	.word	0x0800ce26
 800ba04:	00000000 	.word	0x00000000
 800ba08:	0800b78b 	.word	0x0800b78b
 800ba0c:	0800ce22 	.word	0x0800ce22

0800ba10 <_printf_common>:
 800ba10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba14:	4616      	mov	r6, r2
 800ba16:	4699      	mov	r9, r3
 800ba18:	688a      	ldr	r2, [r1, #8]
 800ba1a:	690b      	ldr	r3, [r1, #16]
 800ba1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba20:	4293      	cmp	r3, r2
 800ba22:	bfb8      	it	lt
 800ba24:	4613      	movlt	r3, r2
 800ba26:	6033      	str	r3, [r6, #0]
 800ba28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba2c:	4607      	mov	r7, r0
 800ba2e:	460c      	mov	r4, r1
 800ba30:	b10a      	cbz	r2, 800ba36 <_printf_common+0x26>
 800ba32:	3301      	adds	r3, #1
 800ba34:	6033      	str	r3, [r6, #0]
 800ba36:	6823      	ldr	r3, [r4, #0]
 800ba38:	0699      	lsls	r1, r3, #26
 800ba3a:	bf42      	ittt	mi
 800ba3c:	6833      	ldrmi	r3, [r6, #0]
 800ba3e:	3302      	addmi	r3, #2
 800ba40:	6033      	strmi	r3, [r6, #0]
 800ba42:	6825      	ldr	r5, [r4, #0]
 800ba44:	f015 0506 	ands.w	r5, r5, #6
 800ba48:	d106      	bne.n	800ba58 <_printf_common+0x48>
 800ba4a:	f104 0a19 	add.w	sl, r4, #25
 800ba4e:	68e3      	ldr	r3, [r4, #12]
 800ba50:	6832      	ldr	r2, [r6, #0]
 800ba52:	1a9b      	subs	r3, r3, r2
 800ba54:	42ab      	cmp	r3, r5
 800ba56:	dc26      	bgt.n	800baa6 <_printf_common+0x96>
 800ba58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba5c:	1e13      	subs	r3, r2, #0
 800ba5e:	6822      	ldr	r2, [r4, #0]
 800ba60:	bf18      	it	ne
 800ba62:	2301      	movne	r3, #1
 800ba64:	0692      	lsls	r2, r2, #26
 800ba66:	d42b      	bmi.n	800bac0 <_printf_common+0xb0>
 800ba68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba6c:	4649      	mov	r1, r9
 800ba6e:	4638      	mov	r0, r7
 800ba70:	47c0      	blx	r8
 800ba72:	3001      	adds	r0, #1
 800ba74:	d01e      	beq.n	800bab4 <_printf_common+0xa4>
 800ba76:	6823      	ldr	r3, [r4, #0]
 800ba78:	68e5      	ldr	r5, [r4, #12]
 800ba7a:	6832      	ldr	r2, [r6, #0]
 800ba7c:	f003 0306 	and.w	r3, r3, #6
 800ba80:	2b04      	cmp	r3, #4
 800ba82:	bf08      	it	eq
 800ba84:	1aad      	subeq	r5, r5, r2
 800ba86:	68a3      	ldr	r3, [r4, #8]
 800ba88:	6922      	ldr	r2, [r4, #16]
 800ba8a:	bf0c      	ite	eq
 800ba8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba90:	2500      	movne	r5, #0
 800ba92:	4293      	cmp	r3, r2
 800ba94:	bfc4      	itt	gt
 800ba96:	1a9b      	subgt	r3, r3, r2
 800ba98:	18ed      	addgt	r5, r5, r3
 800ba9a:	2600      	movs	r6, #0
 800ba9c:	341a      	adds	r4, #26
 800ba9e:	42b5      	cmp	r5, r6
 800baa0:	d11a      	bne.n	800bad8 <_printf_common+0xc8>
 800baa2:	2000      	movs	r0, #0
 800baa4:	e008      	b.n	800bab8 <_printf_common+0xa8>
 800baa6:	2301      	movs	r3, #1
 800baa8:	4652      	mov	r2, sl
 800baaa:	4649      	mov	r1, r9
 800baac:	4638      	mov	r0, r7
 800baae:	47c0      	blx	r8
 800bab0:	3001      	adds	r0, #1
 800bab2:	d103      	bne.n	800babc <_printf_common+0xac>
 800bab4:	f04f 30ff 	mov.w	r0, #4294967295
 800bab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800babc:	3501      	adds	r5, #1
 800babe:	e7c6      	b.n	800ba4e <_printf_common+0x3e>
 800bac0:	18e1      	adds	r1, r4, r3
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	2030      	movs	r0, #48	; 0x30
 800bac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800baca:	4422      	add	r2, r4
 800bacc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bad4:	3302      	adds	r3, #2
 800bad6:	e7c7      	b.n	800ba68 <_printf_common+0x58>
 800bad8:	2301      	movs	r3, #1
 800bada:	4622      	mov	r2, r4
 800badc:	4649      	mov	r1, r9
 800bade:	4638      	mov	r0, r7
 800bae0:	47c0      	blx	r8
 800bae2:	3001      	adds	r0, #1
 800bae4:	d0e6      	beq.n	800bab4 <_printf_common+0xa4>
 800bae6:	3601      	adds	r6, #1
 800bae8:	e7d9      	b.n	800ba9e <_printf_common+0x8e>
	...

0800baec <_printf_i>:
 800baec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800baf0:	460c      	mov	r4, r1
 800baf2:	4691      	mov	r9, r2
 800baf4:	7e27      	ldrb	r7, [r4, #24]
 800baf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800baf8:	2f78      	cmp	r7, #120	; 0x78
 800bafa:	4680      	mov	r8, r0
 800bafc:	469a      	mov	sl, r3
 800bafe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb02:	d807      	bhi.n	800bb14 <_printf_i+0x28>
 800bb04:	2f62      	cmp	r7, #98	; 0x62
 800bb06:	d80a      	bhi.n	800bb1e <_printf_i+0x32>
 800bb08:	2f00      	cmp	r7, #0
 800bb0a:	f000 80d8 	beq.w	800bcbe <_printf_i+0x1d2>
 800bb0e:	2f58      	cmp	r7, #88	; 0x58
 800bb10:	f000 80a3 	beq.w	800bc5a <_printf_i+0x16e>
 800bb14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb1c:	e03a      	b.n	800bb94 <_printf_i+0xa8>
 800bb1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb22:	2b15      	cmp	r3, #21
 800bb24:	d8f6      	bhi.n	800bb14 <_printf_i+0x28>
 800bb26:	a001      	add	r0, pc, #4	; (adr r0, 800bb2c <_printf_i+0x40>)
 800bb28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bb2c:	0800bb85 	.word	0x0800bb85
 800bb30:	0800bb99 	.word	0x0800bb99
 800bb34:	0800bb15 	.word	0x0800bb15
 800bb38:	0800bb15 	.word	0x0800bb15
 800bb3c:	0800bb15 	.word	0x0800bb15
 800bb40:	0800bb15 	.word	0x0800bb15
 800bb44:	0800bb99 	.word	0x0800bb99
 800bb48:	0800bb15 	.word	0x0800bb15
 800bb4c:	0800bb15 	.word	0x0800bb15
 800bb50:	0800bb15 	.word	0x0800bb15
 800bb54:	0800bb15 	.word	0x0800bb15
 800bb58:	0800bca5 	.word	0x0800bca5
 800bb5c:	0800bbc9 	.word	0x0800bbc9
 800bb60:	0800bc87 	.word	0x0800bc87
 800bb64:	0800bb15 	.word	0x0800bb15
 800bb68:	0800bb15 	.word	0x0800bb15
 800bb6c:	0800bcc7 	.word	0x0800bcc7
 800bb70:	0800bb15 	.word	0x0800bb15
 800bb74:	0800bbc9 	.word	0x0800bbc9
 800bb78:	0800bb15 	.word	0x0800bb15
 800bb7c:	0800bb15 	.word	0x0800bb15
 800bb80:	0800bc8f 	.word	0x0800bc8f
 800bb84:	680b      	ldr	r3, [r1, #0]
 800bb86:	1d1a      	adds	r2, r3, #4
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	600a      	str	r2, [r1, #0]
 800bb8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb94:	2301      	movs	r3, #1
 800bb96:	e0a3      	b.n	800bce0 <_printf_i+0x1f4>
 800bb98:	6825      	ldr	r5, [r4, #0]
 800bb9a:	6808      	ldr	r0, [r1, #0]
 800bb9c:	062e      	lsls	r6, r5, #24
 800bb9e:	f100 0304 	add.w	r3, r0, #4
 800bba2:	d50a      	bpl.n	800bbba <_printf_i+0xce>
 800bba4:	6805      	ldr	r5, [r0, #0]
 800bba6:	600b      	str	r3, [r1, #0]
 800bba8:	2d00      	cmp	r5, #0
 800bbaa:	da03      	bge.n	800bbb4 <_printf_i+0xc8>
 800bbac:	232d      	movs	r3, #45	; 0x2d
 800bbae:	426d      	negs	r5, r5
 800bbb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbb4:	485e      	ldr	r0, [pc, #376]	; (800bd30 <_printf_i+0x244>)
 800bbb6:	230a      	movs	r3, #10
 800bbb8:	e019      	b.n	800bbee <_printf_i+0x102>
 800bbba:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bbbe:	6805      	ldr	r5, [r0, #0]
 800bbc0:	600b      	str	r3, [r1, #0]
 800bbc2:	bf18      	it	ne
 800bbc4:	b22d      	sxthne	r5, r5
 800bbc6:	e7ef      	b.n	800bba8 <_printf_i+0xbc>
 800bbc8:	680b      	ldr	r3, [r1, #0]
 800bbca:	6825      	ldr	r5, [r4, #0]
 800bbcc:	1d18      	adds	r0, r3, #4
 800bbce:	6008      	str	r0, [r1, #0]
 800bbd0:	0628      	lsls	r0, r5, #24
 800bbd2:	d501      	bpl.n	800bbd8 <_printf_i+0xec>
 800bbd4:	681d      	ldr	r5, [r3, #0]
 800bbd6:	e002      	b.n	800bbde <_printf_i+0xf2>
 800bbd8:	0669      	lsls	r1, r5, #25
 800bbda:	d5fb      	bpl.n	800bbd4 <_printf_i+0xe8>
 800bbdc:	881d      	ldrh	r5, [r3, #0]
 800bbde:	4854      	ldr	r0, [pc, #336]	; (800bd30 <_printf_i+0x244>)
 800bbe0:	2f6f      	cmp	r7, #111	; 0x6f
 800bbe2:	bf0c      	ite	eq
 800bbe4:	2308      	moveq	r3, #8
 800bbe6:	230a      	movne	r3, #10
 800bbe8:	2100      	movs	r1, #0
 800bbea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbee:	6866      	ldr	r6, [r4, #4]
 800bbf0:	60a6      	str	r6, [r4, #8]
 800bbf2:	2e00      	cmp	r6, #0
 800bbf4:	bfa2      	ittt	ge
 800bbf6:	6821      	ldrge	r1, [r4, #0]
 800bbf8:	f021 0104 	bicge.w	r1, r1, #4
 800bbfc:	6021      	strge	r1, [r4, #0]
 800bbfe:	b90d      	cbnz	r5, 800bc04 <_printf_i+0x118>
 800bc00:	2e00      	cmp	r6, #0
 800bc02:	d04d      	beq.n	800bca0 <_printf_i+0x1b4>
 800bc04:	4616      	mov	r6, r2
 800bc06:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc0a:	fb03 5711 	mls	r7, r3, r1, r5
 800bc0e:	5dc7      	ldrb	r7, [r0, r7]
 800bc10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc14:	462f      	mov	r7, r5
 800bc16:	42bb      	cmp	r3, r7
 800bc18:	460d      	mov	r5, r1
 800bc1a:	d9f4      	bls.n	800bc06 <_printf_i+0x11a>
 800bc1c:	2b08      	cmp	r3, #8
 800bc1e:	d10b      	bne.n	800bc38 <_printf_i+0x14c>
 800bc20:	6823      	ldr	r3, [r4, #0]
 800bc22:	07df      	lsls	r7, r3, #31
 800bc24:	d508      	bpl.n	800bc38 <_printf_i+0x14c>
 800bc26:	6923      	ldr	r3, [r4, #16]
 800bc28:	6861      	ldr	r1, [r4, #4]
 800bc2a:	4299      	cmp	r1, r3
 800bc2c:	bfde      	ittt	le
 800bc2e:	2330      	movle	r3, #48	; 0x30
 800bc30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc34:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc38:	1b92      	subs	r2, r2, r6
 800bc3a:	6122      	str	r2, [r4, #16]
 800bc3c:	f8cd a000 	str.w	sl, [sp]
 800bc40:	464b      	mov	r3, r9
 800bc42:	aa03      	add	r2, sp, #12
 800bc44:	4621      	mov	r1, r4
 800bc46:	4640      	mov	r0, r8
 800bc48:	f7ff fee2 	bl	800ba10 <_printf_common>
 800bc4c:	3001      	adds	r0, #1
 800bc4e:	d14c      	bne.n	800bcea <_printf_i+0x1fe>
 800bc50:	f04f 30ff 	mov.w	r0, #4294967295
 800bc54:	b004      	add	sp, #16
 800bc56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc5a:	4835      	ldr	r0, [pc, #212]	; (800bd30 <_printf_i+0x244>)
 800bc5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc60:	6823      	ldr	r3, [r4, #0]
 800bc62:	680e      	ldr	r6, [r1, #0]
 800bc64:	061f      	lsls	r7, r3, #24
 800bc66:	f856 5b04 	ldr.w	r5, [r6], #4
 800bc6a:	600e      	str	r6, [r1, #0]
 800bc6c:	d514      	bpl.n	800bc98 <_printf_i+0x1ac>
 800bc6e:	07d9      	lsls	r1, r3, #31
 800bc70:	bf44      	itt	mi
 800bc72:	f043 0320 	orrmi.w	r3, r3, #32
 800bc76:	6023      	strmi	r3, [r4, #0]
 800bc78:	b91d      	cbnz	r5, 800bc82 <_printf_i+0x196>
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	f023 0320 	bic.w	r3, r3, #32
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	2310      	movs	r3, #16
 800bc84:	e7b0      	b.n	800bbe8 <_printf_i+0xfc>
 800bc86:	6823      	ldr	r3, [r4, #0]
 800bc88:	f043 0320 	orr.w	r3, r3, #32
 800bc8c:	6023      	str	r3, [r4, #0]
 800bc8e:	2378      	movs	r3, #120	; 0x78
 800bc90:	4828      	ldr	r0, [pc, #160]	; (800bd34 <_printf_i+0x248>)
 800bc92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc96:	e7e3      	b.n	800bc60 <_printf_i+0x174>
 800bc98:	065e      	lsls	r6, r3, #25
 800bc9a:	bf48      	it	mi
 800bc9c:	b2ad      	uxthmi	r5, r5
 800bc9e:	e7e6      	b.n	800bc6e <_printf_i+0x182>
 800bca0:	4616      	mov	r6, r2
 800bca2:	e7bb      	b.n	800bc1c <_printf_i+0x130>
 800bca4:	680b      	ldr	r3, [r1, #0]
 800bca6:	6826      	ldr	r6, [r4, #0]
 800bca8:	6960      	ldr	r0, [r4, #20]
 800bcaa:	1d1d      	adds	r5, r3, #4
 800bcac:	600d      	str	r5, [r1, #0]
 800bcae:	0635      	lsls	r5, r6, #24
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	d501      	bpl.n	800bcb8 <_printf_i+0x1cc>
 800bcb4:	6018      	str	r0, [r3, #0]
 800bcb6:	e002      	b.n	800bcbe <_printf_i+0x1d2>
 800bcb8:	0671      	lsls	r1, r6, #25
 800bcba:	d5fb      	bpl.n	800bcb4 <_printf_i+0x1c8>
 800bcbc:	8018      	strh	r0, [r3, #0]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	6123      	str	r3, [r4, #16]
 800bcc2:	4616      	mov	r6, r2
 800bcc4:	e7ba      	b.n	800bc3c <_printf_i+0x150>
 800bcc6:	680b      	ldr	r3, [r1, #0]
 800bcc8:	1d1a      	adds	r2, r3, #4
 800bcca:	600a      	str	r2, [r1, #0]
 800bccc:	681e      	ldr	r6, [r3, #0]
 800bcce:	6862      	ldr	r2, [r4, #4]
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	f7f4 faa4 	bl	8000220 <memchr>
 800bcd8:	b108      	cbz	r0, 800bcde <_printf_i+0x1f2>
 800bcda:	1b80      	subs	r0, r0, r6
 800bcdc:	6060      	str	r0, [r4, #4]
 800bcde:	6863      	ldr	r3, [r4, #4]
 800bce0:	6123      	str	r3, [r4, #16]
 800bce2:	2300      	movs	r3, #0
 800bce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bce8:	e7a8      	b.n	800bc3c <_printf_i+0x150>
 800bcea:	6923      	ldr	r3, [r4, #16]
 800bcec:	4632      	mov	r2, r6
 800bcee:	4649      	mov	r1, r9
 800bcf0:	4640      	mov	r0, r8
 800bcf2:	47d0      	blx	sl
 800bcf4:	3001      	adds	r0, #1
 800bcf6:	d0ab      	beq.n	800bc50 <_printf_i+0x164>
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	079b      	lsls	r3, r3, #30
 800bcfc:	d413      	bmi.n	800bd26 <_printf_i+0x23a>
 800bcfe:	68e0      	ldr	r0, [r4, #12]
 800bd00:	9b03      	ldr	r3, [sp, #12]
 800bd02:	4298      	cmp	r0, r3
 800bd04:	bfb8      	it	lt
 800bd06:	4618      	movlt	r0, r3
 800bd08:	e7a4      	b.n	800bc54 <_printf_i+0x168>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	4632      	mov	r2, r6
 800bd0e:	4649      	mov	r1, r9
 800bd10:	4640      	mov	r0, r8
 800bd12:	47d0      	blx	sl
 800bd14:	3001      	adds	r0, #1
 800bd16:	d09b      	beq.n	800bc50 <_printf_i+0x164>
 800bd18:	3501      	adds	r5, #1
 800bd1a:	68e3      	ldr	r3, [r4, #12]
 800bd1c:	9903      	ldr	r1, [sp, #12]
 800bd1e:	1a5b      	subs	r3, r3, r1
 800bd20:	42ab      	cmp	r3, r5
 800bd22:	dcf2      	bgt.n	800bd0a <_printf_i+0x21e>
 800bd24:	e7eb      	b.n	800bcfe <_printf_i+0x212>
 800bd26:	2500      	movs	r5, #0
 800bd28:	f104 0619 	add.w	r6, r4, #25
 800bd2c:	e7f5      	b.n	800bd1a <_printf_i+0x22e>
 800bd2e:	bf00      	nop
 800bd30:	0800ce2d 	.word	0x0800ce2d
 800bd34:	0800ce3e 	.word	0x0800ce3e

0800bd38 <nan>:
 800bd38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bd40 <nan+0x8>
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	00000000 	.word	0x00000000
 800bd44:	7ff80000 	.word	0x7ff80000

0800bd48 <_sbrk_r>:
 800bd48:	b538      	push	{r3, r4, r5, lr}
 800bd4a:	4d06      	ldr	r5, [pc, #24]	; (800bd64 <_sbrk_r+0x1c>)
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	4604      	mov	r4, r0
 800bd50:	4608      	mov	r0, r1
 800bd52:	602b      	str	r3, [r5, #0]
 800bd54:	f7f6 f800 	bl	8001d58 <_sbrk>
 800bd58:	1c43      	adds	r3, r0, #1
 800bd5a:	d102      	bne.n	800bd62 <_sbrk_r+0x1a>
 800bd5c:	682b      	ldr	r3, [r5, #0]
 800bd5e:	b103      	cbz	r3, 800bd62 <_sbrk_r+0x1a>
 800bd60:	6023      	str	r3, [r4, #0]
 800bd62:	bd38      	pop	{r3, r4, r5, pc}
 800bd64:	20005d78 	.word	0x20005d78

0800bd68 <__sread>:
 800bd68:	b510      	push	{r4, lr}
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd70:	f000 fb4c 	bl	800c40c <_read_r>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	bfab      	itete	ge
 800bd78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd7a:	89a3      	ldrhlt	r3, [r4, #12]
 800bd7c:	181b      	addge	r3, r3, r0
 800bd7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd82:	bfac      	ite	ge
 800bd84:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd86:	81a3      	strhlt	r3, [r4, #12]
 800bd88:	bd10      	pop	{r4, pc}

0800bd8a <__swrite>:
 800bd8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd8e:	461f      	mov	r7, r3
 800bd90:	898b      	ldrh	r3, [r1, #12]
 800bd92:	05db      	lsls	r3, r3, #23
 800bd94:	4605      	mov	r5, r0
 800bd96:	460c      	mov	r4, r1
 800bd98:	4616      	mov	r6, r2
 800bd9a:	d505      	bpl.n	800bda8 <__swrite+0x1e>
 800bd9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bda0:	2302      	movs	r3, #2
 800bda2:	2200      	movs	r2, #0
 800bda4:	f000 fa18 	bl	800c1d8 <_lseek_r>
 800bda8:	89a3      	ldrh	r3, [r4, #12]
 800bdaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdb2:	81a3      	strh	r3, [r4, #12]
 800bdb4:	4632      	mov	r2, r6
 800bdb6:	463b      	mov	r3, r7
 800bdb8:	4628      	mov	r0, r5
 800bdba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdbe:	f000 b889 	b.w	800bed4 <_write_r>

0800bdc2 <__sseek>:
 800bdc2:	b510      	push	{r4, lr}
 800bdc4:	460c      	mov	r4, r1
 800bdc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdca:	f000 fa05 	bl	800c1d8 <_lseek_r>
 800bdce:	1c43      	adds	r3, r0, #1
 800bdd0:	89a3      	ldrh	r3, [r4, #12]
 800bdd2:	bf15      	itete	ne
 800bdd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bdd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bdda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bdde:	81a3      	strheq	r3, [r4, #12]
 800bde0:	bf18      	it	ne
 800bde2:	81a3      	strhne	r3, [r4, #12]
 800bde4:	bd10      	pop	{r4, pc}

0800bde6 <__sclose>:
 800bde6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdea:	f000 b911 	b.w	800c010 <_close_r>

0800bdee <strncmp>:
 800bdee:	b510      	push	{r4, lr}
 800bdf0:	b16a      	cbz	r2, 800be0e <strncmp+0x20>
 800bdf2:	3901      	subs	r1, #1
 800bdf4:	1884      	adds	r4, r0, r2
 800bdf6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bdfa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d103      	bne.n	800be0a <strncmp+0x1c>
 800be02:	42a0      	cmp	r0, r4
 800be04:	d001      	beq.n	800be0a <strncmp+0x1c>
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1f5      	bne.n	800bdf6 <strncmp+0x8>
 800be0a:	1a98      	subs	r0, r3, r2
 800be0c:	bd10      	pop	{r4, pc}
 800be0e:	4610      	mov	r0, r2
 800be10:	e7fc      	b.n	800be0c <strncmp+0x1e>
	...

0800be14 <__swbuf_r>:
 800be14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be16:	460e      	mov	r6, r1
 800be18:	4614      	mov	r4, r2
 800be1a:	4605      	mov	r5, r0
 800be1c:	b118      	cbz	r0, 800be26 <__swbuf_r+0x12>
 800be1e:	6983      	ldr	r3, [r0, #24]
 800be20:	b90b      	cbnz	r3, 800be26 <__swbuf_r+0x12>
 800be22:	f7fe f9eb 	bl	800a1fc <__sinit>
 800be26:	4b21      	ldr	r3, [pc, #132]	; (800beac <__swbuf_r+0x98>)
 800be28:	429c      	cmp	r4, r3
 800be2a:	d12b      	bne.n	800be84 <__swbuf_r+0x70>
 800be2c:	686c      	ldr	r4, [r5, #4]
 800be2e:	69a3      	ldr	r3, [r4, #24]
 800be30:	60a3      	str	r3, [r4, #8]
 800be32:	89a3      	ldrh	r3, [r4, #12]
 800be34:	071a      	lsls	r2, r3, #28
 800be36:	d52f      	bpl.n	800be98 <__swbuf_r+0x84>
 800be38:	6923      	ldr	r3, [r4, #16]
 800be3a:	b36b      	cbz	r3, 800be98 <__swbuf_r+0x84>
 800be3c:	6923      	ldr	r3, [r4, #16]
 800be3e:	6820      	ldr	r0, [r4, #0]
 800be40:	1ac0      	subs	r0, r0, r3
 800be42:	6963      	ldr	r3, [r4, #20]
 800be44:	b2f6      	uxtb	r6, r6
 800be46:	4283      	cmp	r3, r0
 800be48:	4637      	mov	r7, r6
 800be4a:	dc04      	bgt.n	800be56 <__swbuf_r+0x42>
 800be4c:	4621      	mov	r1, r4
 800be4e:	4628      	mov	r0, r5
 800be50:	f000 f974 	bl	800c13c <_fflush_r>
 800be54:	bb30      	cbnz	r0, 800bea4 <__swbuf_r+0x90>
 800be56:	68a3      	ldr	r3, [r4, #8]
 800be58:	3b01      	subs	r3, #1
 800be5a:	60a3      	str	r3, [r4, #8]
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	1c5a      	adds	r2, r3, #1
 800be60:	6022      	str	r2, [r4, #0]
 800be62:	701e      	strb	r6, [r3, #0]
 800be64:	6963      	ldr	r3, [r4, #20]
 800be66:	3001      	adds	r0, #1
 800be68:	4283      	cmp	r3, r0
 800be6a:	d004      	beq.n	800be76 <__swbuf_r+0x62>
 800be6c:	89a3      	ldrh	r3, [r4, #12]
 800be6e:	07db      	lsls	r3, r3, #31
 800be70:	d506      	bpl.n	800be80 <__swbuf_r+0x6c>
 800be72:	2e0a      	cmp	r6, #10
 800be74:	d104      	bne.n	800be80 <__swbuf_r+0x6c>
 800be76:	4621      	mov	r1, r4
 800be78:	4628      	mov	r0, r5
 800be7a:	f000 f95f 	bl	800c13c <_fflush_r>
 800be7e:	b988      	cbnz	r0, 800bea4 <__swbuf_r+0x90>
 800be80:	4638      	mov	r0, r7
 800be82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be84:	4b0a      	ldr	r3, [pc, #40]	; (800beb0 <__swbuf_r+0x9c>)
 800be86:	429c      	cmp	r4, r3
 800be88:	d101      	bne.n	800be8e <__swbuf_r+0x7a>
 800be8a:	68ac      	ldr	r4, [r5, #8]
 800be8c:	e7cf      	b.n	800be2e <__swbuf_r+0x1a>
 800be8e:	4b09      	ldr	r3, [pc, #36]	; (800beb4 <__swbuf_r+0xa0>)
 800be90:	429c      	cmp	r4, r3
 800be92:	bf08      	it	eq
 800be94:	68ec      	ldreq	r4, [r5, #12]
 800be96:	e7ca      	b.n	800be2e <__swbuf_r+0x1a>
 800be98:	4621      	mov	r1, r4
 800be9a:	4628      	mov	r0, r5
 800be9c:	f000 f82c 	bl	800bef8 <__swsetup_r>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d0cb      	beq.n	800be3c <__swbuf_r+0x28>
 800bea4:	f04f 37ff 	mov.w	r7, #4294967295
 800bea8:	e7ea      	b.n	800be80 <__swbuf_r+0x6c>
 800beaa:	bf00      	nop
 800beac:	0800cbd8 	.word	0x0800cbd8
 800beb0:	0800cbf8 	.word	0x0800cbf8
 800beb4:	0800cbb8 	.word	0x0800cbb8

0800beb8 <__ascii_wctomb>:
 800beb8:	b149      	cbz	r1, 800bece <__ascii_wctomb+0x16>
 800beba:	2aff      	cmp	r2, #255	; 0xff
 800bebc:	bf85      	ittet	hi
 800bebe:	238a      	movhi	r3, #138	; 0x8a
 800bec0:	6003      	strhi	r3, [r0, #0]
 800bec2:	700a      	strbls	r2, [r1, #0]
 800bec4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bec8:	bf98      	it	ls
 800beca:	2001      	movls	r0, #1
 800becc:	4770      	bx	lr
 800bece:	4608      	mov	r0, r1
 800bed0:	4770      	bx	lr
	...

0800bed4 <_write_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	4d07      	ldr	r5, [pc, #28]	; (800bef4 <_write_r+0x20>)
 800bed8:	4604      	mov	r4, r0
 800beda:	4608      	mov	r0, r1
 800bedc:	4611      	mov	r1, r2
 800bede:	2200      	movs	r2, #0
 800bee0:	602a      	str	r2, [r5, #0]
 800bee2:	461a      	mov	r2, r3
 800bee4:	f7f5 fee7 	bl	8001cb6 <_write>
 800bee8:	1c43      	adds	r3, r0, #1
 800beea:	d102      	bne.n	800bef2 <_write_r+0x1e>
 800beec:	682b      	ldr	r3, [r5, #0]
 800beee:	b103      	cbz	r3, 800bef2 <_write_r+0x1e>
 800bef0:	6023      	str	r3, [r4, #0]
 800bef2:	bd38      	pop	{r3, r4, r5, pc}
 800bef4:	20005d78 	.word	0x20005d78

0800bef8 <__swsetup_r>:
 800bef8:	4b32      	ldr	r3, [pc, #200]	; (800bfc4 <__swsetup_r+0xcc>)
 800befa:	b570      	push	{r4, r5, r6, lr}
 800befc:	681d      	ldr	r5, [r3, #0]
 800befe:	4606      	mov	r6, r0
 800bf00:	460c      	mov	r4, r1
 800bf02:	b125      	cbz	r5, 800bf0e <__swsetup_r+0x16>
 800bf04:	69ab      	ldr	r3, [r5, #24]
 800bf06:	b913      	cbnz	r3, 800bf0e <__swsetup_r+0x16>
 800bf08:	4628      	mov	r0, r5
 800bf0a:	f7fe f977 	bl	800a1fc <__sinit>
 800bf0e:	4b2e      	ldr	r3, [pc, #184]	; (800bfc8 <__swsetup_r+0xd0>)
 800bf10:	429c      	cmp	r4, r3
 800bf12:	d10f      	bne.n	800bf34 <__swsetup_r+0x3c>
 800bf14:	686c      	ldr	r4, [r5, #4]
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf1c:	0719      	lsls	r1, r3, #28
 800bf1e:	d42c      	bmi.n	800bf7a <__swsetup_r+0x82>
 800bf20:	06dd      	lsls	r5, r3, #27
 800bf22:	d411      	bmi.n	800bf48 <__swsetup_r+0x50>
 800bf24:	2309      	movs	r3, #9
 800bf26:	6033      	str	r3, [r6, #0]
 800bf28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf2c:	81a3      	strh	r3, [r4, #12]
 800bf2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf32:	e03e      	b.n	800bfb2 <__swsetup_r+0xba>
 800bf34:	4b25      	ldr	r3, [pc, #148]	; (800bfcc <__swsetup_r+0xd4>)
 800bf36:	429c      	cmp	r4, r3
 800bf38:	d101      	bne.n	800bf3e <__swsetup_r+0x46>
 800bf3a:	68ac      	ldr	r4, [r5, #8]
 800bf3c:	e7eb      	b.n	800bf16 <__swsetup_r+0x1e>
 800bf3e:	4b24      	ldr	r3, [pc, #144]	; (800bfd0 <__swsetup_r+0xd8>)
 800bf40:	429c      	cmp	r4, r3
 800bf42:	bf08      	it	eq
 800bf44:	68ec      	ldreq	r4, [r5, #12]
 800bf46:	e7e6      	b.n	800bf16 <__swsetup_r+0x1e>
 800bf48:	0758      	lsls	r0, r3, #29
 800bf4a:	d512      	bpl.n	800bf72 <__swsetup_r+0x7a>
 800bf4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf4e:	b141      	cbz	r1, 800bf62 <__swsetup_r+0x6a>
 800bf50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf54:	4299      	cmp	r1, r3
 800bf56:	d002      	beq.n	800bf5e <__swsetup_r+0x66>
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f000 f9e1 	bl	800c320 <_free_r>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	6363      	str	r3, [r4, #52]	; 0x34
 800bf62:	89a3      	ldrh	r3, [r4, #12]
 800bf64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf68:	81a3      	strh	r3, [r4, #12]
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	6063      	str	r3, [r4, #4]
 800bf6e:	6923      	ldr	r3, [r4, #16]
 800bf70:	6023      	str	r3, [r4, #0]
 800bf72:	89a3      	ldrh	r3, [r4, #12]
 800bf74:	f043 0308 	orr.w	r3, r3, #8
 800bf78:	81a3      	strh	r3, [r4, #12]
 800bf7a:	6923      	ldr	r3, [r4, #16]
 800bf7c:	b94b      	cbnz	r3, 800bf92 <__swsetup_r+0x9a>
 800bf7e:	89a3      	ldrh	r3, [r4, #12]
 800bf80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf88:	d003      	beq.n	800bf92 <__swsetup_r+0x9a>
 800bf8a:	4621      	mov	r1, r4
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f000 f959 	bl	800c244 <__smakebuf_r>
 800bf92:	89a0      	ldrh	r0, [r4, #12]
 800bf94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf98:	f010 0301 	ands.w	r3, r0, #1
 800bf9c:	d00a      	beq.n	800bfb4 <__swsetup_r+0xbc>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	60a3      	str	r3, [r4, #8]
 800bfa2:	6963      	ldr	r3, [r4, #20]
 800bfa4:	425b      	negs	r3, r3
 800bfa6:	61a3      	str	r3, [r4, #24]
 800bfa8:	6923      	ldr	r3, [r4, #16]
 800bfaa:	b943      	cbnz	r3, 800bfbe <__swsetup_r+0xc6>
 800bfac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfb0:	d1ba      	bne.n	800bf28 <__swsetup_r+0x30>
 800bfb2:	bd70      	pop	{r4, r5, r6, pc}
 800bfb4:	0781      	lsls	r1, r0, #30
 800bfb6:	bf58      	it	pl
 800bfb8:	6963      	ldrpl	r3, [r4, #20]
 800bfba:	60a3      	str	r3, [r4, #8]
 800bfbc:	e7f4      	b.n	800bfa8 <__swsetup_r+0xb0>
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	e7f7      	b.n	800bfb2 <__swsetup_r+0xba>
 800bfc2:	bf00      	nop
 800bfc4:	20000028 	.word	0x20000028
 800bfc8:	0800cbd8 	.word	0x0800cbd8
 800bfcc:	0800cbf8 	.word	0x0800cbf8
 800bfd0:	0800cbb8 	.word	0x0800cbb8

0800bfd4 <__assert_func>:
 800bfd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfd6:	4614      	mov	r4, r2
 800bfd8:	461a      	mov	r2, r3
 800bfda:	4b09      	ldr	r3, [pc, #36]	; (800c000 <__assert_func+0x2c>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4605      	mov	r5, r0
 800bfe0:	68d8      	ldr	r0, [r3, #12]
 800bfe2:	b14c      	cbz	r4, 800bff8 <__assert_func+0x24>
 800bfe4:	4b07      	ldr	r3, [pc, #28]	; (800c004 <__assert_func+0x30>)
 800bfe6:	9100      	str	r1, [sp, #0]
 800bfe8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfec:	4906      	ldr	r1, [pc, #24]	; (800c008 <__assert_func+0x34>)
 800bfee:	462b      	mov	r3, r5
 800bff0:	f000 f8e0 	bl	800c1b4 <fiprintf>
 800bff4:	f000 fa1c 	bl	800c430 <abort>
 800bff8:	4b04      	ldr	r3, [pc, #16]	; (800c00c <__assert_func+0x38>)
 800bffa:	461c      	mov	r4, r3
 800bffc:	e7f3      	b.n	800bfe6 <__assert_func+0x12>
 800bffe:	bf00      	nop
 800c000:	20000028 	.word	0x20000028
 800c004:	0800ce4f 	.word	0x0800ce4f
 800c008:	0800ce5c 	.word	0x0800ce5c
 800c00c:	0800ce8a 	.word	0x0800ce8a

0800c010 <_close_r>:
 800c010:	b538      	push	{r3, r4, r5, lr}
 800c012:	4d06      	ldr	r5, [pc, #24]	; (800c02c <_close_r+0x1c>)
 800c014:	2300      	movs	r3, #0
 800c016:	4604      	mov	r4, r0
 800c018:	4608      	mov	r0, r1
 800c01a:	602b      	str	r3, [r5, #0]
 800c01c:	f7f5 fe67 	bl	8001cee <_close>
 800c020:	1c43      	adds	r3, r0, #1
 800c022:	d102      	bne.n	800c02a <_close_r+0x1a>
 800c024:	682b      	ldr	r3, [r5, #0]
 800c026:	b103      	cbz	r3, 800c02a <_close_r+0x1a>
 800c028:	6023      	str	r3, [r4, #0]
 800c02a:	bd38      	pop	{r3, r4, r5, pc}
 800c02c:	20005d78 	.word	0x20005d78

0800c030 <__sflush_r>:
 800c030:	898a      	ldrh	r2, [r1, #12]
 800c032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c036:	4605      	mov	r5, r0
 800c038:	0710      	lsls	r0, r2, #28
 800c03a:	460c      	mov	r4, r1
 800c03c:	d458      	bmi.n	800c0f0 <__sflush_r+0xc0>
 800c03e:	684b      	ldr	r3, [r1, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	dc05      	bgt.n	800c050 <__sflush_r+0x20>
 800c044:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c046:	2b00      	cmp	r3, #0
 800c048:	dc02      	bgt.n	800c050 <__sflush_r+0x20>
 800c04a:	2000      	movs	r0, #0
 800c04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c052:	2e00      	cmp	r6, #0
 800c054:	d0f9      	beq.n	800c04a <__sflush_r+0x1a>
 800c056:	2300      	movs	r3, #0
 800c058:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c05c:	682f      	ldr	r7, [r5, #0]
 800c05e:	602b      	str	r3, [r5, #0]
 800c060:	d032      	beq.n	800c0c8 <__sflush_r+0x98>
 800c062:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c064:	89a3      	ldrh	r3, [r4, #12]
 800c066:	075a      	lsls	r2, r3, #29
 800c068:	d505      	bpl.n	800c076 <__sflush_r+0x46>
 800c06a:	6863      	ldr	r3, [r4, #4]
 800c06c:	1ac0      	subs	r0, r0, r3
 800c06e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c070:	b10b      	cbz	r3, 800c076 <__sflush_r+0x46>
 800c072:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c074:	1ac0      	subs	r0, r0, r3
 800c076:	2300      	movs	r3, #0
 800c078:	4602      	mov	r2, r0
 800c07a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c07c:	6a21      	ldr	r1, [r4, #32]
 800c07e:	4628      	mov	r0, r5
 800c080:	47b0      	blx	r6
 800c082:	1c43      	adds	r3, r0, #1
 800c084:	89a3      	ldrh	r3, [r4, #12]
 800c086:	d106      	bne.n	800c096 <__sflush_r+0x66>
 800c088:	6829      	ldr	r1, [r5, #0]
 800c08a:	291d      	cmp	r1, #29
 800c08c:	d82c      	bhi.n	800c0e8 <__sflush_r+0xb8>
 800c08e:	4a2a      	ldr	r2, [pc, #168]	; (800c138 <__sflush_r+0x108>)
 800c090:	40ca      	lsrs	r2, r1
 800c092:	07d6      	lsls	r6, r2, #31
 800c094:	d528      	bpl.n	800c0e8 <__sflush_r+0xb8>
 800c096:	2200      	movs	r2, #0
 800c098:	6062      	str	r2, [r4, #4]
 800c09a:	04d9      	lsls	r1, r3, #19
 800c09c:	6922      	ldr	r2, [r4, #16]
 800c09e:	6022      	str	r2, [r4, #0]
 800c0a0:	d504      	bpl.n	800c0ac <__sflush_r+0x7c>
 800c0a2:	1c42      	adds	r2, r0, #1
 800c0a4:	d101      	bne.n	800c0aa <__sflush_r+0x7a>
 800c0a6:	682b      	ldr	r3, [r5, #0]
 800c0a8:	b903      	cbnz	r3, 800c0ac <__sflush_r+0x7c>
 800c0aa:	6560      	str	r0, [r4, #84]	; 0x54
 800c0ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0ae:	602f      	str	r7, [r5, #0]
 800c0b0:	2900      	cmp	r1, #0
 800c0b2:	d0ca      	beq.n	800c04a <__sflush_r+0x1a>
 800c0b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0b8:	4299      	cmp	r1, r3
 800c0ba:	d002      	beq.n	800c0c2 <__sflush_r+0x92>
 800c0bc:	4628      	mov	r0, r5
 800c0be:	f000 f92f 	bl	800c320 <_free_r>
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	6360      	str	r0, [r4, #52]	; 0x34
 800c0c6:	e7c1      	b.n	800c04c <__sflush_r+0x1c>
 800c0c8:	6a21      	ldr	r1, [r4, #32]
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	47b0      	blx	r6
 800c0d0:	1c41      	adds	r1, r0, #1
 800c0d2:	d1c7      	bne.n	800c064 <__sflush_r+0x34>
 800c0d4:	682b      	ldr	r3, [r5, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d0c4      	beq.n	800c064 <__sflush_r+0x34>
 800c0da:	2b1d      	cmp	r3, #29
 800c0dc:	d001      	beq.n	800c0e2 <__sflush_r+0xb2>
 800c0de:	2b16      	cmp	r3, #22
 800c0e0:	d101      	bne.n	800c0e6 <__sflush_r+0xb6>
 800c0e2:	602f      	str	r7, [r5, #0]
 800c0e4:	e7b1      	b.n	800c04a <__sflush_r+0x1a>
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0ec:	81a3      	strh	r3, [r4, #12]
 800c0ee:	e7ad      	b.n	800c04c <__sflush_r+0x1c>
 800c0f0:	690f      	ldr	r7, [r1, #16]
 800c0f2:	2f00      	cmp	r7, #0
 800c0f4:	d0a9      	beq.n	800c04a <__sflush_r+0x1a>
 800c0f6:	0793      	lsls	r3, r2, #30
 800c0f8:	680e      	ldr	r6, [r1, #0]
 800c0fa:	bf08      	it	eq
 800c0fc:	694b      	ldreq	r3, [r1, #20]
 800c0fe:	600f      	str	r7, [r1, #0]
 800c100:	bf18      	it	ne
 800c102:	2300      	movne	r3, #0
 800c104:	eba6 0807 	sub.w	r8, r6, r7
 800c108:	608b      	str	r3, [r1, #8]
 800c10a:	f1b8 0f00 	cmp.w	r8, #0
 800c10e:	dd9c      	ble.n	800c04a <__sflush_r+0x1a>
 800c110:	6a21      	ldr	r1, [r4, #32]
 800c112:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c114:	4643      	mov	r3, r8
 800c116:	463a      	mov	r2, r7
 800c118:	4628      	mov	r0, r5
 800c11a:	47b0      	blx	r6
 800c11c:	2800      	cmp	r0, #0
 800c11e:	dc06      	bgt.n	800c12e <__sflush_r+0xfe>
 800c120:	89a3      	ldrh	r3, [r4, #12]
 800c122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c126:	81a3      	strh	r3, [r4, #12]
 800c128:	f04f 30ff 	mov.w	r0, #4294967295
 800c12c:	e78e      	b.n	800c04c <__sflush_r+0x1c>
 800c12e:	4407      	add	r7, r0
 800c130:	eba8 0800 	sub.w	r8, r8, r0
 800c134:	e7e9      	b.n	800c10a <__sflush_r+0xda>
 800c136:	bf00      	nop
 800c138:	20400001 	.word	0x20400001

0800c13c <_fflush_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	690b      	ldr	r3, [r1, #16]
 800c140:	4605      	mov	r5, r0
 800c142:	460c      	mov	r4, r1
 800c144:	b913      	cbnz	r3, 800c14c <_fflush_r+0x10>
 800c146:	2500      	movs	r5, #0
 800c148:	4628      	mov	r0, r5
 800c14a:	bd38      	pop	{r3, r4, r5, pc}
 800c14c:	b118      	cbz	r0, 800c156 <_fflush_r+0x1a>
 800c14e:	6983      	ldr	r3, [r0, #24]
 800c150:	b90b      	cbnz	r3, 800c156 <_fflush_r+0x1a>
 800c152:	f7fe f853 	bl	800a1fc <__sinit>
 800c156:	4b14      	ldr	r3, [pc, #80]	; (800c1a8 <_fflush_r+0x6c>)
 800c158:	429c      	cmp	r4, r3
 800c15a:	d11b      	bne.n	800c194 <_fflush_r+0x58>
 800c15c:	686c      	ldr	r4, [r5, #4]
 800c15e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d0ef      	beq.n	800c146 <_fflush_r+0xa>
 800c166:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c168:	07d0      	lsls	r0, r2, #31
 800c16a:	d404      	bmi.n	800c176 <_fflush_r+0x3a>
 800c16c:	0599      	lsls	r1, r3, #22
 800c16e:	d402      	bmi.n	800c176 <_fflush_r+0x3a>
 800c170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c172:	f7fe fc50 	bl	800aa16 <__retarget_lock_acquire_recursive>
 800c176:	4628      	mov	r0, r5
 800c178:	4621      	mov	r1, r4
 800c17a:	f7ff ff59 	bl	800c030 <__sflush_r>
 800c17e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c180:	07da      	lsls	r2, r3, #31
 800c182:	4605      	mov	r5, r0
 800c184:	d4e0      	bmi.n	800c148 <_fflush_r+0xc>
 800c186:	89a3      	ldrh	r3, [r4, #12]
 800c188:	059b      	lsls	r3, r3, #22
 800c18a:	d4dd      	bmi.n	800c148 <_fflush_r+0xc>
 800c18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c18e:	f7fe fc43 	bl	800aa18 <__retarget_lock_release_recursive>
 800c192:	e7d9      	b.n	800c148 <_fflush_r+0xc>
 800c194:	4b05      	ldr	r3, [pc, #20]	; (800c1ac <_fflush_r+0x70>)
 800c196:	429c      	cmp	r4, r3
 800c198:	d101      	bne.n	800c19e <_fflush_r+0x62>
 800c19a:	68ac      	ldr	r4, [r5, #8]
 800c19c:	e7df      	b.n	800c15e <_fflush_r+0x22>
 800c19e:	4b04      	ldr	r3, [pc, #16]	; (800c1b0 <_fflush_r+0x74>)
 800c1a0:	429c      	cmp	r4, r3
 800c1a2:	bf08      	it	eq
 800c1a4:	68ec      	ldreq	r4, [r5, #12]
 800c1a6:	e7da      	b.n	800c15e <_fflush_r+0x22>
 800c1a8:	0800cbd8 	.word	0x0800cbd8
 800c1ac:	0800cbf8 	.word	0x0800cbf8
 800c1b0:	0800cbb8 	.word	0x0800cbb8

0800c1b4 <fiprintf>:
 800c1b4:	b40e      	push	{r1, r2, r3}
 800c1b6:	b503      	push	{r0, r1, lr}
 800c1b8:	4601      	mov	r1, r0
 800c1ba:	ab03      	add	r3, sp, #12
 800c1bc:	4805      	ldr	r0, [pc, #20]	; (800c1d4 <fiprintf+0x20>)
 800c1be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1c2:	6800      	ldr	r0, [r0, #0]
 800c1c4:	9301      	str	r3, [sp, #4]
 800c1c6:	f7ff faf3 	bl	800b7b0 <_vfiprintf_r>
 800c1ca:	b002      	add	sp, #8
 800c1cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1d0:	b003      	add	sp, #12
 800c1d2:	4770      	bx	lr
 800c1d4:	20000028 	.word	0x20000028

0800c1d8 <_lseek_r>:
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	4d07      	ldr	r5, [pc, #28]	; (800c1f8 <_lseek_r+0x20>)
 800c1dc:	4604      	mov	r4, r0
 800c1de:	4608      	mov	r0, r1
 800c1e0:	4611      	mov	r1, r2
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	602a      	str	r2, [r5, #0]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	f7f5 fda8 	bl	8001d3c <_lseek>
 800c1ec:	1c43      	adds	r3, r0, #1
 800c1ee:	d102      	bne.n	800c1f6 <_lseek_r+0x1e>
 800c1f0:	682b      	ldr	r3, [r5, #0]
 800c1f2:	b103      	cbz	r3, 800c1f6 <_lseek_r+0x1e>
 800c1f4:	6023      	str	r3, [r4, #0]
 800c1f6:	bd38      	pop	{r3, r4, r5, pc}
 800c1f8:	20005d78 	.word	0x20005d78

0800c1fc <__swhatbuf_r>:
 800c1fc:	b570      	push	{r4, r5, r6, lr}
 800c1fe:	460e      	mov	r6, r1
 800c200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c204:	2900      	cmp	r1, #0
 800c206:	b096      	sub	sp, #88	; 0x58
 800c208:	4614      	mov	r4, r2
 800c20a:	461d      	mov	r5, r3
 800c20c:	da07      	bge.n	800c21e <__swhatbuf_r+0x22>
 800c20e:	2300      	movs	r3, #0
 800c210:	602b      	str	r3, [r5, #0]
 800c212:	89b3      	ldrh	r3, [r6, #12]
 800c214:	061a      	lsls	r2, r3, #24
 800c216:	d410      	bmi.n	800c23a <__swhatbuf_r+0x3e>
 800c218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c21c:	e00e      	b.n	800c23c <__swhatbuf_r+0x40>
 800c21e:	466a      	mov	r2, sp
 800c220:	f000 f90e 	bl	800c440 <_fstat_r>
 800c224:	2800      	cmp	r0, #0
 800c226:	dbf2      	blt.n	800c20e <__swhatbuf_r+0x12>
 800c228:	9a01      	ldr	r2, [sp, #4]
 800c22a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c22e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c232:	425a      	negs	r2, r3
 800c234:	415a      	adcs	r2, r3
 800c236:	602a      	str	r2, [r5, #0]
 800c238:	e7ee      	b.n	800c218 <__swhatbuf_r+0x1c>
 800c23a:	2340      	movs	r3, #64	; 0x40
 800c23c:	2000      	movs	r0, #0
 800c23e:	6023      	str	r3, [r4, #0]
 800c240:	b016      	add	sp, #88	; 0x58
 800c242:	bd70      	pop	{r4, r5, r6, pc}

0800c244 <__smakebuf_r>:
 800c244:	898b      	ldrh	r3, [r1, #12]
 800c246:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c248:	079d      	lsls	r5, r3, #30
 800c24a:	4606      	mov	r6, r0
 800c24c:	460c      	mov	r4, r1
 800c24e:	d507      	bpl.n	800c260 <__smakebuf_r+0x1c>
 800c250:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c254:	6023      	str	r3, [r4, #0]
 800c256:	6123      	str	r3, [r4, #16]
 800c258:	2301      	movs	r3, #1
 800c25a:	6163      	str	r3, [r4, #20]
 800c25c:	b002      	add	sp, #8
 800c25e:	bd70      	pop	{r4, r5, r6, pc}
 800c260:	ab01      	add	r3, sp, #4
 800c262:	466a      	mov	r2, sp
 800c264:	f7ff ffca 	bl	800c1fc <__swhatbuf_r>
 800c268:	9900      	ldr	r1, [sp, #0]
 800c26a:	4605      	mov	r5, r0
 800c26c:	4630      	mov	r0, r6
 800c26e:	f7ff f8bf 	bl	800b3f0 <_malloc_r>
 800c272:	b948      	cbnz	r0, 800c288 <__smakebuf_r+0x44>
 800c274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c278:	059a      	lsls	r2, r3, #22
 800c27a:	d4ef      	bmi.n	800c25c <__smakebuf_r+0x18>
 800c27c:	f023 0303 	bic.w	r3, r3, #3
 800c280:	f043 0302 	orr.w	r3, r3, #2
 800c284:	81a3      	strh	r3, [r4, #12]
 800c286:	e7e3      	b.n	800c250 <__smakebuf_r+0xc>
 800c288:	4b0d      	ldr	r3, [pc, #52]	; (800c2c0 <__smakebuf_r+0x7c>)
 800c28a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	6020      	str	r0, [r4, #0]
 800c290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c294:	81a3      	strh	r3, [r4, #12]
 800c296:	9b00      	ldr	r3, [sp, #0]
 800c298:	6163      	str	r3, [r4, #20]
 800c29a:	9b01      	ldr	r3, [sp, #4]
 800c29c:	6120      	str	r0, [r4, #16]
 800c29e:	b15b      	cbz	r3, 800c2b8 <__smakebuf_r+0x74>
 800c2a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	f000 f8dd 	bl	800c464 <_isatty_r>
 800c2aa:	b128      	cbz	r0, 800c2b8 <__smakebuf_r+0x74>
 800c2ac:	89a3      	ldrh	r3, [r4, #12]
 800c2ae:	f023 0303 	bic.w	r3, r3, #3
 800c2b2:	f043 0301 	orr.w	r3, r3, #1
 800c2b6:	81a3      	strh	r3, [r4, #12]
 800c2b8:	89a0      	ldrh	r0, [r4, #12]
 800c2ba:	4305      	orrs	r5, r0
 800c2bc:	81a5      	strh	r5, [r4, #12]
 800c2be:	e7cd      	b.n	800c25c <__smakebuf_r+0x18>
 800c2c0:	0800a195 	.word	0x0800a195

0800c2c4 <malloc>:
 800c2c4:	4b02      	ldr	r3, [pc, #8]	; (800c2d0 <malloc+0xc>)
 800c2c6:	4601      	mov	r1, r0
 800c2c8:	6818      	ldr	r0, [r3, #0]
 800c2ca:	f7ff b891 	b.w	800b3f0 <_malloc_r>
 800c2ce:	bf00      	nop
 800c2d0:	20000028 	.word	0x20000028

0800c2d4 <memmove>:
 800c2d4:	4288      	cmp	r0, r1
 800c2d6:	b510      	push	{r4, lr}
 800c2d8:	eb01 0402 	add.w	r4, r1, r2
 800c2dc:	d902      	bls.n	800c2e4 <memmove+0x10>
 800c2de:	4284      	cmp	r4, r0
 800c2e0:	4623      	mov	r3, r4
 800c2e2:	d807      	bhi.n	800c2f4 <memmove+0x20>
 800c2e4:	1e43      	subs	r3, r0, #1
 800c2e6:	42a1      	cmp	r1, r4
 800c2e8:	d008      	beq.n	800c2fc <memmove+0x28>
 800c2ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c2f2:	e7f8      	b.n	800c2e6 <memmove+0x12>
 800c2f4:	4402      	add	r2, r0
 800c2f6:	4601      	mov	r1, r0
 800c2f8:	428a      	cmp	r2, r1
 800c2fa:	d100      	bne.n	800c2fe <memmove+0x2a>
 800c2fc:	bd10      	pop	{r4, pc}
 800c2fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c306:	e7f7      	b.n	800c2f8 <memmove+0x24>

0800c308 <__malloc_lock>:
 800c308:	4801      	ldr	r0, [pc, #4]	; (800c310 <__malloc_lock+0x8>)
 800c30a:	f7fe bb84 	b.w	800aa16 <__retarget_lock_acquire_recursive>
 800c30e:	bf00      	nop
 800c310:	20005d70 	.word	0x20005d70

0800c314 <__malloc_unlock>:
 800c314:	4801      	ldr	r0, [pc, #4]	; (800c31c <__malloc_unlock+0x8>)
 800c316:	f7fe bb7f 	b.w	800aa18 <__retarget_lock_release_recursive>
 800c31a:	bf00      	nop
 800c31c:	20005d70 	.word	0x20005d70

0800c320 <_free_r>:
 800c320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c322:	2900      	cmp	r1, #0
 800c324:	d048      	beq.n	800c3b8 <_free_r+0x98>
 800c326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c32a:	9001      	str	r0, [sp, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f1a1 0404 	sub.w	r4, r1, #4
 800c332:	bfb8      	it	lt
 800c334:	18e4      	addlt	r4, r4, r3
 800c336:	f7ff ffe7 	bl	800c308 <__malloc_lock>
 800c33a:	4a20      	ldr	r2, [pc, #128]	; (800c3bc <_free_r+0x9c>)
 800c33c:	9801      	ldr	r0, [sp, #4]
 800c33e:	6813      	ldr	r3, [r2, #0]
 800c340:	4615      	mov	r5, r2
 800c342:	b933      	cbnz	r3, 800c352 <_free_r+0x32>
 800c344:	6063      	str	r3, [r4, #4]
 800c346:	6014      	str	r4, [r2, #0]
 800c348:	b003      	add	sp, #12
 800c34a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c34e:	f7ff bfe1 	b.w	800c314 <__malloc_unlock>
 800c352:	42a3      	cmp	r3, r4
 800c354:	d90b      	bls.n	800c36e <_free_r+0x4e>
 800c356:	6821      	ldr	r1, [r4, #0]
 800c358:	1862      	adds	r2, r4, r1
 800c35a:	4293      	cmp	r3, r2
 800c35c:	bf04      	itt	eq
 800c35e:	681a      	ldreq	r2, [r3, #0]
 800c360:	685b      	ldreq	r3, [r3, #4]
 800c362:	6063      	str	r3, [r4, #4]
 800c364:	bf04      	itt	eq
 800c366:	1852      	addeq	r2, r2, r1
 800c368:	6022      	streq	r2, [r4, #0]
 800c36a:	602c      	str	r4, [r5, #0]
 800c36c:	e7ec      	b.n	800c348 <_free_r+0x28>
 800c36e:	461a      	mov	r2, r3
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	b10b      	cbz	r3, 800c378 <_free_r+0x58>
 800c374:	42a3      	cmp	r3, r4
 800c376:	d9fa      	bls.n	800c36e <_free_r+0x4e>
 800c378:	6811      	ldr	r1, [r2, #0]
 800c37a:	1855      	adds	r5, r2, r1
 800c37c:	42a5      	cmp	r5, r4
 800c37e:	d10b      	bne.n	800c398 <_free_r+0x78>
 800c380:	6824      	ldr	r4, [r4, #0]
 800c382:	4421      	add	r1, r4
 800c384:	1854      	adds	r4, r2, r1
 800c386:	42a3      	cmp	r3, r4
 800c388:	6011      	str	r1, [r2, #0]
 800c38a:	d1dd      	bne.n	800c348 <_free_r+0x28>
 800c38c:	681c      	ldr	r4, [r3, #0]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	6053      	str	r3, [r2, #4]
 800c392:	4421      	add	r1, r4
 800c394:	6011      	str	r1, [r2, #0]
 800c396:	e7d7      	b.n	800c348 <_free_r+0x28>
 800c398:	d902      	bls.n	800c3a0 <_free_r+0x80>
 800c39a:	230c      	movs	r3, #12
 800c39c:	6003      	str	r3, [r0, #0]
 800c39e:	e7d3      	b.n	800c348 <_free_r+0x28>
 800c3a0:	6825      	ldr	r5, [r4, #0]
 800c3a2:	1961      	adds	r1, r4, r5
 800c3a4:	428b      	cmp	r3, r1
 800c3a6:	bf04      	itt	eq
 800c3a8:	6819      	ldreq	r1, [r3, #0]
 800c3aa:	685b      	ldreq	r3, [r3, #4]
 800c3ac:	6063      	str	r3, [r4, #4]
 800c3ae:	bf04      	itt	eq
 800c3b0:	1949      	addeq	r1, r1, r5
 800c3b2:	6021      	streq	r1, [r4, #0]
 800c3b4:	6054      	str	r4, [r2, #4]
 800c3b6:	e7c7      	b.n	800c348 <_free_r+0x28>
 800c3b8:	b003      	add	sp, #12
 800c3ba:	bd30      	pop	{r4, r5, pc}
 800c3bc:	20000704 	.word	0x20000704

0800c3c0 <_realloc_r>:
 800c3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c2:	4607      	mov	r7, r0
 800c3c4:	4614      	mov	r4, r2
 800c3c6:	460e      	mov	r6, r1
 800c3c8:	b921      	cbnz	r1, 800c3d4 <_realloc_r+0x14>
 800c3ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c3ce:	4611      	mov	r1, r2
 800c3d0:	f7ff b80e 	b.w	800b3f0 <_malloc_r>
 800c3d4:	b922      	cbnz	r2, 800c3e0 <_realloc_r+0x20>
 800c3d6:	f7ff ffa3 	bl	800c320 <_free_r>
 800c3da:	4625      	mov	r5, r4
 800c3dc:	4628      	mov	r0, r5
 800c3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3e0:	f000 f850 	bl	800c484 <_malloc_usable_size_r>
 800c3e4:	42a0      	cmp	r0, r4
 800c3e6:	d20f      	bcs.n	800c408 <_realloc_r+0x48>
 800c3e8:	4621      	mov	r1, r4
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	f7ff f800 	bl	800b3f0 <_malloc_r>
 800c3f0:	4605      	mov	r5, r0
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d0f2      	beq.n	800c3dc <_realloc_r+0x1c>
 800c3f6:	4631      	mov	r1, r6
 800c3f8:	4622      	mov	r2, r4
 800c3fa:	f7fe fb20 	bl	800aa3e <memcpy>
 800c3fe:	4631      	mov	r1, r6
 800c400:	4638      	mov	r0, r7
 800c402:	f7ff ff8d 	bl	800c320 <_free_r>
 800c406:	e7e9      	b.n	800c3dc <_realloc_r+0x1c>
 800c408:	4635      	mov	r5, r6
 800c40a:	e7e7      	b.n	800c3dc <_realloc_r+0x1c>

0800c40c <_read_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	4d07      	ldr	r5, [pc, #28]	; (800c42c <_read_r+0x20>)
 800c410:	4604      	mov	r4, r0
 800c412:	4608      	mov	r0, r1
 800c414:	4611      	mov	r1, r2
 800c416:	2200      	movs	r2, #0
 800c418:	602a      	str	r2, [r5, #0]
 800c41a:	461a      	mov	r2, r3
 800c41c:	f7f5 fc2e 	bl	8001c7c <_read>
 800c420:	1c43      	adds	r3, r0, #1
 800c422:	d102      	bne.n	800c42a <_read_r+0x1e>
 800c424:	682b      	ldr	r3, [r5, #0]
 800c426:	b103      	cbz	r3, 800c42a <_read_r+0x1e>
 800c428:	6023      	str	r3, [r4, #0]
 800c42a:	bd38      	pop	{r3, r4, r5, pc}
 800c42c:	20005d78 	.word	0x20005d78

0800c430 <abort>:
 800c430:	b508      	push	{r3, lr}
 800c432:	2006      	movs	r0, #6
 800c434:	f000 f856 	bl	800c4e4 <raise>
 800c438:	2001      	movs	r0, #1
 800c43a:	f7f5 fc15 	bl	8001c68 <_exit>
	...

0800c440 <_fstat_r>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	4d07      	ldr	r5, [pc, #28]	; (800c460 <_fstat_r+0x20>)
 800c444:	2300      	movs	r3, #0
 800c446:	4604      	mov	r4, r0
 800c448:	4608      	mov	r0, r1
 800c44a:	4611      	mov	r1, r2
 800c44c:	602b      	str	r3, [r5, #0]
 800c44e:	f7f5 fc5a 	bl	8001d06 <_fstat>
 800c452:	1c43      	adds	r3, r0, #1
 800c454:	d102      	bne.n	800c45c <_fstat_r+0x1c>
 800c456:	682b      	ldr	r3, [r5, #0]
 800c458:	b103      	cbz	r3, 800c45c <_fstat_r+0x1c>
 800c45a:	6023      	str	r3, [r4, #0]
 800c45c:	bd38      	pop	{r3, r4, r5, pc}
 800c45e:	bf00      	nop
 800c460:	20005d78 	.word	0x20005d78

0800c464 <_isatty_r>:
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	4d06      	ldr	r5, [pc, #24]	; (800c480 <_isatty_r+0x1c>)
 800c468:	2300      	movs	r3, #0
 800c46a:	4604      	mov	r4, r0
 800c46c:	4608      	mov	r0, r1
 800c46e:	602b      	str	r3, [r5, #0]
 800c470:	f7f5 fc59 	bl	8001d26 <_isatty>
 800c474:	1c43      	adds	r3, r0, #1
 800c476:	d102      	bne.n	800c47e <_isatty_r+0x1a>
 800c478:	682b      	ldr	r3, [r5, #0]
 800c47a:	b103      	cbz	r3, 800c47e <_isatty_r+0x1a>
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	bd38      	pop	{r3, r4, r5, pc}
 800c480:	20005d78 	.word	0x20005d78

0800c484 <_malloc_usable_size_r>:
 800c484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c488:	1f18      	subs	r0, r3, #4
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	bfbc      	itt	lt
 800c48e:	580b      	ldrlt	r3, [r1, r0]
 800c490:	18c0      	addlt	r0, r0, r3
 800c492:	4770      	bx	lr

0800c494 <_raise_r>:
 800c494:	291f      	cmp	r1, #31
 800c496:	b538      	push	{r3, r4, r5, lr}
 800c498:	4604      	mov	r4, r0
 800c49a:	460d      	mov	r5, r1
 800c49c:	d904      	bls.n	800c4a8 <_raise_r+0x14>
 800c49e:	2316      	movs	r3, #22
 800c4a0:	6003      	str	r3, [r0, #0]
 800c4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a6:	bd38      	pop	{r3, r4, r5, pc}
 800c4a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c4aa:	b112      	cbz	r2, 800c4b2 <_raise_r+0x1e>
 800c4ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4b0:	b94b      	cbnz	r3, 800c4c6 <_raise_r+0x32>
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	f000 f830 	bl	800c518 <_getpid_r>
 800c4b8:	462a      	mov	r2, r5
 800c4ba:	4601      	mov	r1, r0
 800c4bc:	4620      	mov	r0, r4
 800c4be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4c2:	f000 b817 	b.w	800c4f4 <_kill_r>
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d00a      	beq.n	800c4e0 <_raise_r+0x4c>
 800c4ca:	1c59      	adds	r1, r3, #1
 800c4cc:	d103      	bne.n	800c4d6 <_raise_r+0x42>
 800c4ce:	2316      	movs	r3, #22
 800c4d0:	6003      	str	r3, [r0, #0]
 800c4d2:	2001      	movs	r0, #1
 800c4d4:	e7e7      	b.n	800c4a6 <_raise_r+0x12>
 800c4d6:	2400      	movs	r4, #0
 800c4d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c4dc:	4628      	mov	r0, r5
 800c4de:	4798      	blx	r3
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	e7e0      	b.n	800c4a6 <_raise_r+0x12>

0800c4e4 <raise>:
 800c4e4:	4b02      	ldr	r3, [pc, #8]	; (800c4f0 <raise+0xc>)
 800c4e6:	4601      	mov	r1, r0
 800c4e8:	6818      	ldr	r0, [r3, #0]
 800c4ea:	f7ff bfd3 	b.w	800c494 <_raise_r>
 800c4ee:	bf00      	nop
 800c4f0:	20000028 	.word	0x20000028

0800c4f4 <_kill_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	4d07      	ldr	r5, [pc, #28]	; (800c514 <_kill_r+0x20>)
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	4608      	mov	r0, r1
 800c4fe:	4611      	mov	r1, r2
 800c500:	602b      	str	r3, [r5, #0]
 800c502:	f7f5 fba1 	bl	8001c48 <_kill>
 800c506:	1c43      	adds	r3, r0, #1
 800c508:	d102      	bne.n	800c510 <_kill_r+0x1c>
 800c50a:	682b      	ldr	r3, [r5, #0]
 800c50c:	b103      	cbz	r3, 800c510 <_kill_r+0x1c>
 800c50e:	6023      	str	r3, [r4, #0]
 800c510:	bd38      	pop	{r3, r4, r5, pc}
 800c512:	bf00      	nop
 800c514:	20005d78 	.word	0x20005d78

0800c518 <_getpid_r>:
 800c518:	f7f5 bb8e 	b.w	8001c38 <_getpid>

0800c51c <_init>:
 800c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51e:	bf00      	nop
 800c520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c522:	bc08      	pop	{r3}
 800c524:	469e      	mov	lr, r3
 800c526:	4770      	bx	lr

0800c528 <_fini>:
 800c528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52a:	bf00      	nop
 800c52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c52e:	bc08      	pop	{r3}
 800c530:	469e      	mov	lr, r3
 800c532:	4770      	bx	lr
